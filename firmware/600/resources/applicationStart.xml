<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://www.kinoma.com/fskin/1" 
  title="kBook" width="600" height="800" 
		minWidth="600" minHeight="600" 
		maxWidth="800" maxHeight="800">
	<ebook xmlns="http://www.kinoma.com/fskin/1">
		<variable id="STANDBY_STATE" value="1"/>
		<code>
			<function id="doProcessing" params="value">
				this.processing(value);
			</function>
			<function id="doProcessed" params="value">
				this.processed(value);
			</function>
			<function id="doRotate">
				this.rotate();
			</function>
			<function id="doTest" params="value">
				this.test(value);
			</function>
			<function id="doUpdateWaveform" params="value">
				this.updateWaveform(value);
			</function>
			<function id="doTestHardReset">
				return ebook.testHardReset();
			</function>
			<function id="doTestDemoMode">
				if( "testDemoMode" in ebook ){
					return ebook.testDemoMode();
				}else
					return false;
			</function>
			<function id="doPerformHardReset">
				ebookConfig.FactoryDefault(0);
				this.post("kShutdown", true)
			</function>
			<function id="doPowerSwitchHold">
				var value = this.getVariable("STANDBY_STATE")
				if (value == 1) {
					this.setVariable("STANDBY_STATE", 2)
					this.post("kShutdownBySwitch", true)
				}
			</function>
			<function id="doPowerSwitch">
				if (!ebook.pm.isWaiting()) {
					var value = this.getVariable("STANDBY_STATE")
					if (value == 1) {
						this.setVariable("STANDBY_STATE", 0)
						this.resetLight()
						this.container.STANDBY_IMAGE.show(true)
						this.container.STANDBY_IMAGE.enable(true)
						this.setFlushUpdate()
						this.post("kSuspend", true)
					}
					else if (value == 0){
						this.setVariable("STANDBY_STATE", 1)
						this.container.STANDBY_IMAGE.show(false)
						this.container.STANDBY_IMAGE.enable(false)
						this.setFlushUpdate()
						this.post("kResume", true)
					}
					else
						this.setVariable("STANDBY_STATE", 1)
					BookUtil.removeButtonEvent(this.container.getWindow(), "kPowerSwitch")
				}
			</function>
			<function id="canLight">
				return this.getVariable("STANDBY_STATE") != 0
			</function>
		</code>
		<parts>
			<number key="kDate" poke="setDateTime" id="DATE_TIME"/>
			<integer key="kBattery" peek="getBattery" id="BATTERY"/>
			<string key="kDeviceID" peek="getDeviceID" id="DEVICE_ID"/>
			<string key="kFirmwareVersion" peek="getFirmwareVersion" id="FIRMWARE_VERSION"/>
			<boolean key="kOrientation" peek="getOrientation" id="ORIENTATION"/>
			<boolean key="kPower" peek="getPower" id="POWER"/>
			<boolean key="kStoreStatus" peek="getStoreStatus" id="STORE_STATUS"/>
      <boolean key="kAdobeStatus" peek="getAdobeStatus" id="ADOBE_STATUS"/>
      <string key="kWaveformVersion" peek="getWaveformVersion" id="WAVEFORM_VERSION"/>
			<boolean key="kResume" do="doResume"/>
			<boolean key="kSleep" do="doSleep"/>
			<boolean key="kSuspend" do="doSuspend"/>
			<boolean key="kTestMode" do="doTestMode"/>
			<boolean key="kWakeup" do="doWakeup"/>
	
			<boolean key="0x00" do="doQuit"/>
	
			<boolean key="0x21" do="doMenu"/>
			<boolean key="0x21-hold" do="doRoot"/>
			
			<boolean key="0x27" do="doCenter"/>
			<boolean key="0x27-hold" do="doCenter"/>
			<boolean key="kLeft" do="doLeft"/>
			<boolean key="kRight" do="doRight"/>
			<boolean key="kUp" do="doUp"/>
			<boolean key="kDown" do="doDown"/>
	
			<boolean key="0x31" do="doPrevious"/>
			<boolean key="0x31-hold" do="doFirst"/>
			<boolean key="0x30" do="doNext"/>
			<boolean key="0x30-hold" do="doLast"/>
			
			<boolean key="kPrevious" do="doPrevious"/>
			<boolean key="kFirst" do="doFirst"/>
			<boolean key="kNext" do="doNext"/>
			<boolean key="kLast" do="doLast"/>
			
			<boolean key="0x42" do="doSize"/>
			<boolean key="0x42-hold" do="doRotate"/>
			
			<boolean key="0x32" do="doMark"/>
			<boolean key="0x32-hold" do="doMarkMenu"/>
	
			<string key="1" do="doDigit" />
			<string key="2" do="doDigit" />
			<string key="3" do="doDigit" />
			<string key="4" do="doDigit" />
			<string key="5" do="doDigit" />
			<string key="6" do="doDigit" />
			<string key="7" do="doDigit" />
			<string key="8" do="doDigit" />
			<string key="9" do="doDigit" />
			<string key="0" do="doDigit" />

			<string key="kHold1" do="doHold1"/>
			<string key="kHold2" do="doHold2"/>
			<string key="kHold3" do="doHold3"/>
			<string key="kHold4" do="doMenu"/>
			<string key="kHold5" do="doHold5"/>
			<string key="kHold6" do="doHold6"/>
			<string key="kHold7" do="doHold7"/>
			<string key="kHold8" do="doHold8"/>
			<string key="kHold9" do="doHold9"/>
			<string key="kHold0" do="doHold0"/>
			
			<boolean key="0x41" do="doQuiet"/>
			<boolean key="0x41-hold" do="doMute"/>
			<boolean key="0x40" do="doLoud"/>
			<boolean key="0x40-hold" do="doMute"/>

			<boolean key="0x02" do="doOption"/>
			<boolean key="0x03" do="doSearch"/>
			<boolean key="0x0c" do="doRoot"/>
			<boolean key="0x15" do="doLight"/>

			<checkBoolean key="kLight" can="canLight" do="doLight"/>
			<boolean key="kVolumePlus" do="doLoud"/>
			<boolean key="kVolumeMinus" do="doQuiet"/>
			<!--boolean key="kMute" do="doMute"/-->
			<boolean key="kHold0" do="doMute"/>
			<boolean key="kHold1" do="doMute"/>
			<customHold key="kPowerSwitch" hold="doPowerSwitchHold" up="doPowerSwitch" holdTime="3000"/>
			
			<boolean key="kSize" do="doSize"/>
			<boolean key="kSearch" do="doSearch"/>
			<boolean key="kOption" do="doOption"/>

			<boolean key="kMenu" do="doMenu"/>
			<boolean key="kHome" do="doRoot"/>
			<custom key="kPreviousCustom" hold="doPreviousHold" up="doPrevious"/>
			<custom key="kNextCustom" hold="doNextHold" up="doNext"/>
			<boolean key="kShutdown" do="doQuit"/>
			<boolean key="kShutdownBySwitch" do="doShutdownBySwitch"/>
			
			<boolean key="kIdle" do="doIdle"/>

		   <boolean key="kHomeState" id="KEY_HOME_STATE"/>
		   <boolean key="kVolumePlusState" id="KEY_VOLUME_PLUS_STATE"/>
		   <boolean key="kPreviousState" id="KEY_PREVIOUS_STATE"/>
	</parts>
	</ebook>	
	<code>
		<function id="callScript" params="path">
			if (FileSystem.getFileInfo(path)) {
				var file = new Stream.File(path);
				var code = file.toString();
				file.close();
				var f = prsp.compile("", code);				
				f();
				delete f;
			}	
		</function>	
		<function id="initialized"><![CDATA[
			try {
				if (FileSystem.getFileInfo(System.applyEnvironment('[prspSafeModeFile]')) === undefined) {
					if (FileSystem.getFileInfo(System.applyEnvironment('[prspBetaStartupFile]'))) {
						this.callScript(System.applyEnvironment('[prspBetaStartupFile]'));
					} else {
						this.callScript(System.applyEnvironment('[prspStartupFile]'));
					}
				}
			} catch (ignore) {
			}
			if (ebook && "pm" in ebook)
				ebook.pm.doStateChange(ebook.pm.run);
			USBDispatcher.doRegister(this.getWindow());
			this.getDevice().doProcessed(100);
			this.getDevice().enableBlueLED(true);
			]]></function>
		<function id="terminating">
			this.getDevice().resetLight();
			this.getDevice().resetOrientation();
			this.getDevice().doProcessing(100);
			USBDispatcher.doUnregister()
			if ("delayTerminate" in ebookConfig)
				ebookConfig.delayTerminate()
		</function>
	</code>
	<view id="MAIN" href="scripts/main.xml" left="0" right="0" top="0" bottom="0"/>
	<standbyImage id="STANDBY_IMAGE" left="0" right="0" top="0" bottom="0" active="false" visible="false"/>
</document>