<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://www.kinoma.com/fskin/1" href="x-id://model">
	<assets>
		<!-- PRS+ stuff -->
		<import href="../prsp/prspAssets.xml"/>
		<texture href="kBookAssets.png">
			<cutout id="whiteBox" x="630" y="0" width="70" height="70" columns="0" lines="0" />
			<cutout id="blackBox" x="351" y="0" width="35" height="70" columns="0" lines="0" />
			<cutout id="greyBox" x="500" y="75" width="35" height="70" columns="0" lines="0" />
			<cutout id="greyLine" x="70" y="138" width="35" height="2" columns="0" lines="0" />
			<cutout id="empty" x="0" y="0" width="0" height="0" />
			
		</texture>
		
		<style id="popupText" halign="left" valign="top" top="8" left="10" size="30" style="bold"/>
		<style id="popupTextWhite" halign="left" valign="top" top="8" left="10" size="30" style="bold" color="#FFFFFF"/>
		
		<skin id="popup"
			cutouts="blackBorder-tl,blackBorder-tc,blackBorder-tr,blackBorder-cl,whiteBox,blackBorder-cl,blackBorder-bl,blackBorder-bc,blackBorder-br"
		/>
		<skin id="popupText"
			styles="popupText,popupText,popupText,popupText"
			cutouts="empty,greyLine,empty,empty,whiteBox,empty,empty,greyLine,empty"
		/>
		<skin id="popupIndicator"
			styles="popupText,popupText,popupText,popupText"
			cutouts="empty,empty,empty,empty,greyBox,empty,empty,empty,empty"
		/>
		<skin id="popupIndicatorSel"
			styles="popupTextWhite,popupTextWhite,popupTextWhite,popupTextWhite"
			cutouts="empty,empty,empty,empty,blackBox,empty,empty,empty,empty"
		/>
		<skin id="prspButton"
			styles="popupTextWhite,popupTextWhite,popupTextWhite,popupTextWhite"
			cutouts="empty,empty,empty"
		/>		
		<!-- End of PRS+ stuff -->

		<import href="kbookAssets.xml"/>
	</assets>
	<code>
		<function id="afterModal" params="group">
			if(group){
			group.show(false);
			}
			this.modal--;
			if (this.modal &lt; 0)
				debugger
			trace("afterModal: this.modal=" + this.modal + "\n");
			if (!this.modal) {
				this.focus(true);
				
				this.MENU_DETAILS_GROUP.MENU.enable(true);
				this.MENU_HOME_GROUP.MENU_HOME.enable(true);
				this.PAGE_GROUP.PAGE.enable(true);
				this.SONG_GROUP.SONG.enable(true);
				this.PICTURE_GROUP.PICTURE.enable(true);
				this.DEMO_PICTURE_GROUP.DEMO_PICTURE.enable(true);
				this.SETTING_GROUP.SETTING.enable(true);
				this.INFO_GROUP.INFO.enable(true);
				this.ABOUT_GROUP.ABOUT.enable(true);
				this.AUTORUN_GROUP.AUTORUN.enable(true);
				this.SOFT_RESET_GROUP.SOFT_RESET.enable(true);
				this.HARD_RESET_GROUP.HARD_RESET.enable(true);
				this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE.enable(true);
				this.FORMAT_MS_GROUP.FORMAT_MS.enable(true);
				this.FORMAT_SD_GROUP.FORMAT_SD.enable(true);
				this.DELETE_BOOK_GROUP.DELETE_BOOK.enable(true);
				this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR.enable(true);
				this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS.enable(true);
				this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN.enable(true);
				this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.enable(true);
				this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND.enable(true);
				this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT.enable(true);
				this.DEMO_MODE_GROUP.DEMO_MODE.enable(true);
				this.HOME_PERSONAL_GROUP.HOME_PERSONAL.enable(true);
				
				var target;
				switch (this.getVariable("STATE")) {
					case "MENU": target = this.MENU_DETAILS_GROUP.MENU; break;
					case "MENU_HOME": target = this.MENU_HOME_GROUP.MENU_HOME; break;
					case "PAGE": target = this.PAGE_GROUP.PAGE; break;
					case "SONG": target = this.SONG_GROUP.SONG; break;
					case "PICTURE": target = this.PICTURE_GROUP.PICTURE; break;
					case "DEMO_PICTURE": target = this.DEMO_PICTURE_GROUP.DEMO_PICTURE; break;
					case "SETTING": target = this.SETTING_GROUP.SETTING; break;
					case "INFO": target = this.INFO_GROUP.INFO; break;
					case "ABOUT": target = this.ABOUT_GROUP.ABOUT; break;
					case "AUTORUN": target = this.AUTORUN_GROUP.AUTORUN; break;
					case "SOFT_RESET": target = this.SOFT_RESET_GROUP.SOFT_RESET; break;
					case "HARD_RESET": target = this.HARD_RESET_GROUP.HARD_RESET; break;
					case "FORMAT_DEVICE": target = this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE; break;
					case "FORMAT_MS": target = this.FORMAT_MS_GROUP.FORMAT_MS; break;
					case "FORMAT_SD": target = this.FORMAT_SD_GROUP.FORMAT_SD; break;
					case "DELETE_BOOK": target = this.DELETE_BOOK_GROUP.DELETE_BOOK; debugger; break;
					case "DELETE_BOOK_ERR": target = this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR; debugger; break;
					case "DELETE_HISTORICAL_WORDS": target = this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS; debugger; break;
					case "DEVICE_SHUTDOWN": target = this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN; break;
					case "DISPLAY_CALIBRATION": target = this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION; break;
					case "NOTEPAD_FREEHAND": target = this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND; break;
					case "NOTEPAD_TEXT": target = this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT; break;
					case "DEMO_MODE": target = this.DEMO_MODE_GROUP.DEMO_MODE; break;
					case "HOME_PERSONAL": target = this.HOME_PERSONAL_GROUP.HOME_PERSONAL; break;
				}
				target.focus(true);
			}
			else if (this.COLD_BOOT_WIZARD_GROUP.isShown())
				this.COLD_BOOT_WIZARD_GROUP.focus(true);
			else if (this.CALIBRATION_GROUP.isShown())
				this.CALIBRATION_GROUP.focus(true);
			else if (this.FORMAT_GROUP.isShown())
				this.FORMAT_GROUP.focus(true);
			else if (this.SHUTDOWN_GROUP.isShown())
				this.SHUTDOWN_GROUP.focus(true);
			else if (this.DISK_GROUP.isShown())
				this.DISK_GROUP.focus(true);
			else if (this.DEVICE_SHUTDOWN_MODAL_GROUP.isShown())
				this.DEVICE_SHUTDOWN_MODAL_GROUP.focus(true);
			else if (this.LOW_BATTERY_GROUP.isShown())
				this.LOW_BATTERY_GROUP.focus(true);
			else if (this.INVALID_FORMAT_GROUP.isShown())
				this.INVALID_FORMAT_GROUP.focus(true);
			else if (this.GOTO_GROUP.isShown())
				this.GOTO_GROUP.focus(true);
			else if (this.HARD_RESET_GROUP.isShown())
				this.HARD_RESET_GROUP.HARD_RESET.focus(true);
			else{
				this.getModel().overlayModel.updateFocus(true);
			}
		</function>
		<function id="beforeModal" params="group">
			if (!this.modal) {
				trace("beforeModal: STATE=" + this.getVariable("STATE") + "\n");
				this.focus(true);
				this.MENU_DETAILS_GROUP.MENU.enable(false);
				this.MENU_HOME_GROUP.MENU_HOME.enable(false);
				this.PAGE_GROUP.PAGE.enable(false);
				this.SONG_GROUP.SONG.enable(false);
				this.PICTURE_GROUP.PICTURE.enable(false);
				this.DEMO_PICTURE_GROUP.DEMO_PICTURE.enable(false);
				this.SETTING_GROUP.SETTING.enable(false);
				this.INFO_GROUP.INFO.enable(false);
				this.ABOUT_GROUP.ABOUT.enable(false);
				this.AUTORUN_GROUP.AUTORUN.enable(false);
				this.SOFT_RESET_GROUP.SOFT_RESET.enable(false);
				this.HARD_RESET_GROUP.HARD_RESET.enable(false);
				this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE.enable(false);
				this.FORMAT_MS_GROUP.FORMAT_MS.enable(false);
				this.FORMAT_SD_GROUP.FORMAT_SD.enable(false);
				this.DELETE_BOOK_GROUP.DELETE_BOOK.enable(false);
				this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR.enable(false);
				this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS.enable(false);
				this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN.enable(false);
				this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.enable(false);
				this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND.enable(false);
				this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT.enable(false);
				this.DEMO_MODE_GROUP.enable(false);
				this.HOME_PERSONAL_GROUP.HOME_PERSONAL.enable(false);
			}
			this.modal++;
			trace("beforeModal: this.modal=" + this.modal + "\n");
			if(group){
				group.show(true);
				group.focus(true);
				if ("onModal" in group)
					group.onModal()
			}
		</function>
		<function id="clearModal" params="">
			var target=null;
			if (this.modal>0) {
				trace("CLEARMODAL called\n");
				// Determine which, if any, modal UI group is currently shown.
				// Clear modal when it is GOTO_GROUP only!
				if (this.GOTO_GROUP.isShown()) {
					target=this.GOTO_GROUP;
					target.show(false);
					this.modal--;
					if (!this.modal) {
						this.MENU_DETAILS_GROUP.MENU.enable(true);
						this.MENU_HOME_GROUP.MENU_HOME.enable(true);
						this.PAGE_GROUP.PAGE.enable(true);
						this.SONG_GROUP.SONG.enable(true);
						this.PICTURE_GROUP.PICTURE.enable(true);
						this.DEMO_PICTURE_GROUP.DEMO_PICTURE.enable(true);
						this.SETTING_GROUP.SETTING.enable(true);
						this.INFO_GROUP.INFO.enable(true);
						this.ABOUT_GROUP.ABOUT.enable(true);
						this.AUTORUN_GROUP.AUTORUN.enable(true);
						this.SOFT_RESET_GROUP.SOFT_RESET.enable(true);
						this.HARD_RESET_GROUP.HARD_RESET.enable(true);
						this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE.enable(true);
						this.FORMAT_MS_GROUP.FORMAT_MS.enable(true);
						this.FORMAT_SD_GROUP.FORMAT_SD.enable(true);
						this.DELETE_BOOK_GROUP.DELETE_BOOK.enable(true);
						this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR.enable(true);
						this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS.enable(true);
						this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN.enable(true);
						this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.enable(true);
						this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND.enable(true);
						this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT.enable(true);
						this.DEMO_MODE_GROUP.enable(true);
						this.HOME_PERSONAL_GROUP.HOME_PERSONAL.enable(true);

						switch (this.getVariable("STATE")) {
						case "MENU": target = this.MENU_DETAILS_GROUP.MENU; break;
						case "MENU_HOME": target = this.MENU_HOME_GROUP.MENU_HOME; break;
						case "PAGE": target = this.PAGE_GROUP.PAGE; break;
						case "SONG": target = this.SONG_GROUP.SONG; break;
						case "PICTURE": target = this.PICTURE_GROUP.PICTURE; break;
						case "DEMO_PICTURE": target = this.DEMO_PICTURE_GROUP.DEMO_PICTURE; break;
						case "SETTING": target = this.SETTING_GROUP.SETTING; break;
						case "INFO": target = this.INFO_GROUP.INFO; break;
						case "ABOUT": target = this.ABOUT_GROUP.ABOUT; break;
						case "AUTORUN": target = this.AUTORUN_GROUP.AUTORUN; break;
						case "SOFT_RESET": target = this.SOFT_RESET_GROUP.SOFT_RESET; break;
						case "HARD_RESET": target = this.HARD_RESET_GROUP.HARD_RESET; break;
						case "FORMAT_DEVICE": target = this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE; break;
						case "FORMAT_MS": target = this.FORMAT_MS_GROUP.FORMAT_MS; break;
						case "FORMAT_SD": target = this.FORMAT_SD_GROUP.FORMAT_SD; break;
						case "DELETE_BOOK": target = this.DELETE_BOOK_GROUP.DELETE_BOOK; break;
						case "DELETE_BOOK_ERR": target = this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR; break;
						case "DELETE_HISTORICAL_WORDS": target = this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS; break;
						case "DEVICE_SHUTDOWN": target = this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN; break;
						case "DISPLAY_CALIBRATION": target = this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION; break;
						case "NOTEPAD_FREEHAND": target = this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND; break;
						case "NOTEPAD_TEXT": target = this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT; break;
						case "DEMO_MODE": target = this.DEMO_MODE_GROUP; break;
						case "HOME_PERSONAL": target = this.HOME_PERSONAL_GROUP.HOME_PERSONAL; break;
						}
					} else {
						target=null
					}
				}
				if (target)
					target.focus(true);
				else if (this.COLD_BOOT_WIZARD_GROUP.isShown())
					this.COLD_BOOT_WIZARD_GROUP.focus(true);
				else if (this.CALIBRATION_GROUP.isShown())
					this.CALIBRATION_GROUP.focus(true);
				else if (this.FORMAT_GROUP.isShown())
					this.FORMAT_GROUP.focus(true);
				else if (this.SHUTDOWN_GROUP.isShown())
					this.SHUTDOWN_GROUP.focus(true);
				else if (this.DISK_GROUP.isShown())
					this.DISK_GROUP.focus(true);
				else if (this.DEVICE_SHUTDOWN_MODAL_GROUP.isShown())
					this.DEVICE_SHUTDOWN_MODAL_GROUP.focus(true);
				else if (this.LOW_BATTERY_GROUP.isShown())
					this.LOW_BATTERY_GROUP.focus(true);
				else if (this.INVALID_FORMAT_GROUP.isShown())
					this.INVALID_FORMAT_GROUP.focus(true);
				else if (this.GOTO_GROUP.isShown())
					this.GOTO_GROUP.focus(true);
				else if (this.HARD_RESET_GROUP.isShown())
					this.HARD_RESET_GROUP.HARD_RESET.focus(true);
				else{
					this.getModel().overlayModel.updateFocus(true);
				}
			}
		</function>
		<function id="beginFullScreen">
			this.STATUS_GROUP.show(false);
		</function>
		<function id="construct">
			this.modal = 0;
			this.overlay = null;
			this.state = undefined;
			this.control = undefined;
			this.volumeBlink = undefined;
		</function>
		<function id="doQuit">
			this.timer = new Timer;
			this.timer.onCallback  = this.doQuitCallback;
			this.timer.device  = this.getDevice();
			this.timer.window  = this.container.getWindow();
			this.timer.schedule(2000);
			this.timer.device.doProcessing(100);
			this.bubble("setKeyHandlerActive", false);
		</function>
		<function id="doQuitCallback">
			this.window.doQuit();
		</function>
		<function id="doResume">
			this.getDevice().doneResume();
			this.getModel().resume();
			if (this.modal) {
				if (this.CALIBRATION_GROUP.isShown())
					this.CALIBRATION_GROUP.focus(true);
				else if (this.FORMAT_GROUP.isShown())
					this.FORMAT_GROUP.focus(true);
				else if (this.SHUTDOWN_GROUP.isShown())
					this.SHUTDOWN_GROUP.focus(true);
				else if (this.DISK_GROUP.isShown())
					this.DISK_GROUP.focus(true);
				else if (this.DEVICE_SHUTDOWN_MODAL_GROUP.isShown())
					this.DEVICE_SHUTDOWN_MODAL_GROUP.focus(true);
				else if (this.LOW_BATTERY_GROUP.isShown())
					this.LOW_BATTERY_GROUP.focus(true);
				else if (this.INVALID_FORMAT_GROUP.isShown())
					this.INVALID_FORMAT_GROUP.focus(true);
				else if (this.GOTO_GROUP.isShown())
					this.GOTO_GROUP.focus(true);
				else if (this.HARD_RESET_GROUP.isShown())
					this.HARD_RESET_GROUP.HARD_RESET.focus(true);
			}
		</function>
		<function id="doSuspend">
			this.getModel().suspend();
			this.getDevice().doneSuspend();
		</function>
		<function id="endFullScreen">
			this.STATUS_GROUP.show(true);
		</function>
		<function id="modelChanged"><![CDATA[
			arguments.callee.grammar.call(this);
			var state = this.getVariable("STATE");
			var target;
			if (this.state != state) {
				this.focus(true)
				this.MENU_DETAILS_GROUP.show(false)
				this.MENU_HOME_GROUP.show(false)
				this.PAGE_GROUP.show(false)
				this.SONG_GROUP.show(false)
				this.PICTURE_GROUP.show(false)
				if(this.DEMO_PICTURE_GROUP.isShown())
					this.endFullScreen()
				this.DEMO_PICTURE_GROUP.show(false)
				this.SETTING_GROUP.show(false)
				this.INFO_GROUP.show(false)
				this.ABOUT_GROUP.show(false)
				this.AUTORUN_GROUP.show(false)
				this.SOFT_RESET_GROUP.show(false)
				this.HARD_RESET_GROUP.show(false)
				this.FORMAT_DEVICE_GROUP.show(false)
				this.FORMAT_MS_GROUP.show(false)
				this.FORMAT_SD_GROUP.show(false)
				this.DELETE_BOOK_GROUP.show(false)
				this.DELETE_BOOK_GROUP_ERR.show(false)
				this.DELETE_HISTORICAL_WORDS_GROUP.show(false)
				this.DEVICE_SHUTDOWN_GROUP.show(false)
				this.DISPLAY_CALIBRATION_GROUP.show(false)
				this.NOTEPAD_FREEHAND_GROUP.show(false)
				this.NOTEPAD_TEXT_GROUP.show(false)
				if ((state=="DEMO_PICTURE") && (this.DEMO_MODE_GROUP.isShown()))
					this.DEMO_MODE_GROUP.doDemoClose()
				this.DEMO_MODE_GROUP.show(false)
				this.HOME_PERSONAL_GROUP.show(false)
				switch(state) {
				case "MENU":
					this.MENU_DETAILS_GROUP.show(true)
					this.MENU_DETAILS_GROUP.MENU.setViewStyle(this.getVariable("VIEW_STYLE"))
					target = this.MENU_DETAILS_GROUP.MENU
					break
				case "MENU_HOME":
					this.MENU_HOME_GROUP.show(true)
					target = this.MENU_HOME_GROUP.MENU_HOME
					break
				case "PAGE":
					this.PAGE_GROUP.show(true)
					target = this.PAGE_GROUP.PAGE
					break
				case "SONG":
					this.SONG_GROUP.show(true)
					target = this.SONG_GROUP.SONG
					break
				case "PICTURE":
					this.PICTURE_GROUP.show(true)
					target = this.PICTURE_GROUP.PICTURE
					break
				case "DEMO_PICTURE":
					this.beginFullScreen()
					//for GOTO_GROUP modal
					this.clearModal()
					//for CALIBRATION_GROUP modal
					if(this.CALIBRATION_GROUP.isShown())
						this.bubble("doCancelCalibration")
					this.DEMO_PICTURE_GROUP.show(true)
					target = this.DEMO_PICTURE_GROUP.DEMO_PICTURE
					break
				case "SETTING":
					this.SETTING_GROUP.show(true)
					target = this.SETTING_GROUP.SETTING
					break
				case "INFO":
					this.INFO_GROUP.show(true)
					target = this.INFO_GROUP.INFO
					break
				case "ABOUT":
					this.ABOUT_GROUP.ABOUT.pageChanged(); // to convert String ID
					this.ABOUT_GROUP.show(true)
					target = this.ABOUT_GROUP.ABOUT
					break
				case "AUTORUN":
					this.AUTORUN_GROUP.show(true)
					target = this.AUTORUN_GROUP.AUTORUN;
					break
				case "SOFT_RESET":
					this.SOFT_RESET_GROUP.show(true)
					target = this.SOFT_RESET_GROUP.SOFT_RESET
					break
				case "HARD_RESET":
					this.HARD_RESET_GROUP.show(true)
					target = this.HARD_RESET_GROUP.HARD_RESET
					break
				case "FORMAT_DEVICE":
					this.FORMAT_DEVICE_GROUP.show(true)
					target = this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE
					break
				case "FORMAT_MS":
					this.FORMAT_MS_GROUP.show(true)
					target = this.FORMAT_MS_GROUP.FORMAT_MS
					break
				case "FORMAT_SD":
					this.FORMAT_SD_GROUP.show(true)
					target = this.FORMAT_SD_GROUP.FORMAT_SD
					break
				case "DEVICE_SHUTDOWN":
					this.DEVICE_SHUTDOWN_GROUP.show(true)
					target = this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN
					break
				case "DISPLAY_CALIBRATION":
					this.DISPLAY_CALIBRATION_GROUP.show(true)
					target = this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION
					break
				case "NOTEPAD_FREEHAND":
					this.NOTEPAD_FREEHAND_GROUP.show(true)
					target = this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND
					break
				case "NOTEPAD_TEXT":
					this.NOTEPAD_TEXT_GROUP.show(true)
					target = this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT
					break
				case "DELETE_BOOK":
					this.DELETE_BOOK_GROUP.show(true)
					target = this.DELETE_BOOK_GROUP.DELETE_BOOK
					break
				case "DELETE_BOOK_ERR":
					this.DELETE_BOOK_GROUP_ERR.show(true)
					target = this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR
					break
				case "DELETE_HISTORICAL_WORDS":
					this.DELETE_HISTORICAL_WORDS_GROUP.show(true)
					target = this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS
					break
				case "DEMO_MODE":
					this.DEMO_MODE_GROUP.show(true)
					target = this.DEMO_MODE_GROUP
					break
				case "HOME_PERSONAL":
					this.HOME_PERSONAL_GROUP.show(true)
					this.variableChanged("HOME_PERSONAL_LEFT");
					target = this.HOME_PERSONAL_GROUP.HOME_PERSONAL
					break
				}
				this.state = state;
				this.volumeVisibilityChanged();
				if (target.isEnabled())
					target.focus(true)
			}
		]]></function>
		<function id="variableChanged" params="id, value"><![CDATA[
			arguments.callee.grammar.call(this, id, value);
			if (id == "DISK") {
				if (value) {
					this.beforeModal(this.DISK_GROUP);
					this.DISK_GROUP.WAIT.startAnimation("WAIT");
				}
				else {
					this.DISK_GROUP.WAIT.stopAnimation("WAIT");
					this.afterModal(this.DISK_GROUP);
				}
			}
			else if (id == "FORMAT") {
				if (value) {
					this.PAGE_GROUP.PAGE.freeze()
					this.beforeModal(this.FORMAT_GROUP);
				}
				else {
					this.PAGE_GROUP.PAGE.unfreeze()
					this.afterModal(this.FORMAT_GROUP);
				}
			}
			else if (id == "FORMAT_PERCENT") {
				var sprite = this.FORMAT_GROUP.FORMAT;
				var u = sprite.u + 1;
				if (u > 3)
					u = 0;
				sprite.u = u;
			}
			else if (id == "PROGRESS") {
				if (value) {
					if (!this.PROGRESS_GROUP.isShown()) {
						trace("PROGRESS variable was changed (true)\n");
						this.PAGE_GROUP.PAGE.freeze()
						this.beforeModal(this.PROGRESS_GROUP);
					}
				}
				else {
					if (this.PROGRESS_GROUP.isShown()) {
						trace("PROGRESS variable was changed (false)\n");
						this.afterModal(this.PROGRESS_GROUP);
						this.PAGE_GROUP.PAGE.unfreeze()
					}
				}
			}
			else if (id == "PROGRESS_PERCENT") {
				trace("PROGRES_PERCENT was changed\n");
				var sprite = this.PROGRESS_GROUP.PROGRESS;
				var u = sprite.u + 1;
				if (u > 3)
					u = 0;
				sprite.u = u;
			}
			else if (id == "VOLUME_BLINK") {
				if (this.volumeBlink != value) {
					this.volumeBlink = value;
					this.volumeVisibilityChanged();
				}
			}
			else if (id == "BATTERY") {
				var power = this.getVariable("POWER");
				if (!power) {
					if (value == 0) {
						this.beforeModal(this.SHUTDOWN_GROUP);
						this.doQuit();
					}
					else if ((!this.batteryWarning) && (value <= 20)) {
						this.batteryWarning = true;
						this.setVariable("LOW_BATTERY", 1);
					}
				}
			}
			else if (id == "POWER") {
				if (value) {
					var lowBattery = this.getVariable("LOW_BATTERY");
					if (lowBattery)
						this.setVariable("LOW_BATTERY", 0);
					this.batteryWarning = false;
				}
			}
			else if (id == "LOW_BATTERY") {
				if (value) {
					this.beforeModal(this.LOW_BATTERY_GROUP);
				}
				else {
					this.afterModal(this.LOW_BATTERY_GROUP);
				}
			}
			else if (id == "INVALID_FORMAT") {
				if (value) {
					this.beforeModal(this.INVALID_FORMAT_GROUP);
				}
				else {
					this.afterModal(this.INVALID_FORMAT_GROUP);
				}
			}
			else if (id == "DEVICE_SHUTDOWN") {
				if (value == 1) {
					// Internal memory
					this.beforeModal(this.SHUTDOWN_GROUP);
					this.doQuit();
				}
				else if (value == 2) {
					// External memory
					this.beforeModal(this.SHUTDOWN_EXTERNAL_GROUP);
					this.doQuit();
				}
			}
			else if (id == "DEVICE_SHUTDOWN_MODAL") {
				if (value) {
					this.beforeModal(this.DEVICE_SHUTDOWN_MODAL_GROUP);
				}
				else {
					this.afterModal(this.DEVICE_SHUTDOWN_MODAL_GROUP);
				}
			}
			else if (id == "DEVICE_RESTART") {
				if (value) {
					this.beforeModal(this.SHUTDOWN_GROUP);
				}
			}
			else if (id == "OVERLAY") {
				if (!value) {
						this.afterModal(null);
						this.getModel().fullScreenUpdate()
				}
				else {
					this.beforeModal(null);
				}
			}
			else if (id == "CALIBRATION") {
				if (value) {
					this.beforeModal(this.CALIBRATION_GROUP);
					var window = this.container.getWindow()
					var size = window.getSize()
					if (size.x < size.y)
						this.CALIBRATION_GROUP.CALIBRATION_V.show(true)
					else
						this.CALIBRATION_GROUP.CALIBRATION_H.show(true)
				}
				else {
					this.afterModal(this.CALIBRATION_GROUP);
				}
			}
			else if (id == "CALIBRATION_STEP") {
				this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.START.show(false)
				this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.END.show(false)
				this.CALIBRATION_GROUP.START.show(false)
				this.CALIBRATION_GROUP.FAIL.show(false)
				this.CALIBRATION_GROUP.START_COLD.show(false)
				this.CALIBRATION_GROUP.FAIL_COLD.show(false)
				switch (value) {
					case "START":
						this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.START.show(true)
					case "NEXT":
						if(this.getVariable("IS_COLDBOOT")== false) {
							this.CALIBRATION_GROUP.START.show(true)
						} else {
							this.CALIBRATION_GROUP.START_COLD.show(true)
						}
						break
					case "FAIL":
						if(this.getVariable("IS_COLDBOOT")== false) {
							this.CALIBRATION_GROUP.FAIL.show(true)
						} else {
							this.CALIBRATION_GROUP.FAIL_COLD.show(true)
						}
						break
					case "END":
						this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.END.show(true)
						break
				}
			}
			else if (id == "DEMO_MODE_DIALOG") {
				if (value)
					this.beforeModal(this.DEMO_MODE_GROUP);
				else
					this.afterModal(this.DEMO_MODE_GROUP);
			}
			else if (id == "DEMO_MODE_MESSAGE") {
				//for title
				this.DEMO_MODE_GROUP.DEMO_MODE.SETTING.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE.FORMAT_SETTING.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE.FEATURE.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE[value].show(true)
				//for body message
				this.DEMO_MODE_GROUP.DEMO_MODE.TEXT.SETTING.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE.TEXT.FORMAT_SETTING.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE.TEXT.FEATURE.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE.TEXT[value].show(true)
				if( value == "FEATURE" ){
					this.DEMO_MODE_GROUP.DEMO_MODE.DEMO_BACK.show(false)
				}else{
					this.DEMO_MODE_GROUP.DEMO_MODE.DEMO_BACK.show(true)
				}
			}
			else if (id == "VIEW_STYLE") {
				this.MENU_DETAILS_GROUP.MENU.setViewStyle(value)
			}
			else if (id == "GESTURE_CANCEL") {
				if (value)
					this.GESTURE.cancel()
			}
			else if (id == "COLD_BOOT_WIZARD") {
				if (value) {
					this.beforeModal(this.COLD_BOOT_WIZARD_GROUP);
				}
				else {
					this.afterModal(this.COLD_BOOT_WIZARD_GROUP);
				}
			}
			else if (id == "HOME_PERSONAL_LEFT") {
				var left = kbook.model.container.getVariable("HOME_PERSONAL_LEFT")
				var right = kbook.model.container.getVariable("HOME_PERSONAL_RIGHT")
				var left_name;
				var right_name;

				switch (left) {
				case kbook.model.HOME_PERSONAL_MUSIC:
					left_name = "fskin:/l/strings/STR_NODE_TITLE_AUDIO".idToString();
					left = 0;
					break;
				case kbook.model.HOME_PERSONAL_PICTURES:
					left_name = "fskin:/l/strings/STR_NODE_TITLE_PICTURE".idToString();
					left = 1;
					break;
				case kbook.model.HOME_PERSONAL_FREEHAND:
					left_name = "fskin:/l/strings/STR_NODE_TITLE_NOTEPAD_FREEHAND".idToString();
					left = 3;
					break;
				case kbook.model.HOME_PERSONAL_NOTEPAD:
					left_name = "fskin:/l/strings/STR_NODE_TITLE_NOTEPAD_TEXT".idToString();
					left = 4;
					break;
				case kbook.model.HOME_PERSONAL_SETTINGS:
					left_name = "fskin:/l/strings/STR_NODE_TITLE_SETTINGS".idToString();
					left = 2;
					break;
				default:
					left_name = "fskin:/l/strings/STR_NODE_TITLE_AUDIO".idToString();
					left = 0;
				}

				switch (right) {
				case kbook.model.HOME_PERSONAL_MUSIC:
					right_name = "fskin:/l/strings/STR_NODE_TITLE_AUDIO".idToString();
					right = 0;
					break;
				case kbook.model.HOME_PERSONAL_PICTURES:
					right_name = "fskin:/l/strings/STR_NODE_TITLE_PICTURE".idToString();
					right = 1;
					break;
				case kbook.model.HOME_PERSONAL_FREEHAND:
					right_name = "fskin:/l/strings/STR_NODE_TITLE_NOTEPAD_FREEHAND".idToString();
					right = 3;
					break;
				case kbook.model.HOME_PERSONAL_NOTEPAD:
					right_name = "fskin:/l/strings/STR_NODE_TITLE_NOTEPAD_TEXT".idToString();
					right = 4;
					break;
				case kbook.model.HOME_PERSONAL_SETTINGS:
					right_name = "fskin:/l/strings/STR_NODE_TITLE_SETTINGS".idToString();
					right = 2;
					break;
				default:
					right_name = "fskin:/l/strings/STR_NODE_TITLE_AUDIO".idToString();
					right = 0;
				}

				this.HOME_PERSONAL_GROUP.PANEL.setVariable("LEFT_ITEM", left);
				this.HOME_PERSONAL_GROUP.PANEL.setVariable("RIGHT_ITEM", right);
				this.HOME_PERSONAL_GROUP.PANEL.setVariable("LEFT_ITEM_NAME", left_name);
				this.HOME_PERSONAL_GROUP.PANEL.setVariable("RIGHT_ITEM_NAME", right_name);
			}

		]]></function>
		<function id="volumeVisibilityChanged">
			this.STATUS_GROUP.VOLUME_GROUP.show((this.state == "SONG") || (this.control == 1) || (this.volumeBlink == 1));
		</function>
		<function id="getString" params="id">
			return this.REGION.getString(id);
		</function>
		<function id="changeRegion" params="reg">
			this.REGION.setRegion(reg);
			return this.REGION
		</function>
		<function id="dispatchGesture" params="func, param1, param2, param3"><![CDATA[
			if (this.modal != 0)
				return false
			var target = null
			var state = this.getVariable("STATE")
			switch (state) {
				case "PAGE":
					target = this.PAGE_GROUP.PAGE
					break
				case "PICTURE":  
					target = this.PICTURE_GROUP.PICTURE
					break;
				case "NOTEPAD_FREEHAND":  
					target = this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND
					break;
				case "NOTEPAD_TEXT":  
					target = this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT
					break;
			}
			if (target && func in target)
				return target[func](param1, param2, param3)
			return false
		]]></function>
		<function id="canLine">
			return this.dispatchGesture("canLine")
		</function>
		<function id="doLine" params="direction, down, up">
			return this.dispatchGesture("doLine", direction, down, up)
		</function>
		<function id="canLineAndHold">
			return this.dispatchGesture("canLineAndHold")
		</function>
		<function id="doLineAndHoldStart" params="direction, down, up">
			return this.dispatchGesture("doLineAndHoldStart", direction, down, up)
		</function>
		<function id="doLineAndHoldEnd" params="direction, down, up">
			return this.dispatchGesture("doLineAndHoldEnd", direction, down, up)
		</function>
	</code>
	<clock/>

	<localize path="./" kind="language"/>
	<localize path="./" kind="region"/>

	<kbookLang id="REGION" region="US"/>
	<group id="ABOUT_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookAbout id="ABOUT" left="0" right="0" top="0" bottom="33">
			<records>
				<record><number name="kind" value="0"/><string name="text" value="&#169;2006-2009 Sony Corporation"/></record>
				<record><number name="kind" value="1"/><string name="text" value="Adobe, the Adobe logo, Reader and PDF are either registered trademarks or trademarks of Adobe Systems Incorporated in the United States and/or other countries."/></record>
				<record><number name="kind" value="2"/><string name="text" value="MPEG Layer-3 audio coding technology and patents licensed by Fraunhofer IIS and Thomson. MPEG-4 AAC audio coding technology licensed by Fraunhofer IIS (www.iis.fraunhofer.de/amm/)."/></record>
				<record><number name="kind" value="3"/><string name="text" value="Portions of application software designed and implemented by Kinoma (www.kinoma.com). Portions Copyright &#169;2006,2007 Kinoma, Inc."/></record>
				<record><number name="kind" value="-1"/><string name="text" value="Bitstream is a registered trademark, and Dutch, Font Fusion, and Swiss are trademarks, of Bitstream, Inc."/></record>
				<record><number name="kind" value="-1"/><string name="text" value="Portions of this software are Copyright &#169;2005 The FreeType Project (www.freetype.org). All rights reserved."/></record>
				<record><number name="kind" value="-1"/><string name="text" value="This software is based in part on the work of the Independent JPEG Group."/></record>
				<record><number name="kind" value="-1"/><string name="text" value="The New Oxford American Dictionary, Second Edition &#169;2006 Oxford University Press, Inc.&#13;Oxford Dictionary of English, Revised Edition &#169;2005 Oxford University Press, Inc."/></record>
				<record><number name="kind" value="-1"/><string name="text" value="This product includes Iwata Mincho Font designed by IWATA Corporation."/></record>
			</records>
			<code>
				<function id="getKind">
					return 25;
				</function>
				<function id="getTitle">
					return "fskin:/l/strings/STR_NODE_TITLE_ABOUT".idToString();
				</function>
				<function id="getValue" params="record, field"><![CDATA[
					var result = arguments.callee.grammar.call(this, record, field);
					if ((record.kind == 0) && (field == "text")) {
						if(!this.getVariable("DEMO_MODE")){
							var text = "fskin:/l/strings/STR_UI_PARTS_VERSION".idToString() + this.getVariable("FIRMWARE_VERSION") + "\n"
						}else{
						// Demo Mode add string
							var text = "fskin:/l/strings/STR_UI_PARTS_VERSION".idToString() + this.getVariable("FIRMWARE_VERSION") + "fskin:/l/strings/STR_UI_MESSAGE_DEMOMODE".idToString() + "\n"
						}

						//text += "Device: " + this.getVariable("DEVICE_ID") + "\n";
						text += "fskin:/l/strings/STR_UI_PARTS_DEVICE".idToString() + this.getVariable("DEVICE_ID") + "\n";

						if (this.getVariable("STORE_STATUS"))
							//text += "Authorized for the eBook Store.\n"
							text += "fskin:/l/strings/STR_UI_MESSAGE_SONYAUTHORIZEDYES".idToString() + "\n";
						result = text + result;
					}
					else if ((record.kind == 1) && (field == "text")) {
						//var text = "\nThis device is not authorized for Adobe DRM protected content.";
						//if (this.getVariable("ADOBE_STATUS"))
						//	text = "\nThis device is authorized for Adobe DRM protected content.";
						//result = result + text;
						var text = "\n" + "fskin:/l/strings/STR_UI_MESSAGE_ADOBEAUTHORIZEDNO".idToString()
						if (this.getVariable("ADOBE_STATUS"))
							text = "\n" + "fskin:/l/strings/STR_UI_MESSAGE_ADOBEAUTHORIZEDYES".idToString()
						result = result + text;
					}
					return result;
				]]></function>
				<function id="pageChanged">
					var c = this.countPages();
					var i = this.getPage() + 1;
					if (!c) c++;
					this.setVariable("ABOUT_INDEX_COUNT", i + "fskin:/l/strings/STR_UI_PARTS_OF".idToString() + c);
				</function>
			</code>
		</kbookAbout>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="210" right="210" height="30" bottom="0" align="center" variable="ABOUT_INDEX_COUNT" active="true"/>

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>
	
	<group id="INFO_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<!--kbookInfo id="INFO" left="0" right="0" top="0" bottom="33" split="200" href="x-id://infoData"-->
		<kbookInfo id="INFO" left="0" right="0" top="0" bottom="33" split="230" href="x-id://infoData">
			<code>
				<function id="pageChanged">
					if (this.isShown()) {
						var c = this.countPages();
						var i = this.getPage() + 1;
						if (!c) c++;
						//this.setVariable("INFO_INDEX_COUNT", i + " of " + c);
						this.setVariable("INFO_INDEX_COUNT", i + "fskin:/l/strings/STR_UI_PARTS_OF".idToString() + c);
					}
				</function>
			</code>
		</kbookInfo>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" can="canMenuClose" do="doMenuClose"/-->
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="210" right="210" height="30" bottom="0" align="center" variable="INFO_INDEX_COUNT" active="true"/>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>
	
	<group id="MENU_DETAILS_GROUP" left="0" right="0" top="0" bottom="0">
		<kbookMenuDetails id="MENU" left="0" right="0" top="0" bottom="30" bufferZone="20" href="x-id://menuData">
			<code>
				<function id="pageChanged">
					if (this.isShown()) {
						var c = this.countPages();
						var i = this.getPage() + 1;
						if (!c) c++;
						//this.setVariable("MENU_INDEX_COUNT", i + " of " + c);
						this.setVariable("MENU_INDEX_COUNT", i + "fskin:/l/strings/STR_UI_PARTS_OF".idToString() + c);
					}
				</function>
			</code>
			<views>
				<viewStyleDetails name="details" left="0" right="0" top="0" bottom="0" default="true" />
				<viewStyleThumbnail name="thumbnail" left="0" right="0" top="0" bottom="0" default="false" />
			</views>
		</kbookMenuDetails>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" can="canMenuClose" do="doMenuClose"/-->
		<kbookNavbar menu="MENU" right="0" width="44" top="70" bottom="30" />
		<kbookStatus skin="kbookMenuStatus" left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="210" right="210" height="30" bottom="0" align="center" variable="MENU_INDEX_COUNT" active="true"/>

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" can="canBack" do="doMenuClose"/>
	</group>
	
	<group id="MENU_HOME_GROUP" left="0" right="0" top="0" bottom="0">
		<kbookMenuHome id="MENU_HOME" left="0" right="0" top="0" bottom="30" href="x-id://menuData">
			<code>
				<function id="pageChanged">
					if (this.isShown()) {
						var c = this.countPages();
						var i = this.getPage() + 1;
						if (!c) c++;
						//this.setVariable("MENU_INDEX_COUNT", i + " of " + c);
						this.setVariable("MENU_INDEX_COUNT", i + "fskin:/l/strings/STR_UI_PARTS_OF".idToString() + c);
					}
				</function>
			</code>
		</kbookMenuHome>
		<kbookStatus skin="kbookMenuStatus" left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="210" right="210" height="30" bottom="0" align="center" variable="MENU_INDEX_COUNT" active="true"/>
	</group>
	
	<group id="HOME_PERSONAL_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookMenuDetails id="HOME_PERSONAL" left="0" right="0" top="0" bottom="33" bufferZone="20" href="x-id://selectorData">
		</kbookMenuDetails>

		<group id="PANEL" left="0" right="0" top="0" bottom="33">
			<model>
				<variable id="LEFT_ITEM"/>
				<variable id="RIGHT_ITEM"/>
				<variable id="LEFT_ITEM_NAME"/>
				<variable id="RIGHT_ITEM_NAME"/>
			</model>
			<code>
				<function id="onOK">
					kbook.model.onApplyHomePersonalization();
				</function>
			</code>
			<playingPanel id="PANEL_V" skin="panel_plain" height="330" left="0" right="0" bottom="0" playing="V">
				<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" top="10" width="142" height="42" do="onOK"/>
				<group height="140" width="600" top="70">
					<group left="0" height="140" width="200">
						<kbookIndicator skin="homeIconsSmall" top="0" variable="LEFT_ITEM"/>
						<kbookText skin="settingText" active="false" bottom="0" height="40" left="0" right="0" variable="LEFT_ITEM_NAME"/>
					</group>
					<group left="200" height="140" width="200">
						<kbookIndicator skin="homeIconsSmall" top="0" variable="RIGHT_ITEM"/>
						<kbookText skin="settingText" active="false" bottom="0" height="40" left="0" right="0" variable="RIGHT_ITEM_NAME"/>
					</group>
					<group left="400" height="140" width="200">
						<kbookIndicator skin="homeIconsSmall" top="0" value="6"/> // more icon
						<kbookText skin="settingText_gray" active="false" bottom="0" height="40" left="0" right="0" value="fskin:/l/strings/STR_NODE_TITLE_MORE"/>
					</group>
				</group>
			</playingPanel>
			<playingPanel id="PANEL_H" skin="panel_plain" height="230" left="0" right="0" bottom="0" playing="H">
				<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" top="10" width="142" height="42" do="onOK"/>
				<group height="140" width="600" top="70">
					<group left="0" height="140" width="200">
						<kbookIndicator skin="homeIconsSmall" top="0" variable="LEFT_ITEM"/>
						<kbookText skin="settingText" active="false" bottom="0" height="40" left="0" right="0" variable="LEFT_ITEM_NAME"/>
					</group>
					<group left="200" height="140" width="200">
						<kbookIndicator skin="homeIconsSmall" top="0" variable="RIGHT_ITEM"/>
						<kbookText skin="settingText" active="false" bottom="0" height="40" left="0" right="0" variable="RIGHT_ITEM_NAME"/>
					</group>
					<group left="400" height="140" width="200">
						<kbookIndicator skin="homeIconsSmall" top="0" value="6"/> // more icon
						<kbookText skin="settingText_gray" active="false" bottom="0" height="40" left="0" right="0" value="fskin:/l/strings/STR_NODE_TITLE_MORE"/>
					</group>
				</group>
			</playingPanel>
		</group>

		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="210" right="210" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_SINGLEPAGE" active="true"/>

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<kbookPanel id="PAGE_GROUP" toolbar="OPTION_OVERLAY_PAGE_TOOLBAR" offset="60" main="PAGE" left="0" right="0" top="0" bottom="0" visible="false">
		<keys>
			<key code="8" can="canGotoParent" do="doGotoParent"/>
		</keys>
		<code>
			<function id="doDigit" params="part"><![CDATA[
				var c = this.PAGE.countPages().toString().length - 1;
				var s = "";
				for (var i = 0; i < c; i++)
					s += "_";
				s += part.key.charAt(0);
				this.setVariable("GOTO_VARIABLE", s);
				var container = this.container;
				container.beforeModal(container.GOTO_GROUP);
			]]></function>
		</code>
		<kbookOverlay id="OPTION_OVERLAY_PAGE_TOOLBAR" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://pageOptionToolbarOverlayModel">
			<code>
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				
				if (id == "SHOW") {
					this.show(value);
					this.enableToolbar(value);
					if(value)
						this.container.PAGE.focus(value);
					value ? this.getModel().opened(this): this.getModel().closed();
				}
			</function>
			<function id="enableToolbar" params="enableIt">
				this.TOOLBAR_GROUP.show(enableIt);
			</function>
			</code>

			<sprite skin="toolBar_back" skinType="horizontal" left="0" right="0" top="0" height="60" active="true"/>
			<group id="TOOLBAR_GROUP" left="0" right="0" top="0" height="60">
				<kbookCheck skin="tool_check_pen" variable="PEN_TYPE" on="PEN" off="NONE" top="8" left="8" width="80" height="42" do="doToolPen"/>
				<kbookCheck skin="tool_check_freehand" variable="PEN_TYPE" on="FREEHAND" off="NONE" top="8" left="96" width="80" height="42" do="doToolPen"/>
				<kbookCheck skin="tool_check_eraser" variable="PEN_TYPE" on="ERASER" off="NONE" top="8" left="184" width="80" height="42" do="doToolPen"/>
				<kbookButton id="MYNOTE" skin="toolBar_myNote" top="8" left="272" width="136" height="42" text="fskin:/l/strings/KBOOK_UI_MYNOTE" do="doMyNote"/>
				<kbookCheck skin="tool_bookmarkOnOff" variable="BOOKMARK" on="HAS_BOOKMARK" off="NO_BOOKMARK" top="8" right="66" width="80" height="42" can="canToolBookMark" do="doToolBookmarkOnOff"/>
				<button2 id="TOOLBARCLOSE" skin="toolBar_close" right="8" top="8" width="42" height="42" do="doCloseToolbar"/>
			</group>
		</kbookOverlay>
		<kbookPage id="PAGE" left="0" right="0" top="0" bottom="30" sourcePageWidth="584" sourcePageHeight="754" href="x-id://bookData">
			<tools variable="PEN_TYPE" pen="PEN" point="POINT" eraser="ERASER" freehand="FREEHAND" off="NONE"/>
			<controls>
				<control variable="SHOW_HIGHLIGHTS" do="doShowHighlights"/>
			</controls>
			<code>
				<function id="pageChanged">
					if (this.isShown()) {
						this.onPageChanged()
						this.container.PAGE_INFO.setVariable("BOOK_SIZE", this.getScale());
						this.container.PAGE_INFO.setVariable("BOOK_HALF_PAGE", this.getHalfPage());
						var c = this.countPages();
						var i = this.componentPages();
						if (!c) c++;
						this.container.PAGE_INFO.setVariable("BOOK_INDEX_COUNT", i + "fskin:/l/strings/STR_UI_PARTS_OF".idToString() + c);
						this.container.modelChanged();
					}
				</function>
				<function id="onStartFastTurnPage">
					this.container.MONOCHROME_PAGE.moveTo(this.getX(), this.getY())
					this.container.MONOCHROME_PAGE.sizeTo(this.getWidth(), this.getHeight())
					this.container.MONOCHROME_PAGE.show(true)
					this.container.MONOCHROME_LABEL.show(true)
					this.container.MONOCHROME_MODE.show(true)
				</function>
				<function id="onStopFastTurnPage">
					this.container.MONOCHROME_PAGE.show(false)
					this.container.MONOCHROME_LABEL.show(false)
					this.container.MONOCHROME_MODE.show(false)
				</function>
				<function id="getCurrentID">
					return this.container.MONOCHROME_MODE.getCurrentID()
				</function>
				<function id="getDrawnID">
					return this.container.MONOCHROME_MODE.getDrawnID()
				</function>
				<function id="onStartSelection">
					this.container.PARTIAL_MODE.show(true)
				</function>
				<function id="onStopSelection">
					this.container.PARTIAL_MODE.show(false)
				</function>
				<function id="onStartFreehand">
					this.container.PARTIAL_MODE.show(true)
				</function>
				<function id="onStopFreehand">
					this.container.PARTIAL_MODE.show(false)
				</function>
			</code>
		</kbookPage>
		<kbookStatus id="KBOOKSTATUS" skin="kbookPageStatus" left="0" right="0" height="30" bottom="0"/>
		<group id="PAGE_INFO" left="0" right="0" height="0" bottom="0">
			<code>
				<function id="doGoToJump">
					var content = this.getModel().container.findContent("OPTION_OVERLAY_PAGE_2");
					if ( content.isShown() ) {
						content.doCloseOptMenu();
					}
					this.bubble("doGoToJumpBar");
				</function>
			</code>
			<model>
				<variable id="BOOK_SIZE"/>
				<variable id="BOOK_HALF_PAGE"/>
				<variable id="BOOK_INDEX_COUNT"/>
			</model>
			<kbookIndicator skin="sizeIndicator" left="90" bottom="0" variable="BOOK_SIZE"/>
			<kbookIndicator skin="halfPageIndicator" left="120" height="30" bottom="0" variable="BOOK_HALF_PAGE"/>
			<kbookLabel left="150" right="150" height="30" bottom="0" align="center" variable="BOOK_INDEX_COUNT" do="doGoToJump" active="true"/>
		</group>
		<monochrome id="MONOCHROME_PAGE" left="0" right="0" top="0" bottom="30" visible="false"/>
		<monochrome id="MONOCHROME_LABEL" left="120" right="150" height="30" bottom="0" visible="false"/>
		<eInkPanel id="MONOCHROME_MODE" mode="sync" frame="true" left="0" right="0" top="0" bottom="0" visible="false"/>
		<eInkPanel id="PARTIAL_MODE" mode="partial" frame="true" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookPanel>
	
	<group id="GOTO_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doDigit" params="part"><![CDATA[
				var s = this.getVariable("GOTO_VARIABLE");
				if (s.charAt(0) == "_") {
					s = s.slice(1) + part.key.charAt(0);
				}
				else {
					var c = s.length - 1;
					var s = "";
					for (var i = 0; i < c; i++)
						s += "_";
					s += part.key.charAt(0);
				}
				this.setVariable("GOTO_VARIABLE", s);
			]]></function>
			<function id="doCenter">
				var s = this.getVariable("GOTO_VARIABLE");
				s = s.replace(/_/g, "");
				this.container.afterModal(this);
				this.container.PAGE_GROUP.PAGE.bubble("doGoto", s);
			</function>
			<function id="doLeft"><![CDATA[
				var s = this.getVariable("GOTO_VARIABLE");
				var c = s.length;
				s = "_" + s;
				s = s.slice(0, c);
				this.setVariable("GOTO_VARIABLE", s);
			]]></function>
			<function id="doMenu"><![CDATA[
				this.container.afterModal(this);
			]]></function>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doRoot">
				this.bubble("doBlink");
			</function>
		</code>
		<background skin="diskBackground" left="0" right="0" top="0" bottom="30"/>
		<group width="140" height="140">
			<sprite skin="diskSprite" u="127" left="0" right="0" top="0" bottom="0"  active="false"/>
			<!--kbookLabel skin="message" left="0" right="0" top="30" height="40" align="center" text="PAGE"/-->
			<kbookLabel skin="message" left="0" right="0" top="30" height="40" align="center" textresource="STR_UI_GOTOPAGE"/>

			<kbookLabel skin="message" left="-2" right="0" height="50" bottom="20" align="center" variable="GOTO_VARIABLE"/> <!-- temporary fix of #79 -->
		</group>
	</group>
	
	<group id="PICTURE_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookImage id="PICTURE" left="0" right="0" top="0" bottom="33" active="true" href="x-id://imageData">
			<code>
				<function id="doFirst">
					this.bubble("doGotoFirstPicture");
				</function>
				<function id="doLast">
					this.bubble("doGotoLastPicture");
				</function>
				<function id="doNext">
					this.bubble("doGotoNextPicture");
				</function>
				<function id="doPrevious">
					this.bubble("doGotoPreviousPicture");
				</function>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
		</kbookImage>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<!--kbookIndicator skin="sizeIndicator" left="90" bottom="0" variable="PICTURE_SIZE"/-->
		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" variable="PICTURE_INDEX_COUNT" active="true"/>
	</group>
	
	<group id="SETTING_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookSetting id="SETTING" left="0" right="0" top="0" bottom="30" href="x-id://settingData">
		</kbookSetting>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>

		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_SINGLEPAGE" active="true"/>

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" can="canBack" do="doMenuClose"/>
	</group>

	<group id="COLD_BOOT_WIZARD_GROUP" left="0" right="0" top="0" bottom="0" visible="false" href="x-id://coldBootWizardModel">
		<code>
			<function id="onModal">
				if(this.getVariable("IS_COLDBOOT")== false)
					this.bubble("DoNotShow");
				else
					this.bubble("nextPage")
			</function>

			<function id="onOK">
				this.bubble("nextPage")
			</function>

			<function id="hideall">
				var pageNum = 1
				var page
				while (page = this["PAGE" + pageNum]) {
					page.show(false)
					page.focus(false)
					pageNum++
				}
			</function>
			<function id="showPage" params="pageNum">
				this.hideall()
				var page = this["PAGE" + pageNum]
				page.show(true)
				page.focus(true)
			</function>
			<function id="doMenu">
				this.bubble("previousPage")
			</function>
		</code>
		<panel id="PAGE1" skin="kbookDeleteBook" left="0" right="0" top="0" bottom="0">
			<code>
				<function id="doCenter">
					this.bubble("onOK")
				</function>
			</code>
			<kbookLabel skin="title" left="0" right="0" top="0" height="70" align="center" textresource="STR_NODE_TITLE_WELCOME"/>
			<kbookText skin="welcomeText" active="false" left="20" right="20" top="140" height="700" variable="WELCOME_MSG" />

			<welcomeGroup id="MOUSE_TARGET" top="0" bottom="100" left="0" right="0" active="true" do="onOK"/>
		</panel>

		<group id="PAGE2" left="0" right="0" top="0" visible="false" bottom="0">
		</group>
		<group id="PAGE3" left="0" right="0" top="0" bottom="30" visible="false">
			<code>
				<function id="doCenter">
					this.bubble("onOK")
				</function>
			</code>
		    <kbookSetting id="PAGE3b" left="0" right="0" top="0" bottom="30" visible="true" href="x-id://coldBootWizardSettingData"/>

			<!-- Back button -->
			<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenu"/>
		</group>

		<group id="PAGE4" left="0" right="0" top="0" bottom="30" visible="false">
			<code>
				<function id="doCenter">
					this.bubble("onOK")
				</function>
			</code>
		    <kbookSetting id="PAGE4b" left="0" right="0" top="0" bottom="30" visible="true" href="x-id://coldBootWizardSettingData"/>

			<!-- Back button -->
			<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenu"/>
		</group>

		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_SINGLEPAGE"/>
	</group>
	
	<group id="SONG_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doTrack">
				var value = this.SLIDER.getValue()
				var document = this.getDocument();
				if (document.control) {
					this.setVariable("CONTROL_INVALID", 1)
					this.SONG.stop();
				}
				this.doAdjust(value)
			</function>
			<function id="doJump">
				var value = this.SLIDER.getValue()
				this.doAdjust(value)
				var document = this.getDocument();
				if (document.control) {
					if (this.getVariable("STANDBY_STATE"))
						this.SONG.start();
					this.setVariable("CONTROL_INVALID", 0)
				}
			</function>
			<function id="doAdjust" params="value"><![CDATA[
				var ratio = value
				var duration = this.SONG.getDuration()
				var oldTime = this.SONG.getTime()
				var newTime = duration * (ratio / 100)
				if (newTime < 0)
					newTime = 0;
				if (newTime != oldTime)
					this.SONG.setTime(newTime)
			]]></function>
			<function id="doControl"><![CDATA[
				var document = this.getDocument();
				if (this.SONG.isPlaying()) {
						this.SONG.stop();
						if (this.getVariable("STANDBY_STATE"))
							document.control = 0;
				}
				else {
					if (!this.getVariable("STANDBY_STATE")) {
							this.setVariable("CONTROL", 0)
							return
					}
					if (this.SONG.getDuration() <= this.SONG.getTime()) {
						if (!this.bubble("doGotoNextSong", true)) {
							this.bubble("doGotoFirstSong");
							this.SONG.stop();
							document.control = 0;
							this.setVariable("CONTROL", 0)
							return
						}
					}
					if (!this.getVariable("FIRST_SONG_STOP_FLAG")) {
						this.SONG.start();
						document.control = 1;
					} else {
						this.setVariable("FIRST_SONG_STOP_FLAG", false)
						document.control = 0;
					}
				}
				document.volumeVisibilityChanged();
			]]></function>
			<function id="sizeBy" params="dx, dy">
				arguments.callee.grammar.call(this, dx, dy)
				this.ART.sizeBy(dy, dy)
				if (dx > 0) {
					this.ART.moveBy(400, 50)
					this.H_INFO.show(true)
					this.V_INFO.show(false)
				}
				else {
					this.ART.moveBy(-400, -50)
					this.H_INFO.show(false)
					this.V_INFO.show(true)
				}
			</function>
		</code>
		<fillBackground color="black" left="0" right="0" top="0" bottom="0"/>
		<fillBackground color="gray" left="0" right="0" height="70" bottom="30"/>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<movie id="SONG" left="0" right="0" top="0" bottom="30" volume="1" href="x-id://movieData" active="false">
			<code>
				<function id="doFirst">
					this.bubble("doGotoFirstSong");
				</function>
				<function id="doLast">
					this.bubble("doGotoLastSong");
				</function>
				<function id="doNext">
					if (!this.bubble("doGotoNextSong"))
						this.bubble("doBlink")
				</function>
				<function id="doPrevious">
					this.bubble("doGotoPreviousSong");
				</function>
				<function id="finished">
					if (!this.bubble("doGotoNextSong", true)) {
						this.bubble("doGotoFirstSong");
							this.bubble("doControl")
					}
				</function>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
		</movie>
		<image id="ART" left="50" top="50" width="500" height="500" href="x-id://artData"/>
		<group id="H_INFO" left="0" right="0" top="0" bottom="0" visible="false">
			<kbookSelectionIndicator left="50" top="327" width="108" height="36" align="left">
				<variable name="SHUFFLE" on="true"/>
				<variable name="REPEAT" on="1"/>
				<variable name="REPEAT" on="2"/>
			</kbookSelectionIndicator>
			<kbookLabel id="TITLE_H" skin="label-song" left="50" right="355" height="40" top="172" align="left" variable="SONG"/>
			<kbookLabel id="ARTIST_H" left="50" right="355" height="35" top="215" align="left" variable="ARTIST"/>
			<kbookLabel id="ALBUM_H" left="50" right="355" height="35" top="242" align="left" variable="ALBUM"/>
			<kbookLabel id="SONG_ALL_H" align="left" left="50" width="250"  top="297" height="40" variable="SONG_ALL_STRING"/>
		</group>
		<group id="V_INFO" left="0" right="0" top="0" bottom="0">
			<kbookSelectionIndicator right="50" top="600" width="108" height="36" align="right">
				<variable name="SHUFFLE" on="true"/>
				<variable name="REPEAT" on="1"/>
				<variable name="REPEAT" on="2"/>
			</kbookSelectionIndicator>
			<kbookLabel id="TITLE_V" skin="label-song" left="50" right="50" height="40" top="562" align="left" variable="SONG"/>
			<kbookLabel id="ARTIST_V" left="50" right="260" height="35" top="605" align="left" variable="ARTIST"/>
			<kbookLabel id="ALBUM_V" left="50" right="260" height="35" top="632" align="left" variable="ALBUM"/>
			<kbookLabel id="SONG_ALL_V" align="right" right="50" width="250"  top="632" height="40" variable="SONG_ALL_STRING"/>
		</group>
		<group id="MOUSE_TARGET" top="0" bottom="100" left="0" right="0" active="true">
			<code>
				<function id="canLine">
					return true
				</function>
				<function id="doLine" params="dir">
					var settings = this.getVariable("gestureDirectionFlag")
					dir = settings ? (dir == Gesture.leftDirection ? Gesture.rightDirection : Gesture.leftDirection) : dir 
					if (dir == Gesture.leftDirection)
						this.container.SONG.doPrevious.call(this)
					else if (dir == Gesture.rightDirection)
						this.container.SONG.doNext.call(this)
				</function>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
		</group>
		<slider id="SLIDER" skin="jumpBar" axis="x" left="148" right="12" bottom="45" track="doTrack" do="doJump" variable="SEEK"/>
		<kbookCheck skin="kbookPlay" left="12" width="114" height="42" bottom="43" do="doControl" variable="CONTROL" on="0" off="1"/>
		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" variable="SONG_INDEX_COUNT" active="true"/>
	</group>
	
	<group id="AUTORUN_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookView id="AUTORUN" href="" left="0" right="0" top="0" bottom="0"/>
	</group>
	
	<group id="SOFT_RESET_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookReset" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="soft-reset" left="0" width="70" top="0" height="70" active="false"/>
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_RESTOREDEFAULTS"/>
		<group id="SOFT_RESET" left="0" right="0" height="250">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>

			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="150" value="fskin:/l/strings/STR_UI_MESSAGE_RESET"/>
			<group top="150" width="296" height="42">
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doSoftReset" />
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
		</group>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" do="doMenuClose"/-->

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="FORMAT_DEVICE_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookFormatFlash" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="format-internal" left="0" width="70" top="0" height="70" active="false"/>

		<kbookLabel skin="title2" left="70" right="0" top="0" height="70" align="left" textresource="STR_UI_MESSAGE_FORMATINTERNALMEMORY"/>

		<!--group id="FORMAT_DEVICE" width="480" height="231"-->
		<group id="FORMAT_DEVICE" left="0" right="0" height="300">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_2"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="88" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_3"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="132" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_4"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="200" value="fskin:/l/strings/STR_UI_MESSAGE_FORMATDEVICE"/>

			<!--group top="188" width="296" height="42"-->
			<group top="200" width="296" height="42">
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doFormatFlash" />
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
		</group>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" do="doMenuClose"/-->

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="FORMAT_MS_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookFormatFlash" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="format-ms" left="0" width="70" top="0" height="70" active="false"/>

		<kbookLabel skin="title2" left="70" right="0" top="0" height="70" align="left" textresource="STR_UI_MESSAGE_FORMATEXTERNALMEMORY_MS"/>

		<!--group id="FORMAT_MS" width="480" height="231"-->
		<group id="FORMAT_MS" left="0" right="0" height="300">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_E2"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="88" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_3"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="132" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_4"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="200" value="fskin:/l/strings/STR_UI_MESSAGE_FORMATDEVICE_MS"/>

			<!--group top="188" width="296" height="42"-->
			<group top="200" width="296" height="42">
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doFormatMSFlash" />
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
		</group>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" do="doMenuClose"/-->

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="FORMAT_SD_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookFormatFlash" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="format-sd" left="0" width="70" top="0" height="70" active="false"/>

		<kbookLabel skin="title2" left="70" right="0" top="0" height="70" align="left" textresource="STR_UI_MESSAGE_FORMATEXTERNALMEMORY_SD"/>

		<!--group id="FORMAT_SD" width="480" height="231"-->
		<group id="FORMAT_SD" left="0" right="0" height="300">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_E2"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="88" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_3"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="132" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_4"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="200" value="fskin:/l/strings/STR_UI_MESSAGE_FORMATDEVICE_SD"/>

			<!--group top="188" width="296" height="42"-->
			<group top="200" width="296" height="42">
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doFormatSDFlash" />
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
		</group>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" do="doMenuClose"/-->

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="DELETE_BOOK_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookDeleteBook" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="delete-book" left="0" width="70" top="0" height="70" active="false"/>
		<!--kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" text="Delete Book"/-->
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_DELETEBOOK"/>
		<!--group id="DELETE_BOOK" width="480" height="143"-->
		<group id="DELETE_BOOK" left="0" right="00" height="300">

			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_DELETEBOOK_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_DELETEBOOK_2"/>
			-->

			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DELETEBOOK"/>

			<group top="100" width="296" height="42">
				<code>
					<function id="doOK">
						this.bubble("doMenu");
						this.bubble("doDeleteBook")
					</function>
				</code>
				<!--button2 id="YES" skin="kbookDialogYesButton" top="0" left="0" width="142" height="42" do="doOK" /-->
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doOK" />
				<!--button2 id="NO" skin="kbookDialogNOButton" top="0" right="0" width="142" height="42" do="doMenuClose" /-->
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
			<group top="235" width="570" height="90">
				<image left="10" top="0" width="51" height="68" href="x-id://bookCoverData"/>
				<kbookLabel skin="settingsMessage" top="0" left="100" width="480" height="90" align="left" variable="DELETEBOOK_MSG"/>
			</group>
		</group>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" do="doMenuClose"/-->

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="DELETE_BOOK_GROUP_ERR" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doMenu">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doRoot">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doSearch">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doOption">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doSize">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doNext">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doPrevious">
				this.bubble("doDeleteBookErr")
			</function>
		</code>
		<panel skin="kbookDeleteBook" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="delete-book" left="0" width="70" top="0" height="70" active="false"/>
		<!--kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" text="Delete Book"/-->
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_DELETEBOOK"/>

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>

		<!--group id="DELETE_BOOK_ERR" width="480" height="240"-->
		<group id="DELETE_BOOK_ERR" left="0" right="0" height="300">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>

			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_DELETEBOOKERR_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_DELETEBOOKERR_2"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="128" value="fskin:/l/strings/STR_UI_MESSAGE_DELETEBOOKERR"/>

			<group top="128" width="296" height="42">
				<!--button2 id="OK" skin="kbookDialogOKButton" top="0" width="142" height="42" do="doDeleteBookErr"/-->
				<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" top="0" width="142" height="42" do="doDeleteBookErr"/>
			</group>
		</group>
	</group>
	<group id="DELETE_HISTORICAL_WORDS_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookDeleteHistoricalWords" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="delete-historical-words" left="0" width="70" top="0" height="70" active="false"/>
		<!--kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" text="Clear Keyboard History"/-->
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_CLEARKEYBOARDHISTORY"/>

		<!--group id="DELETE_HISTORICAL_WORDS" width="480" height="143"-->
		<group id="DELETE_HISTORICAL_WORDS" left="0" right="0" height="143">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_DELETEHISTORICAL_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_DELETEHISTORICAL_2"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DELETEHISTORICAL"/>

			<group top="100" width="296" height="42">
				<!--button2 id="YES" skin="kbookDialogYesButton" top="0" left="0" width="142" height="42" do="doDeleteHistoricalWords" /-->
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doDeleteHistoricalWords" />
				<!--button2 id="NO" skin="kbookDialogNOButton" top="0" right="0" width="142" height="42" do="doMenuClose" /-->
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
		</group>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" do="doMenuClose"/-->

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>
	
	<group id="DEVICE_SHUTDOWN_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookDeviceShutdown" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="device-shutdown" left="0" width="70" top="0" height="70" active="false"/>
		<!--kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" text="Device Shutdown"/-->
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_DEVICESHUTDOWN"/>

		<!--group id="DEVICE_SHUTDOWN" width="480" height="143"-->
		<group id="DEVICE_SHUTDOWN" left="0" right="0" height="143">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>

			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_DEVICE_SHUTDOWN_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_DEVICE_SHUTDOWN_2"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DEVICE_SHUTDOWN"/>

			<group top="100" width="296" height="42">
				<!--button2 id="YES" skin="kbookDialogYesButton" top="0" left="0" width="142" height="42" do="doDeviceShutdown" /-->
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doDeviceShutdown" />
				<!--button2 id="NO" skin="kbookDialogNOButton" top="0" right="0" width="142" height="42"-->
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42">
					<code>
						<function id="click">
							this.bubble("doMenuClose", this);
						</function>
					</code>
				</button2icon>
			</group>
		</group>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" do="doMenuClose"/-->

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="HARD_RESET_GROUP" left="0" right="0" top="0" bottom="0" visible="false" active="true">
		<panel skin="kbookReset" left="0" right="0" top="0" bottom="0"/>
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_UI_MESSAGE_HARDRESET"/>
		<group id="HARD_RESET" width="480" height="440" visible="true" active="true">
			<code>
				<function id="doMenu">
					this.bubble("doNoHardReset");
				</function>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
				<function id="doRoot">
					this.bubble("doNoHardReset");
				</function>

				<function id="doOption">
					this.bubble("doHardReset");
				</function>
			</code>
			<kbookText skin="settingText" active="false" left="0" right="0" top="80" height="400" value="fskin:/l/strings/STR_UI_MESSAGE_HARDRESETOPERATION"/>
		</group>
	</group>
	
	<group id="DISPLAY_CALIBRATION_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookDisplayCalibration" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="display-calibration" left="0" width="70" top="0" height="70" active="false"/>
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_TOUCHPANEL"/>
		<group id="DISPLAY_CALIBRATION" left="0" right="0" top="0" bottom="0">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<group id="START" left="0" right="0" height="143">
				<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DISPLAY_CALIBRATIONSTART"/>

				<group top="100" width="296" height="42">
					<button2icon id="Yes" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doDisplayCalibration"/>
					<button2icon id="No" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
				</group>
			</group>
			<group id="END" width="600" height="99">
				<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_DISPLAY_CALIBRATIONEND"/>
				<group top="57" width="296" height="42">
					<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" top="0" width="142" height="42" do="doMenuClose"/>
				</group>
			</group>
		</group>

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<kbookPanel2 id="NOTEPAD_FREEHAND_GROUP" toolbar="OVERLAY_NOTEPAD_FREEHAND_TOOLBAR" main="NOTEPAD_FREEHAND" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookOverlay id="OVERLAY_NOTEPAD_FREEHAND_TOOLBAR" left="0" right="0" top="0" bottom="30" visible="true" href="x-id://notepadOverlayModel">
			<code>
				<function id="variableChanged" params="id, value">
					arguments.callee.grammar.call(this, id, value);
					if (id == "SHOW") {
						this.show(value);
						this.enableToolbar(value);
						if(value)
							this.container.NOTEPAD.focus(value);
						value ? this.getModel().opened(this) : this.getModel().closed();
					}
				</function>
				<function id="enableToolbar" params="enableIt">
					this.NOTEPAD_FREEHAND_TOOLBAR_GROUP.show(enableIt);
				</function>
				<function id="setToolbarMode" params="mode">
					if (mode == "view") {
						this.NOTEPAD_FREEHAND_TOOLBAR_GROUP.NOTEPAD_FREEHAND_TOOLBAR_VIEW_GROUP.show(true);
						this.NOTEPAD_FREEHAND_TOOLBAR_GROUP.NOTEPAD_FREEHAND_TOOLBAR_EDIT_GROUP.show(false);
					} else if (mode == "edit") {
						this.NOTEPAD_FREEHAND_TOOLBAR_GROUP.NOTEPAD_FREEHAND_TOOLBAR_VIEW_GROUP.show(false);
						this.NOTEPAD_FREEHAND_TOOLBAR_GROUP.NOTEPAD_FREEHAND_TOOLBAR_EDIT_GROUP.show(true);
					}
				</function>
			</code>
			<sprite skin="toolBar_back" skinType="horizontal" left="0" right="0" top="0" height="60" active="true"/>
			<group id="NOTEPAD_FREEHAND_TOOLBAR_GROUP" left="0" right="0" top="0" height="60">
				<group id="NOTEPAD_FREEHAND_TOOLBAR_VIEW_GROUP" left="0" right="0" top="0" height="60" visible="true">
					<button2icon skin="keyW2" left="15" top="4" width="160" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" bw="4" do="doNotepadEdit"/>
					<button2icon skin="keyW2" right="60" top="4" width="126" height="50" text="fskin:/l/strings/STR_UI_BUTTON_NEW" bw="4" do="doNotepadNew"/>
					<button2 skin="toolBar_close" right="8" top="8" width="42" height="42" do="doNotepadBack"/>
				</group>
				<group id="NOTEPAD_FREEHAND_TOOLBAR_EDIT_GROUP" left="0" right="0" top="0" height="60" visible="false">
					<kbookCheck skin="tool_check_freehand" top="8" left="8" width="80" height="42" variable="NOTEPAD_EDIT_MODE" on="FREEHAND" off="FREEHAND" do="doNotepadFreehand"/>
					<kbookCheck skin="tool_check_eraser" top="8" left="96" width="80" height="42" variable="NOTEPAD_EDIT_MODE" on="ERASER" off="ERASER" do="doNotepadEraser"/>
					<button2icon skin="keyW2" right="190" top="4" width="126" height="50" text="fskin:/l/strings/STR_UI_BUTTON_NEW" bw="4" do="doNotepadDoneNew"/>
					<button2icon skin="keyW2" right="60" top="4" width="126" height="50" text="fskin:/l/strings/STR_UI_BUTTON_DONE" bw="4" do="doNotepadDone"/>
					<button2 skin="toolBar_close" right="8" top="8" width="42" height="42" do="doNotepadCancel"/>
				</group>
			</group>
		</kbookOverlay>
		<kbookNotepadFreehand id="NOTEPAD_FREEHAND" left="0" right="0" top="60" bottom="30" defaultWidth="600" defaultHeight="710" href="x-id://notepadFreehandData">
			<code>
				<function id="getEdit">
					return this.container.NOTEPAD_FREEHANDAREA_GROUP.SVGEDIT_NOTEPAD;
				</function>
				<function id="getToolbar">
					return this.container.OVERLAY_NOTEPAD_FREEHAND_TOOLBAR;
				</function>
				<function id="onStartFreehand">
					this.container.NOTEPAD_FREEHANDAREA_GROUP.PARTIAL_MODE.show(true)
				</function>
				<function id="onStopFreehand">
					this.container.NOTEPAD_FREEHANDAREA_GROUP.PARTIAL_MODE.show(false)
				</function>
			</code>
		</kbookNotepadFreehand>
		<panel id="NOTEPAD_FREEHANDAREA_GROUP" skin="kbookNotepadFreehand" left="0" right="0" top="60" bottom="30" visible="true" active="false">
			<svgEdit id="SVGEDIT_NOTEPAD" left="0" right="0" top="0" bottom="0" visible="true" active="false">
				<code>
					<function id="doRoot">
						this.container.container.NOTEPAD_FREEHAND.doRoot();
					</function>
				</code>
			</svgEdit>
			<eInkPanel id="PARTIAL_MODE" mode="partial" frame="true" left="0" right="0" top="0" bottom="0" visible="false"/>
		</panel>
		<kbookStatus skin="kbookPageStatus" left="0" right="0" height="30" bottom="0"/>
		<kbookIndicator skin="halfPageIndicator" left="120" height="30" bottom="0" variable="NOTEPAD_HALF_PAGE"/>
		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" variable="NOTEPAD_INDEX_COUNT"/>
	</kbookPanel2>

	<kbookPanel2 id="NOTEPAD_TEXT_GROUP" toolbar="OVERLAY_NOTEPAD_TEXT_TOOLBAR" main="NOTEPAD_TEXT" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookOverlay id="OVERLAY_NOTEPAD_TEXT_TOOLBAR" left="0" right="0" top="0" bottom="30" visible="true" href="x-id://notepadOverlayModel">
			<code>
				<function id="variableChanged" params="id, value">
					arguments.callee.grammar.call(this, id, value);
					if (id == "SHOW") {
						this.show(value);
						this.enableToolbar(value);
						if(value)
							this.container.NOTEPAD.focus(value);
						value ? this.getModel().opened(this) : this.getModel().closed();
					}
				</function>
				<function id="enableToolbar" params="enableIt">
					this.NOTEPAD_TEXT_TOOLBAR_GROUP.show(enableIt);
				</function>
			</code>
			<sprite skin="toolBar_back" skinType="horizontal" left="0" right="0" top="0" height="60" active="true"/>
			<group id="NOTEPAD_TEXT_TOOLBAR_GROUP" left="0" right="0" top="0" height="60">
				<sprite skin="toolBar_back" skinType="horizontal" left="0" right="0" top="0" height="60" active="true"/>
				<button2icon skin="keyW2" left="15" top="4" width="160" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" bw="4" do="doNotepadEdit"/>
				<button2icon skin="keyW2" right="60" top="4" width="126" height="50" text="fskin:/l/strings/STR_UI_BUTTON_NEW" bw="4" do="doNotepadNew"/>
				<button2 skin="toolBar_close" right="8" top="8" width="42" height="42" do="doNotepadBack"/>
			</group>
		</kbookOverlay>
		<kbookNotepadText id="NOTEPAD_TEXT" left="0" right="0" top="60" bottom="30" href="x-id://notepadTextData">
			<code>
				<function id="setViewerText" params="text">
					this.container.NOTEPAD_TEXTAREA_GROUP.setText(text);
				</function>
			</code>
		</kbookNotepadText>
		<group id="NOTEPAD_TEXTAREA_GROUP" left="0" right="0" top="60" bottom="30">
			<model>
				<variable id="VAR_KEYBUF" value="" />
				<variable id="VAR_PAGENUM" value="1 / 1" />
				<variable id="VAR_UPDATE" value="false"/>
			</model>
			<code>
				<function id="getPageTextObj"><![CDATA[
					return this.NOTEPAD_TEXTAREA;
				]]></function>
				<function id="setText" params="text"><![CDATA[
					var model = this.getModel();
					var pageText = this.getPageTextObj();
					model.setVariable("VAR_KEYBUF", text);
					pageText.setPage(0);
					this.updatePageNo();
				]]></function>
				<function id="getText"><![CDATA[
					var model = this.getModel();
					return model.getVariable("VAR_KEYBUF", text);
				]]></function>
				<function id="setPage" params="num"><![CDATA[
					var pageText = this.getPageTextObj();
					pageText.setPage(num);
					this.updatePageNo();
				]]></function>
				<function id="getPage"><![CDATA[
					var pageText = this.getPageTextObj();
					return pageText.getPage();
				]]></function>
				<function id="getPages"><![CDATA[
					var pageText = this.getPageTextObj();
					return pageText.countPages();
				]]></function>
				<function id="updatePageNo"><![CDATA[
					var pageText = this.getPageTextObj();
					var page = pageText.getPage() + 1;
					var count = pageText.countPages();
					var pageNum = page + "fskin:/l/strings/STR_UI_PARTS_DELIMITER".idToString() + count;
					var model = this.model;
					if (pageNum != model.VAR_PAGENUM) {
						model.setVariable("VAR_PAGENUM", pageNum);
						model.setVariable("VAR_UPDATE", false);
						model.setVariable("VAR_UPDATE", true);
					}
				]]></function>
				<function id="canCmtPageBack"><![CDATA[
					var pageText = this.getPageTextObj();
					var page = pageText.getPage();
					return page > 0;
				]]></function>
				<function id="canCmtPageForw"><![CDATA[
					var pageText = this.getPageTextObj();
					var page = pageText.getPage();
					var count = pageText.countPages();
					return page + 1 < count;
				]]></function>
				<function id="canCmtEdit">
					return true;
				</function>
				<function id="canCmtDelete">
					return true;
				</function>
				<function id="doCmtPageBack"><![CDATA[
					var pageText = this.getPageTextObj();
					var page = pageText.getPage();
					var count = pageText.countPages();
					if (page>0) {
						--page;
						pageText.setPage(page);
						this.updatePageNo();
					} else {
						this.bubble("doBlink");
					}
				]]></function>
				<function id="doCmtPageForw"><![CDATA[
					var pageText = this.getPageTextObj();
					var page = pageText.getPage();
					var count = pageText.countPages();
					if (page+1<count) {
						++page;
						pageText.setPage(page);
						this.updatePageNo();
					} else {
						this.bubble("doBlink");
					}
				]]></function>
			</code>
			<pageText id="NOTEPAD_TEXTAREA" skin="cmtInput" left="0" right="0" top="0" bottom="0" active="false" variable="VAR_KEYBUF" limit="8192"/>
			<label skin="label-pageNo" bottom="20" right="129" width="70" height="26" align="center" variable="VAR_PAGENUM"/>

			<button2icon skin="cmtPagePrev" right="70" bottom="7" width="65" height="50" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doCmtPageBack" can="canCmtPageBack"/>
			<button2icon skin="cmtPageNext" right="7" bottom="7" width="65" height="50" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doCmtPageForw" can="canCmtPageForw"/>
		</group>
		<kbookStatus skin="kbookPageStatus" left="0" right="0" height="30" bottom="0"/>
		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" variable="NOTEPAD_INDEX_COUNT"/>
	</kbookPanel2>

	<group id="DEMO_MODE_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doDemoClose"><![CDATA[
				if(this.getVariable("DEMO_MODE_MESSAGE") != "FEATURE"){
					if (this.getVariable("DEMO_MODE_DIALOG")) {
						this.setVariable("DEMO_MODE_DIALOG", false)
					}
					else {
						this.bubble("doMenu");
					}
				}else{
					this.bubble("doBlink")
				}
			]]></function>

			<function id="doRoot"><![CDATA[
				if (this.getVariable("DEMO_MODE_DIALOG"))
					this.setVariable("DEMO_MODE_DIALOG", false)
				var model=this.getModel();
				model.doRoot();
			]]></function>
			<function id="doMenu"><![CDATA[
				if (this.getVariable("DEMO_MODE_DIALOG")) {
					this.setVariable("DEMO_MODE_DIALOG", false)
				}
				else {
					var model=this.getModel();
					model.doMenu();
				}
			]]></function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
			<function id="doSearch">
				this.bubble("doBlink")
			</function>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doNext">
				this.bubble("doBlink")
			</function>
			<function id="doPrevious">
				this.bubble("doBlink")
			</function>
			
		</code>
		
		<group id="DEMO_MODE" top="0" bottom="0" left="0" right="0">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<panel skin="kbookDemoMode" left="0" right="0" top="0" bottom="0"/>
			<!-- Back button -->
			<button2 skin="button_back" id="DEMO_BACK" left="5" top="5" width="61" height="61" do="doDemoClose"/>
			
			<!-- Title of Demo Mode -->
			<kbookLabel id="SETTING" skin="title" left="70" right="0" top="0" height="70" align="left" variable ="DEMO_TITLE" />
			<kbookLabel id="FORMAT_SETTING" skin="title2" left="70" right="0" top="0" height="70" align="left" variable ="DEMO_TITLE" />
			<kbookLabel id="FEATURE" skin="title" left="70" right="0" top="0" height="70" align="left" variable ="DEMO_TITLE" />
			
			<group id="TEXT" left="0" right="0" height="200">
				<!-- Messsage of Demo Mode -->
				<kbookText id="SETTING" skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DEMO_MODE_1"/>
				<kbookText id="FORMAT_SETTING" skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DEMO_MODE_1"/>
				<kbookText id="FEATURE" skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DEMO_MODE_2"/>
	
				<group top="100" width="296" height="42">
						<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" top="0" width="142" height="42">
							<code>
								<function id="click">
									if (this.getVariable("DEMO_MODE_DIALOG")) {
										this.setVariable("DEMO_MODE_DIALOG", false)
									}
									else {
										this.bubble("doMenu");
									}
								</function>
							</code>
						</button2icon>
				</group>
			</group>
		</group>
		
	</group>

	<group id="DEMO_PICTURE_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookImageDemo id="DEMO_PICTURE" left="0" right="0" top="0" bottom="0" active="true" href="x-id://demoImageData"/>
	</group>

	<kbookOverlay id="SIZE_OVERLAY"  right="0" left="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_MAX_FONTSCALE" value="0" />
			<variable id="VAR_RADIO_FONTSIZE" value="0"/>
			<variable id="VAR_ENABLE_ZOOM" value="true"/>
		</model>
		<code>
			<function id="canZoomMode">
				return this.getVariable("VAR_ENABLE_ZOOM");
			</function>
			<function id="canFontSize0">
				return this.getVariable("VAR_MAX_FONTSCALE")>=0;
			</function>
			<function id="canFontSize1">
				return this.getVariable("VAR_MAX_FONTSCALE")>=1;
			</function>
			<function id="canFontSize2">
				return this.getVariable("VAR_MAX_FONTSCALE")>=2;
			</function>
			<function id="canFontSize3">
				return this.getVariable("VAR_MAX_FONTSCALE")>=3;
			</function>
			<function id="canFontSize4">
				return this.getVariable("VAR_MAX_FONTSCALE")>=4;
			</function>
			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
		</code>
		<exGroup bottom="0" height="128" left="0" right="0" playing="V">
			<panel skin="jumpBack" left="0" right="0" top="0" bottom="0" active="true"/>
			<button2icon skin="fontClose" right="10" top="12" width="50" height="50" bw="4" do="doCloseButton"/>
			<group id="FONTSIZE" top="0" bottom="0" left="0" right="0">

				<!--button2icon skin="zoomBtn" text="Zoom In"   left="14" top="12" width="150" height="50" do="goZoomMode" can="canZoomMode" bw1y="4" bw2y="4"/-->
				<button2icon skin="zoomBtn" text="fskin:/l/strings/STR_UI_BUTTON_ZOOMIN"   left="14" top="12" width="178" height="50" do="goZoomMode" can="canZoomMode" bw1y="4" bw2y="4"/>

				<radio2icon id="font0" skin="fontSize0" bottom="9" left= "12" width="117" height="53" on="0" variable="VAR_RADIO_FONTSIZE" do="changeFontSize" can="canFontSize0" bw1x="2" bw1y="6" bw2y="5"/>
				<radio2icon id="font1" skin="fontSize1" bottom="9" left="129" width="114" height="53" on="1" variable="VAR_RADIO_FONTSIZE" do="changeFontSize" can="canFontSize1"          bw1y="6" bw2y="5"/>
				<radio2icon id="font2" skin="fontSize2" bottom="9" left="243" width="114" height="53" on="2" variable="VAR_RADIO_FONTSIZE" do="changeFontSize" can="canFontSize2"          bw1y="6" bw2y="5"/>
				<radio2icon id="font3" skin="fontSize3" bottom="9" left="357" width="114" height="53" on="3" variable="VAR_RADIO_FONTSIZE" do="changeFontSize" can="canFontSize3"          bw1y="6" bw2y="5"/>
				<radio2icon id="font4" skin="fontSize4" bottom="9" left="471" width="118" height="53" on="4" variable="VAR_RADIO_FONTSIZE" do="changeFontSize" can="canFontSize4" bw2x="3" bw1y="6" bw2y="5"/>
			</group>
		</exGroup>
		
		<exGroup bottom="0" height="72" left="0" right="0" playing="H">
			<panel skin="jumpBack" left="0" right="0" top="0" bottom="0" active="true"/>
			<button2icon skin="fontClose" right="3" top="12" width="50" height="50" bw="4" do="doCloseButton"/>
			<group id="FONTSIZE" top="0" bottom="0" left="0" right="0">
				<!--button2icon skin="zoomBtn" text="Zoom In"   left="14" top="12" width="150" height="50" do="goZoomMode" can="canZoomMode" bw1y="4" bw2y="4"/-->
				<button2icon skin="zoomBtn" text="fskin:/l/strings/STR_UI_BUTTON_ZOOMIN"   left="14" top="12" width="178" height="50" do="goZoomMode" can="canZoomMode" bw1y="4" bw2y="4"/>

				<radio2icon id="font0" skin="fontSize0" bottom="9" left="204" width="108" height="53" on="0" variable="VAR_RADIO_FONTSIZE" do="changeFontSize" can="canFontSize0" bw1x="2" bw1y="6" bw2y="5"/>
				<radio2icon id="font1" skin="fontSize1" bottom="9" left="312" width="105" height="53" on="1" variable="VAR_RADIO_FONTSIZE" do="changeFontSize" can="canFontSize1"          bw1y="6" bw2y="5"/>
				<radio2icon id="font2" skin="fontSize2" bottom="9" left="417" width="105" height="53" on="2" variable="VAR_RADIO_FONTSIZE" do="changeFontSize" can="canFontSize2"          bw1y="6" bw2y="5"/>
				<radio2icon id="font3" skin="fontSize3" bottom="9" left="522" width="105" height="53" on="3" variable="VAR_RADIO_FONTSIZE" do="changeFontSize" can="canFontSize3"          bw1y="6" bw2y="5"/>
				<radio2icon id="font4" skin="fontSize4" bottom="9" left="627" width="109" height="53" on="4" variable="VAR_RADIO_FONTSIZE" do="changeFontSize" can="canFontSize4" bw2x="3" bw1y="6" bw2y="5"/>
			</group>
		</exGroup>
	</kbookOverlay>
	<kbookZoomOverlay id="ZOOM_OVERLAY" upButton="zoomUp" downButton="zoomDown" leftButton="zoomLeft" rightButton="zoomRight" sliderBar="ZOOMSLIDER" closeButton="ZOOMCLOSE" left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="ZOOM_RATE" value="100"/>
		</model>
		<code>
			<function id="onStartMonoChromePage">
				this.MONOCHROME.show(true)
			</function>
			<function id="onEndMonoChromePage">
				this.MONOCHROME.show(false)
			</function>
		</code>
		<kbookZoomButton id="zoomLeft" skin="zoomLeft" left="8" width="42" height="62" top="355" do="doLeft" />
		<kbookZoomButton id="zoomRight" skin="zoomRight" right="8" width="42" height="62" top="355" do="doRight" />
		<kbookZoomButton id="zoomUp" skin="zoomUp" top="8" width="62" height="42" do="doUp" />
		<kbookZoomButton id="zoomDown" skin="zoomDown" bottom="10" width="62" height="42" do="doDown" />

		<button skin="zoomSlider-plus"  left="8" top="8" width="54" height="48">
			<code>
				<function id="click">
					this.bubble("zoomRateChanged", 10);
				</function>
				<function id="canDoubleTap">
					return false;
				</function>
			</code>
		</button>
		<button skin="zoomSlider-minus" left="8" top="282" width="54" height="48">
			<code>
				<function id="click">
					this.bubble("zoomRateChanged", -10);
				</function>
				<function id="canDoubleTap">
					return false;
				</function>
			</code>
		</button>
		<kbookZoomSlider id="ZOOMSLIDER" variable="ZOOM_RATE" skin="zoomSlider" left="8" top="56" height="226" min="100" max="300" do="zoomChange">
		</kbookZoomSlider>
		<button id="ZOOMCLOSE" skin="zoomClose" right="8" top="8" width="42" height="42" do="doClose"/>
		<monochrome id="MONOCHROME" left="0" right="0" top="0" bottom="0" visible="false"/>
		
	</kbookZoomOverlay>

	<kbookOverlay id="SHORTCUT_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://pageShortcutOverlayModel">
		<model>
			<variable id="VAR_UPDATE" value="false"/>
		</model>
		<code>
			<function id="beforeOpenDicViewer"><![CDATA[
				this.VIEW_SHORTCUT.setVariable("VIEW", "SIMPLE");
			]]></function>
			<function id="doDrag" params="x, y, type, tapCount">
				this.getModel().doDrag(x, y, type, tapCount);
			</function>
			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
		</code>

		<group id="VIEW_SHORTCUT"  left="0" right="0" bottom="0" height="86" visible="true" active="true">
			<model>
				<variable id="VIEW" value="CONTENT"/>
			</model>

			<code>
				<function id="canTap">
					return false;
				</function>
				<function id="canDoubleTap">
					return false;
				</function>
				<function id="canLine">
					return false;
				</function>
				<function id="canLineAndHold">
					return false;
				</function>
			</code>
			<!-- background of menu -->
			<panel skin="jumpBack" left="0" right="0" top="0" bottom="0" active="true"/>
			<group left="0" right="0" top="2" bottom="0" visible="true" active="true">
				<!-- Hightlight Icon -->
				<button2icon skin="shortcutHighlightButton" left="8" width="42" height="42" do="doShortcutHighlight"/>
				<!-- Search Icon -->
				<button2icon skin="shortcutSearchButton" left="58" width="42" height="42" do="doShortcutSearch"/>
				<!-- Dictionary Icon -->
				<button2icon skin="shortcutDictionaryButton" left="108" width="42" height="42" variableUpdate="VAR_UPDATE" can="canShortcutDictionary" do="doShortcutDictionary"/>
				<!-- line space is 3 dot.  lineSpaceing= 3*72/kFskDocumentViewerDefaultDPI = 3*72/167 = 1.2934 -->
				<kbookDictionaryButton skin="shortcutDictionaryButton" bgColor="#FFFFFFFF" textSize="8" lineSpacing="1.2934" left="158" right="58" height="70" variableUpdate="VAR_UPDATE" can="canShortcutDictionary" do="doShortcutDictionary" href="x-id://dictionaryData"/>
				<exButton skin="optClose" right="8" width="42" height="42" do="doCloseShortcut"/>
			</group>
		</group>

	</kbookOverlay>

	<kbookOverlay id="SEARCH_RESULT" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://pageSearchResultOverlayModel">
		<code>
			<function id="doNext">
				this.getModel().doNext();
			</function>
			<function id="doPrevious">
				this.getModel().doPrevious();
			</function>
			<function id="canLine">
				return true
			</function>
			<function id="doLine" params="dir">
				var settings = this.getVariable("gestureDirectionFlag")
				dir = settings ? (dir == Gesture.leftDirection ? Gesture.rightDirection : Gesture.leftDirection) : dir 
				if (dir == Gesture.leftDirection)
					this.doPrevious()
				else if (dir == Gesture.rightDirection)
					this.doNext()
			</function>
			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
		</code>
		<button2icon skin="searchBackward" width="92" height="42" left="8" bottom="10" visible="true" active="true" do="onBackward" beforeClick="onMouseDown" afterClick="onMouseUp">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
		<button2icon skin="searchForward" width="92" height="42" right="8" bottom="10" visible="true" active="true" do="onForward" beforeClick="onMouseDown" afterClick="onMouseUp">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
		<button2icon skin="searchClose" width="42" height="42" right="8" top="8" visible="true" active="true" do="doCloseSearchResult">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
	</kbookOverlay> 

	<kbookOverlay id="SEARCH_OVERLAY"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_UPDATEBTN" value="false"/>
		</model>
		<code>
			<function id="beforeOpenSearch"><![CDATA[
				var model=this.getModel();
				var words=model.getVariable("VAR_KEYBUF");
				var keyboard = this.KEYBOARD;
				this.deletePopup();
				var settings = this.getVariable("keyboard")
				keyboard.KEYLAYOUT.changeKeyboardType(settings);
				keyboard.KEYLAYOUT.setType("ALPHABET");
				if (kbook.model.STATE != "PAGE") {
					keyboard.initBuffer("","strExisted",false);
				} else {
					keyboard.initBuffer(words,"strExisted",false);
				}
			]]></function>
			<function id="canSearchBtn"><![CDATA[
				var keyboard = this.KEYBOARD;
				//trace("canSearchBtn="+keyboard.btnState+"\n");
				return keyboard.btnState;
			]]></function>
			<function id="doSelChanged2" params="offset, length">
				var keyboard = this.KEYBOARD;
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				//trace("doSelChanged2: offset="+offset+" length="+length+"\n");
				keyboard.doSelChanged(offset,length,words,false);
			</function>
			<function id="registerWords"><![CDATA[
				var keyboard = this.KEYBOARD;
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				if (words && words.length>0)
					keyboard.registerAllWords(words);
			]]></function>
			<function id="doMenu">
				//trace("SEARCH_OVERLAY:doMenu()\n");
				this.registerWords();
				this.bubble("doCloseButton");
			</function>
			<function id="doRoot">
				//trace("SEARCH_OVERLAY:doRoot()\n");
				this.registerWords();
				this.bubble("doCloseButton");
				if (kbook.model.STATE!="MENU_HOME") {
					var model=this.getModel();
					model.targetModel.doRoot();
				}
			</function>
			
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					//trace("SEARCH_OVERLAY:variableChanged:"+id+"="+value+"\n");
					this.show(value);
					this.KEYBOARD_MODE.show(value)
					if(value)
						this.KEYBOARD.KEYBUF.focus(value);
				}
			</function>

			<function id="deletePopup">
				this.popup.show(false);
				this.popup.enable(false);
			</function>

		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<keyboard id="KEYBOARD" left="0" right="0" height="369" bottom="0">
			<panel skin="kbarea" left="0" right="0" top="0" height="113" active="true"/>
			<limitedField skin="searchInput" id="KEYBUF" left="14" right="184" top="18" height="40" doSelectionChanged="doSelChanged2" variable="VAR_KEYBUF" visible="true" active="true"/>
			<candidateButton id="CANDIDATE" skin="candidate" top="69" height="28" left="8" right="8"/>
			<button2icon text="fskin:/l/strings/STR_UI_BUTTON_SEARCH" top="14" height="50" right="66" width="116" skin="keyW2" variableUpdate="VAR_UPDATEBTN" can="canSearchBtn" bw="4"  beforeClick="onMouseDown" afterClick="onMouseUp">
				<code>
					<function id="click">
						var target = this.container.container;
						target.registerWords();

						var keybuf = this.container.KEYBUF;
						var words = keybuf.getValue();
						var model=this.getModel();
						model.setVariable("VAR_KEYBUF",words);
						this.getModel().execSearch(words);
					</function>
				</code>
			</button2icon>
			<button2icon skin="keyClose" top="18" right="14" width="42" height="42">
				<code>
					<function id="click">
						//trace("SEARCH_OVERLAY:keyClose\n");
						var target = this.container.container;
						target.registerWords();
						this.bubble("doCloseButton");
					</function>
				</code>
			</button2icon>

			<keyLayout id="KEYLAYOUT" left="0" right="0" top="113" bottom="0" ignore="Return Entr&#233;e Enter"  skin="keyW_H">
				<code>
					<function id="registerKey" params="key, bounds">
						this.container.container.KEYBOARD_MODE.register(key, bounds)
					</function>
					<function id="unregisterKey" params="key">
						this.container.container.KEYBOARD_MODE.unregister(key)
					</function>
				</code>
			</keyLayout>
		</keyboard>
		<eInkPanelKeyboard id="KEYBOARD_MODE" left="0" right="0" top="0" bottom="0" visible="false"/>

		<group id="popup" left="0" right="0" top="0" bottom="0" active="true" visible="false">

			<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>
			<!--panel skin="kbarea" left="0" right="0" top="0" height="113" active="true" visible="true"-->
			<!--/panel-->
			<button id="background" text="" left="0" top="0" width="30" height="72" skin="balloonBackground"/>
			<button id="arrow" text="" left="0" top="0" width="24" height="12" skin="balloonArrow"/>

			<button id="addkey7" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.KEYBOARD.addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey6" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.KEYBOARD.addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey5" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.KEYBOARD.addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey4" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.KEYBOARD.addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey3" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.KEYBOARD.addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey2" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.KEYBOARD.addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey1" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.KEYBOARD.addLetter(null, text, null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey0" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.KEYBOARD.addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<panel id="vertLine" skin="balloonVertLine" left="0" top="0" width="2" height="72" active="true" visible="true"/>

			<button id="popupClose" skin="keyClose" top="0" right="0" width="42" height="42">
				<code>
					<function id="click">
						var obj = this.container.container;
						obj.deletePopup();
					</function>
				</code>
			</button>

		</group>
	</kbookOverlay>

	<kbookOverlay id="HIGHLIGHT_SELECTOR_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://pageHighlightSelectorOverlayModel">
		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<exGroup id="VIEW_HIGHLIGHT_SELECTOR"  width="446" height="190" top="64" visible="true" active="true">
			<exButton skin="optClose" 		right="0" top="0" width="42" height="42" do="doCloseHighlightSelector"/>

			<exPanel  skin="opt_frame"								left="0" right="0" top= "50" bottom="0" playing="match"/>
			<!-- By Ink Item -->
			<exButton skin="shortcutFreehand" textresource="STR_UI_SHORTCUT_ANNOTATION_BYFREEHAND"		left="8" right="5" top= "58" height="58" do="doHighlightSelectorByFh"/>
			<exLine   skin="optSpaceBig" 							left="0" right="0" top="116" height="8"/>
			<!-- By Text Item -->
			<exButton skin="shortcutKeyboard" textresource="STR_UI_SHORTCUT_ANNOTATION_BYTEXT"			left="8" right="5" top="124" height="58" do="doHighlightSelectorByText"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="COMMENT_VIEWER_OVERLAY"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_PAGENUM" value="1 / 1" />
			<variable id="VAR_BOUNDS"/>
			<variable id="VAR_UPDATE" value="false"/>
		</model>
		<code>
			<function id="getPageTextObj"><![CDATA[
				var orientation = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V");
				var id=(orientation=="H"?"CMT_VIEWER_H":"CMT_VIEWER_V");
				var pageText = this[id].KEYBUF;
				return pageText;
			]]></function>
			<function id="getCurPage"><![CDATA[
				var pageText = this.getPageTextObj();
				return pageText.getPage();
			]]></function>
			<function id="beforeOpenCmtViewer"><![CDATA[
				this.model.setVariable("VAR_PAGENUM", "");
				var pageText = this.getPageTextObj();
				pageText.setPage(0);
				this.updatePageNo();
			]]></function>
			<function id="updatePageNo"><![CDATA[
				var pageText = this.getPageTextObj();
				var page = pageText.getPage() + 1;
				var count = pageText.countPages();
				var pageNum = page + "fskin:/l/strings/STR_UI_PARTS_DELIMITER".idToString() + count;
				//trace("Viewer: updatePageNo: getPage()="+(page-1)+" countPage()="+count+"\n");
				var model = this.model;
				if (pageNum != model.VAR_PAGENUM) {
					model.setVariable("VAR_PAGENUM", pageNum);
					model.setVariable("VAR_UPDATE", false);
					model.setVariable("VAR_UPDATE", true);
				}
			]]></function>
			<function id="canCmtPageBack"><![CDATA[
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				//trace(" Viewer: canCmtPageBack:page="+page+"\n");
				return page>0;
			]]></function>
			<function id="canCmtPageForw"><![CDATA[
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				//trace(" Viewer: canCmtPageForw: page="+page+" count= " + count + "\n");
				return page + 1 < count;
			]]></function>
			<function id="doCmtPageBack"><![CDATA[
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				if (page>0) {
					--page;
					pageText.setPage(page);
					//trace(" Viewer:setPage("+page+")");
					this.updatePageNo();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doCmtPageForw"><![CDATA[
				//debugger;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				if (page+1<count) {
					++page;
					pageText.setPage(page);
					//trace(" Viewer:setPage("+page+")");
					this.updatePageNo();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doNext"><![CDATA[
				//trace("COMMENT_VIEWER_OVERLAY:doNext()\n");
				this.doCmtPageForw();
			]]></function>
			<function id="doPrevious"><![CDATA[
				//trace("COMMENT_VIEWER_OVERLAY:doPrevious()\n");
				this.doCmtPageBack();
			]]></function>
			<function id="doOption"><![CDATA[
				this.bubble("doBlink");
				//var model = this.getModel();
				//model.doAnnotationViewerClose();
				//model.targetModel.doOption();
			]]></function>
			<function id="doSearch"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSize"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			
		</code>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="VAR_BOUNDS" visible="true"/>
		<exGroup id="CMT_VIEWER_V" width="446" top="21" height="363" playing="V">
			<exButton skin="optClose" width="42" height="42" top="0" right="0" do="doAnnotationViewerClose"/>
			<pageText  skin="cmtInput" id="KEYBUF" active="false" left="0" right=  "0" top= "48" bottom="0" variable="VAR_KEYBUF" limit="2048"/>
			<button2icon skin="cmtPagePrev" right="70" bottom="7" width="65" height="50" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doCmtPageBack" can="canCmtPageBack"/>
			<button2icon skin="cmtPageNext" right="7" bottom="7" width="65" height="50" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doCmtPageForw" can="canCmtPageForw"/>
			<button2icon skin="keyWs" left="7" bottom="7" width="120" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" do="doAnnotationEdit" can="canAnnotationEdit"/>
			<button2icon skin="keyWs" left="125" bottom="7" width="130" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_DELETE" do="doAnnotationDelete" can="canAnnotationDelete"/>
			<label skin="label-pageNo" bottom="20" right="129" width="70" height="26" align="center" variable="VAR_PAGENUM"/>
		</exGroup>
		<exGroup id="CMT_VIEWER_H" width="542" top="17" height="219" playing="H">
			<exButton skin="optClose" width="42" height="42" top="0" right="0" do="doAnnotationViewerClose"/>
			<pageText  skin="cmtInput" id="KEYBUF" active="false" left="48" right=  "48" top= "0" bottom="0" variable="VAR_KEYBUF" limit="2048"/>
			<button2icon skin="cmtPagePrev" right="118" bottom="7" width="65" height="50" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doCmtPageBack" can="canCmtPageBack"/>
			<button2icon skin="cmtPageNext" right="55" bottom="7" width="65" height="50" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doCmtPageForw" can="canCmtPageForw"/>
			<button2icon skin="keyWs" left="55" bottom="7" width="120" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" do="doAnnotationEdit" can="canAnnotationEdit"/>
			<button2icon skin="keyWs" left="173" bottom="7" width="130" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_DELETE" do="doAnnotationDelete" can="canAnnotationDelete"/>
			<label skin="label-pageNo" bottom="20" right="177" width="70" height="26" align="center" variable="VAR_PAGENUM"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="COMMENT_EDITOR_OVERLAY"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_PAGENUM" value="1" />
			<variable id="VAR_UPDATE" value="false"/>
			<variable id="VAR_UPDATEBTN" value="false"/>
			<variable id="VAR_VIEWSIZE" value="normal"/>
		</model>
		<code>
			<function id="getKeyboardObj"><![CDATA[
				var orientation = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V");
				var id=(orientation=="H"?"KEYBOARD_H":"KEYBOARD_V");
				var keyboard = this[id];
				return keyboard;
			]]></function>
			<function id="getPageTextObj"><![CDATA[
				var keyboard = this.getKeyboardObj();
				return keyboard.KEYBUF;
			]]></function>
			<function id="beforeOpenCmtEditor" params="curPage"><![CDATA[
				var model=this.getModel();
				var words=model.getVariable("VAR_KEYBUF");
				var keyboard = this.getKeyboardObj();

				var settings = this.getVariable("keyboard")
				keyboard.KEYLAYOUT.changeKeyboardType(settings);
				keyboard.KEYLAYOUT.setType("ALPHABET");
				keyboard.initBuffer(words,"strModified",false);

				this.deletePopup();

				// var model=this.getModel();
				// var words=model.getVariable("VAR_KEYBUF");
				// var keyboard = this.getKeyboardObj();
				// keyboard.initBuffer(words,"strModified",false);

				model.setVariable("VAR_PAGENUM", "");
				var pageText = this.getPageTextObj();
				pageText.setPage(curPage);
				this.updatePageNo();
			]]></function>
			<function id="setViewSize" params="mode"><![CDATA[
				var model = this.getModel();
				var keyboard = this.getKeyboardObj();
				keyboard.setViewSize(mode);
				model.setVariable("VAR_VIEWSIZE", mode);
			]]></function>
			<function id="updatePageNo"><![CDATA[
				var model = this.model;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage() + 1;
				var count = pageText.countPages();
				var pageNum = page + "fskin:/l/strings/STR_UI_PARTS_DELIMITER".idToString() + count;
				//trace("Editor: updatePageNo: getPage()="+(page-1)+" countPage()="+count+"\n");
				if (pageNum != model.VAR_PAGENUM) {
					model.setVariable("VAR_PAGENUM", pageNum);
					//debugger;
					model.setVariable("VAR_UPDATE", false);
					model.setVariable("VAR_UPDATE", true);
					//debugger;
				}
			]]></function>
			<function id="canCmtPageBack"><![CDATA[
				//debugger;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				//trace(" Editor: canCmtPageBack:page="+page+"\n");
				return page>0;
			]]></function>
			<function id="canCmtPageForw"><![CDATA[
				//debugger;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				//trace(" Editor: canCmtPageForw: page="+page+" count= " + count + "\n");
				return page + 1 < count;
			]]></function>
			<function id="doCmtPageBack"><![CDATA[
				//debugger;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				if (page>0) {
					--page;
					pageText.setPage(page);
					//trace(" Editor:setPage("+page+")");
					this.updatePageNo();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doCmtPageForw"><![CDATA[
				//debugger;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				if (page+1<count) {
					++page;
					pageText.setPage(page);
					//trace(" Editor:setPage("+page+")");
					this.updatePageNo();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="getWords">
				var keyboard = this.getKeyboardObj();
				var field = keyboard.KEYBUF;
				var words = field.getValue();
				return words;
			</function>
			<function id="registerOneWord">
				var words = this.getWords();
				var keyboard = this.getKeyboardObj();
				var field = keyboard.KEYBUF;
				var offset= field.getSelectionOffset();
				var length= field.getSelectionLength();
				keyboard.doSelChanged(offset,length,words,true);
				FskPredictive.checkSave(); //iVALSUN-bobsled-#514 at 081008
			</function>
			<function id="doSelChanged2" params="offset, length">
				var keyboard = this.getKeyboardObj();
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				//trace("doSelChanged1: offset="+offset+" length="+length+"\n");
				keyboard.doSelChanged(offset,length,words,false);
			</function>
			<function id="doOverflow" params="text">
				this.bubble("doBlink");
			</function>
			<function id="canDoneBtn"><![CDATA[
				var model = this.getModel();
				var keyboard = this.getKeyboardObj();
				//trace("canDoneBtn="+keyboard.btnState+"\n");
				return (model.getVariable("VAR_VIEWSIZE") == "max") ? true : keyboard.btnState;
			]]></function>
			<function id="doMenu"><![CDATA[
				if (!this.getVariable("DEMO_MODE")) {
					this.registerOneWord();
					this.model.doAnnotationEditorQuit(this.canDoneBtn());
				} else {
					this.model.doAnnotationEditorQuit("demo");
				}
			]]></function>
			<function id="doRoot">
				if (!this.getVariable("DEMO_MODE")) {
					this.registerOneWord();
					this.model.doAnnotationEditorQuit(this.canDoneBtn(),"doRoot");
				} else {
					this.model.doAnnotationEditorQuit("demo","doRoot");
				}
			</function>
			<function id="doNext"><![CDATA[
				this.doCmtPageForw();
			]]></function>
			<function id="doPrevious"><![CDATA[
				this.doCmtPageBack();
			]]></function>
			<function id="doOption"><![CDATA[
				this.bubble("doBlink");
				//this.registerOneWord();
				//this.model.doAnnotationEditorQuit(this.canDoneBtn(),"doOption");
			]]></function>
			<function id="doSearch"><![CDATA[
				this.bubble("doBlink");
				//this.registerOneWord();
				//this.model.doAnnotationEditorQuit(this.canDoneBtn(),"doSearch");
			]]></function>
			<function id="doSize"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					//trace("COMMENT_EDITOR:variableChanged:"+id+"="+value+"\n");
					this.show(value);
					this.KEYBOARD_MODE.show(value)
					if(value) {
						var keyboard = this.getKeyboardObj();
						keyboard.KEYBUF.focus(value);
					}
				}
			</function>

			<function id="deletePopup">
				this.popup.show(false);
				this.popup.enable(false);
			</function>

		</code>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<keyboard id="KEYBOARD_V" left="0" right="0" top="0" bottom="0" playing="V">
			<code>
				<function id="setViewSize" params="mode"><![CDATA[
					var width, height, limit;
					var cmtWidth = this.getWidth();
					var cmtHeight = this.KBAREA.getY() - this.getY();
					if (mode == "normal") {
						width = 446;
						height = 315;
						limit = 2048;
						this.NEWBTN.show(false);
						this.CANDIDATE.sizeTo(397, 28);
					} else if (mode == "max") {
						width = cmtWidth;
						height = cmtHeight;
						limit = 8192;
						this.NEWBTN.show(true);
						this.CANDIDATE.sizeTo(267, 28);
					}
					var x = this.getX() + (cmtWidth - width) / 2;
					var y = this.getY() + (cmtHeight - height) / 2;
					this.KEYBUF.moveTo(x, y);
					this.KEYBUF.sizeTo(width, height);
					this.KEYBUF.setLimit(limit);
					this.buttons.moveTo(x,  y + height - this.buttons.getHeight());
					this.buttons.sizeTo(width, this.buttons.getHeight());
				]]></function>
			</code>
			<panel skin="kbarea" id="KBAREA" left="0" right="0" top="453" height="61" active="true"/>
			<!--[BW]panel skin="kbareaL" left="0" right="185" top="453" height="61" active="true"/-->
			<!--[BW]panel skin="kbareaR" width="185" right="0" top="453" height="61" active="true"/-->
			<pageText skin="cmtInput" id="KEYBUF" width="446" top= "58" height="315" doSelectionChanged="doSelChanged2" doOverflow="doOverflow" limit="2048" variable="VAR_KEYBUF"/>
			<group id="buttons" width="446" top="312" height="61">
				<button2icon skin="cmtPagePrev"  right= "70" top="4" width="65" height="50" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doCmtPageBack" can="canCmtPageBack"/>
				<button2icon skin="cmtPageNext"  right=  "7" top="4" width="65" height="50" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doCmtPageForw" can="canCmtPageForw"/>
				<label skin="label-pageNo" bottom="20" right="129" width="70" height="26" align="center" variable="VAR_PAGENUM"/>
			</group>
			<button2icon skin="keyClose" width="42" height="42" top="463" right="14">
				<code>
					<function id="click">
						var model=this.getModel();
						if (!this.getVariable("DEMO_MODE")) {
							var target = this.container.container;
							target.registerOneWord();
							var keyboard = this.container;
							model.doAnnotationEditorQuit(keyboard.btnState);
						}
						else
							model.doAnnotationEditorQuit("demo");
					</function>
				</code>
			</button2icon>
			<button2icon skin="keyW2" width="126" height="50" top="459" right="66" text="fskin:/l/strings/STR_UI_BUTTON_DONE" variableUpdate="VAR_UPDATEBTN" can="canDoneBtn" bw="4">
				<code>
					<function id="click">
						var model = this.getModel();
						if (!this.getVariable("DEMO_MODE")) {
							var target = this.container.container;
							target.registerOneWord();
							var words = target.getWords();
							model.setVariable("VAR_KEYBUF",words);
							model.doAnnotationEditorClose();
						}
						else{
							model.doAnnotationEditorQuit("demo");
							this.bubble("doDemoModeDialog");
						}
					</function>
				</code>
			</button2icon>
			<button2icon id="NEWBTN" skin="keyW2" width="126" height="50" top="459" right="196" text="fskin:/l/strings/STR_UI_BUTTON_NEW" variableUpdate="VAR_UPDATEBTN" can="canDoneBtn" bw="4">
				<code>
					<function id="click">
						var model = this.getModel();
						if (!this.getVariable("DEMO_MODE")) {
							var target = this.container.container;
							target.registerOneWord();
							var words = target.getWords();
							model.setVariable("VAR_KEYBUF",words);
							model.doAnnotationEditorClose(true);
						}
						else{
							model.doAnnotationEditorQuit("demo");
							this.bubble("doDemoModeDialog");
						}
					</function>
				</code>
			</button2icon>
			<candidateButton id="CANDIDATE" skin="candidate" top="471" height="28" left="8" right="195"/>
			<keyLayout id="KEYLAYOUT" left="0" right="0" top="514" bottom="0" skin="keyW_H">
				<code>
					<function id="registerKey" params="key, bounds">
						this.container.container.KEYBOARD_MODE.register(key, bounds)
					</function>
					<function id="unregisterKey" params="key">
						this.container.container.KEYBOARD_MODE.unregister(key)
					</function>
				</code>
			</keyLayout>
		</keyboard>

		<keyboard id="KEYBOARD_H" left="0" right="0" top="0" bottom="0" playing="H">
			<code>
				<function id="setViewSize" params="mode"><![CDATA[
					var width, height, limit;
					var cmtWidth = this.getWidth();
					var cmtHeight = this.KBAREA.getY() - this.getY();
					if (mode == "normal") {
						width = 446;
						height = 219;
						limit = 2048;
						this.NEWBTN.show(false);
						this.CANDIDATE.sizeTo(597, 28);
					} else if (mode == "max") {
						width = cmtWidth;
						height = cmtHeight;
						limit = 8192;
						this.NEWBTN.show(true);
						this.CANDIDATE.sizeTo(467, 28);
					}
					var x = this.getX() + (cmtWidth - width) / 2;
					var y = this.getY() + (cmtHeight - height) / 2;
					this.KEYBUF.moveTo(x, y);
					this.KEYBUF.sizeTo(width, height);
					this.KEYBUF.setLimit(limit);
					this.buttons.moveTo(x,  y + height - this.buttons.getHeight());
					this.buttons.sizeTo(width, this.buttons.getHeight());
				]]></function>
			</code>
			<panel skin="kbarea" id="KBAREA" left="0" right="0" top="253" height="61" active="true"/>
			<!--[BW] skin="kbareaL" left="0" right="185" top="253" height="61" active="true"/-->
			<!--[BW]panel skin="kbareaR" width="185" right="0" top="253" height="61" active="true"/-->
			<pageText  skin="cmtInput" id="KEYBUF" width="446" top= "17" height="219" doSelectionChanged="doSelChanged2" doOverflow="doOverflow" limit="2048" variable="VAR_KEYBUF"/>
			<group id="buttons" width="446" top="171" height="65">
				<button2icon skin="cmtPagePrev"  right= "70" top="8" width="65" height="50" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doCmtPageBack" can="canCmtPageBack"/>
				<button2icon skin="cmtPageNext"  right=  "7" top="8" width="65" height="50" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doCmtPageForw" can="canCmtPageForw"/>
				<label skin="label-pageNo" bottom="20" right="129" width="70" height="26" align="center" variable="VAR_PAGENUM"/>
			</group>
			<button2icon skin="keyClose" width="42" height="42" top="263" right="14">
				<code>
					<function id="click">
						var model=this.getModel();
						if (!this.getVariable("DEMO_MODE")) {
							var target = this.container.container;
							target.registerOneWord();
							var keyboard = this.container;
							model.doAnnotationEditorQuit(keyboard.btnState);
						}
						else
							model.doAnnotationEditorQuit("demo");
					</function>
				</code>
			</button2icon>
			<button2icon skin="keyW2" width="126" height="50" top="259" right="66" text="fskin:/l/strings/STR_UI_BUTTON_DONE" variableUpdate="VAR_UPDATEBTN" can="canDoneBtn" bw="4">
				<code>
					<function id="click">
						var model = this.getModel();
						if (!this.getVariable("DEMO_MODE")) {
							var target = this.container.container;
							target.registerOneWord();
							var words = target.getWords();
							model.setVariable("VAR_KEYBUF",words);
							model.doAnnotationEditorClose();
						}
						else{
							model.doAnnotationEditorQuit("demo");
							this.bubble("doDemoModeDialog");
						}
					</function>
				</code>
			</button2icon>
			<button2icon id="NEWBTN" skin="keyW2" width="126" height="50" top="259" right="196" text="fskin:/l/strings/STR_UI_BUTTON_NEW" variableUpdate="VAR_UPDATEBTN" can="canDoneBtn" bw="4">
				<code>
					<function id="click">
						var model = this.getModel();
						if (!this.getVariable("DEMO_MODE")) {
							var target = this.container.container;
							target.registerOneWord();
							var words = target.getWords();
							model.setVariable("VAR_KEYBUF",words);
							model.doAnnotationEditorClose(true);
						}
						else{
							model.doAnnotationEditorQuit("demo");
							this.bubble("doDemoModeDialog");
						}
					</function>
				</code>
			</button2icon>
			<candidateButton id="CANDIDATE" skin="candidate" top="271" height="28" left="8" right="195"/>
			<keyLayout id="KEYLAYOUT" left="0" right="0" top="314" bottom="0" skin="keyW_H">
				<code>
					<function id="registerKey" params="key, bounds">
						this.container.container.KEYBOARD_MODE.register(key, bounds)
					</function>
					<function id="unregisterKey" params="key">
						this.container.container.KEYBOARD_MODE.unregister(key)
					</function>
				</code>
			</keyLayout>
		</keyboard>

		<eInkPanelKeyboard id="KEYBOARD_MODE" left="0" right="0" top="0" bottom="0" visible="false"/>

		<group id="popup" left="0" right="0" top="0" bottom="0" active="true" visible="false">

			<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>
			<!--panel skin="kbarea" left="0" right="0" top="0" height="113" active="true" visible="true"-->
			<!--/panel-->
			<button id="background" text="" left="0" top="0" width="30" height="72" skin="balloonBackground"/>
			<button id="arrow" text="" left="0" top="0" width="24" height="12" skin="balloonArrow"/>

			<button id="addkey7" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.getKeyboardObj().addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey6" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.getKeyboardObj().addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey5" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.getKeyboardObj().addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey4" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.getKeyboardObj().addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey3" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.getKeyboardObj().addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey2" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.getKeyboardObj().addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey1" text="a" left="0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.getKeyboardObj().addLetter(null, text, null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<button id="addkey0" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H">
				<code>
					<function id="click">
						var obj = this.container.container;
						var text = this.getText();
						obj.getKeyboardObj().addLetter(null,text,null);
						obj.deletePopup();
					</function>
				</code>
			</button>
			<panel id="vertLine" skin="balloonVertLine" left="0" top="0" width="2" height="72" active="true" visible="true"/>

			<button id="popupClose" skin="keyClose" top="0" right="0" width="42" height="42">
				<code>
					<function id="click">
						var obj = this.container.container;
						obj.deletePopup();
					</function>
				</code>
			</button>
		</group>
	</kbookOverlay>

	<kbookOverlay id="SCRIBBLE_VIEWER_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_BOUNDS"/>
		</model>
		<code>
			<function id="getEdit">
				var orientation = (kbook.model.container.getVariable("ORIENTATION") ? "H" : "V");
				var id = (orientation == "H" ? "SCR_VIEWER_H":"SCR_VIEWER_V");
				return this[id].SCR_PANEL.SVGEDIT_SCR_VIEWER;
			</function>
			<function id="doPrevious">
				this.bubble("doBlink");
			</function>
			<function id="doNext">
				this.bubble("doBlink");
			</function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="VAR_BOUNDS" visible="true"/>
		<exGroup id="SCR_VIEWER_V" width="446" top="21" height="363" playing="V">
			<exButton skin="optClose" width="42" height="42" top="0" right="0" do="doAnnotationViewerClose"/>
			<exPanel id="SCR_PANEL" skin="opt_frame"	left="0" right="0" top="48" bottom="0">
				<svgEdit id="SVGEDIT_SCR_VIEWER" left="0" right="0" top="0" bottom="0" visible="true" active="false"/>
			</exPanel>
			<button2icon skin="keyWs" left="7" bottom="7" width="120" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" do="doAnnotationEdit" can="canAnnotationEdit"/>
			<button2icon skin="keyWs" left="125" bottom="7" width="130" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_DELETE" do="doAnnotationDelete" can="canAnnotationDelete"/>
		</exGroup>
		<exGroup id="SCR_VIEWER_H" width="542" top="17" height="315" playing="H">
			<exButton skin="optClose" width="42" height="42" top="0" right="0" do="doAnnotationViewerClose"/>
			<exPanel id="SCR_PANEL" skin="opt_frame" left="48" right="48" top="0" bottom="0">
				<svgEdit id="SVGEDIT_SCR_VIEWER" left="0" right="0" top="0" bottom="0" visible="true" active="false"/>
			</exPanel>
			<button2icon skin="keyWs" left="55" bottom="7" width="120" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" do="doAnnotationEdit" can="canAnnotationEdit"/>
			<button2icon skin="keyWs" left="173" bottom="7" width="130" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_DELETE" do="doAnnotationDelete" can="canAnnotationDelete"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="SCRIBBLE_EDITOR_OVERLAY"  left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="getEdit">
				return this.SCR_EDITOR.SCR_PANEL.SVGEDIT_SCR_EDITOR;
			</function>
			<function id="onStartFreehand">
				this.SCR_EDITOR.SCR_PANEL.PARTIAL_MODE.show(true);
			</function>
			<function id="onStopFreehand">
				this.SCR_EDITOR.SCR_PANEL.PARTIAL_MODE.show(false);
			</function>
			<function id="doPrevious">
				this.bubble("doBlink");
			</function>
			<function id="doNext">
				this.bubble("doBlink");
			</function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exGroup id="SCR_EDITOR" width="446" top="21" height="363">
			<kbookCheck id="tool_freehand" skin="tool_check_freehand" variable="SCR_PEN_TYPE" on="FREEHAND" off="FREEHAND" top="0" left="0" width="80" height="42" do="doFreehand"/>
			<kbookCheck id="tool_freehand" skin="tool_check_eraser" variable="SCR_PEN_TYPE" on="ERASER" off="ERASER" top="0" left="87" width="80" height="42" do="doEraser"/>
			<button2icon skin="keyW2" width="126" height="50" top="-4" right="52" text="fskin:/l/strings/STR_UI_BUTTON_DONE" bw="4">
				<code>
					<function id="click">
						var model = this.getModel();
						if (!this.getVariable("DEMO_MODE")) {
							model.doAnnotationEditorClose();
						}
						else{
							model.doAnnotationEditorQuit("demo")
							this.bubble("doDemoModeDialog")
						}
					</function>
				</code>
			</button2icon>
			<button2 skin="optClose" right="0" top="0" width="42" height="42">
				<code>
					<function id="click">
						var model=this.getModel();
						if (!this.getVariable("DEMO_MODE")) {
							model.doAnnotationEditorQuit(model.canDoneBtn());
						}
						else
							model.doAnnotationEditorQuit("demo")
					</function>
				</code>
			</button2>
			<exPanel id="SCR_PANEL" skin="opt_frame" left="0" right="0" top="48" bottom="0">
				<svgEdit id="SVGEDIT_SCR_EDITOR" left="0" right="0" top="0" bottom="0" visible="true" active="false"/>
				<eInkPanel id="PARTIAL_MODE" mode="partial" frame="true" left="0" right="0" top="0" bottom="0" visible="false"/>
			</exPanel>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="DICTIONARY_VIEWER_OVERLAY"  left="0" right="0" top="0" bottom="0" visible="false" href="x-id://pageDictionaryOverlayModel">
		<model>
			<variable id="VAR_DIC_TITLE" value="" />
			<variable id="VAR_BOOK_SIZE" value="0"/>
			<variable id="VAR_DIC_TEXT_SIZE" value="10"/>
			<variable id="VAR_DIC_LINE_SPACING" value="1"/>
			<variable id="VIEW_HEADWORD_UPDATE" value="false"/>
		</model>
		<code>
			<function id="beforeOpenDicViewer"><![CDATA[
				this.container.PAGE_GROUP.PAGE.show(false)
				this.container.PAGE_GROUP.KBOOKSTATUS.show(false)
				this.container.PAGE_GROUP.PAGE_INFO.show(false)

				var model=this.getModel();
				var dict = this.getDict();
				if (dict) {
					var title = dict.getTitle();
					if (title)
						model.setVariable("VAR_DIC_TITLE", title)
				}
			]]></function>
			<function id="beforeCloseDicViewer"><![CDATA[
				this.container.PAGE_GROUP.PAGE.show(true)
				this.container.PAGE_GROUP.KBOOKSTATUS.show(true)
				this.container.PAGE_GROUP.PAGE_INFO.show(true)
				//var model=this.getModel();
			]]></function>
			<function id="canDicPageBack"><![CDATA[
				return this.DICTIONARY_NORMAL_VIEW.DICT.canPrev();
			]]></function>
			<function id="canDicPageForw"><![CDATA[
				return this.DICTIONARY_NORMAL_VIEW.DICT.canNext();
			]]></function>
			<function id="canDicEdit"><![CDATA[
				return true;
			]]></function>
			<function id="canDicExit"><![CDATA[
				return true;
			]]></function>
			<function id="doDicPageBack"><![CDATA[
				this.DICTIONARY_NORMAL_VIEW.DICT.doPrev();
			]]></function>
			<function id="doDicPageForw"><![CDATA[
				this.DICTIONARY_NORMAL_VIEW.DICT.doNext();
			]]></function>
			<function id="doNextHold"><![CDATA[
				this.DICTIONARY_NORMAL_VIEW.DICT.doNextHold();
			]]></function>
			<function id="doPreviousHold"><![CDATA[
				this.DICTIONARY_NORMAL_VIEW.DICT.doPreviousHold();
			]]></function>
			<function id="doNext"><![CDATA[
				if (this.canDicPageForw()) {
					this.doDicPageForw();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doPrevious"><![CDATA[
				if (this.canDicPageBack()) {
					this.doDicPageBack();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doOption"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSearch"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSize"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSelectItem"><![CDATA[
				this.DICTIONARY_NORMAL_VIEW.setVariable("VIEW", "CONTENT")
				this.updateHeadWord()
			]]></function>
			<function id="updateHeadWord"><![CDATA[
				var model=this.getModel();
				model.setVariable("VIEW_HEADWORD_UPDATE", false)
				model.setVariable("VIEW_HEADWORD_UPDATE", true)
			]]></function>
			<function id="getDict"><![CDATA[
				return this.DICTIONARY_NORMAL_VIEW.DICT;
			]]></function>
			<function id="variableChanged" params="id, value"><![CDATA[
				arguments.callee.grammar.call(this, id, value);
				if (id == "VAR_DIC_TEXT_SIZE") {
					this.DICTIONARY_NORMAL_VIEW.DICT.setTextSize(value);
				}else if(id == "VAR_DIC_LINE_SPACING"){
					this.DICTIONARY_NORMAL_VIEW.DICT.setLineSpacing(value);
				}
			]]></function>
		</code>
		<kbookStatus id="KBOOKSTATUS" left="0" right="0" height="33" bottom="0"/>
		<group id="DICTIONARY_NORMAL_VIEW" left="0" right="0" top="0" bottom="30" >
			<model>
				<variable id="VIEW" value="CONTENT"/>
				<variable id="VIEW_HEADWORD" value="HEADWORD"/>
			</model>
			<exPanel id="PANEL_DIC_FRAME" skin="dic_frame"	left="0" right="0" top= "0" bottom="0" playing="match"/>
			<exPanelTop id="PANEL_DIC_FRAME_TOP" skin="dic_frame_top"	left="0" right="0" top= "0" bottom="0" visible="false" playing="match"/>
			<label id="DICTITLE" skin="label-dicTitle" top="12" left="7" right="56" height="32" align="left" variable="VAR_DIC_TITLE"/>
			
			<panel3part id="PANEL_DIC_HEADWORD" skin="dic_headword" bottom="7" left="10" width="350" height="46" active="false"/>
			<kbookDictionaryViewer id="DICTHEAD" skin="dic_viewer" bgColor="#FFDADADA" textSize="18" bottom="7" left="30" width="310" height="46" href="x-id://dictionaryData">
				<views variable="VIEW_HEADWORD" variableUpdate="VIEW_HEADWORD_UPDATE" headword="HEADWORD"/>
			</kbookDictionaryViewer>
			<button2icon id="BTN_DICEDIT" skin="dicEdit" right="7" bottom="7" width="87" height="42" do="doDicEdit" can="canDicEdit"/>
			<button2icon id="BTN_CLOSE" skin="keyClose" right="7" top="7" width="42" height="42" do="doDicViewerClose" can="canDicExit"/>
			<kbookDictionaryViewer skin="dic_viewer" id="DICT" bgColor="#FFFFFFFF" textSize="VAR_DIC_TEXT_SIZE" lineSpacing="VAR_DIC_LINE_SPACING" columnSpacing="8" columnWidth="14" left="10" right="10" top="60" bottom="60" href="x-id://dictionaryData">
				<views variable="VIEW" content="CONTENT"/>
				<code>
					<function id="getModel">
						return this.container.container.getModel()
					</function>
					<function id="onStartFastTurnPage">
						this.container.container.KBOOKSTATUS.show(false)
						this.container.PANEL_DIC_FRAME.show(false)
						this.container.PANEL_DIC_HEADWORD.show(false)
						this.container.DICTITLE.show(false)
						this.container.BTN_DICEDIT.show(false)
						this.container.BTN_CLOSE.show(false)

						var frameTop = this.container.PANEL_DIC_FRAME_TOP
						frameTop.show(true)
						var mono0=this.container.container.MONOCHROME_FRAME
						mono0.moveTo(frameTop.getX(),frameTop.getY())
						mono0.sizeTo(frameTop.getWidth(),frameTop.getHeight())
						mono0.show(true)

						var mono1=this.container.container.MONOCHROME_CONTENT
						mono1.moveTo(this.getX(),this.getY())
						mono1.sizeTo(this.getWidth(),this.getHeight())
						mono1.show(true)

						var mono2=this.container.container.MONOCHROME_HEADWORD
						var headword=this.container.DICTHEAD
						mono2.moveTo(headword.getX(),headword.getY())
						mono2.sizeTo(headword.getWidth(),headword.getHeight())
						mono2.show(true)

						var mono3=this.container.container.MONOCHROME_SIZE
						var size =this.container.container.SIZE
						mono3.moveTo(size.getX(),size.getY())
						mono3.sizeTo(size.getWidth(),size.getHeight())
						mono3.show(true)

						this.container.container.MONOCHROME_MODE.show(true)
					</function>
					<function id="onStopFastTurnPage">
						this.container.container.MONOCHROME_FRAME.show(false)
						this.container.container.MONOCHROME_CONTENT.show(false)
						this.container.container.MONOCHROME_HEADWORD.show(false)
						this.container.container.MONOCHROME_SIZE.show(false)
						this.container.container.MONOCHROME_MODE.show(false)
						this.container.PANEL_DIC_FRAME_TOP.show(false)

						this.container.container.KBOOKSTATUS.show(true)
						this.container.PANEL_DIC_FRAME.show(true)
						this.container.PANEL_DIC_HEADWORD.show(true)
						this.container.DICTITLE.show(true)
						this.container.BTN_DICEDIT.show(true)
						this.container.BTN_CLOSE.show(true)
					</function>
					<function id="getCurrentID">
						return this.container.container.MONOCHROME_MODE.getCurrentID()
					</function>
					<function id="getDrawnID">
						return this.container.container.MONOCHROME_MODE.getDrawnID()
					</function>
				</code>
			</kbookDictionaryViewer>
		</group>
		<kbookIndicator id="SIZE" skin="sizeIndicator" left="90" height="30" bottom="0" variable="VAR_BOOK_SIZE"/>
		<monochrome id="MONOCHROME_FRAME" left="0" right="0" top="0" bottom="0" visible="false"/>
		<monochrome id="MONOCHROME_CONTENT" left="0" right="0" top="0" bottom="0" visible="false"/>
		<monochrome id="MONOCHROME_HEADWORD" bottom="0" left="0" width="0" height="0" visible="false"/>
		<monochrome id="MONOCHROME_SIZE" left="0" right="0" top="0" bottom="0" visible="false"/>
		<eInkPanel id="MONOCHROME_MODE" mode="sync" frame="true" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookOverlay>

	<kbookOverlay id="DICTIONARY_EDITOR_OVERLAY"  left="0" right="0" top="0" bottom="0" visible="false" href="x-id://pageDictionaryEditorOverlayModel">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_KEYBUF_DIC" value="" />
			<variable id="VAR_OPEN_DIC_EDIT_FLAG" value="false"/>
			<variable id="VAR_UPDATE" value="false"/>
			<variable id="VAR_UPDATEBTN" value="false"/>
			<variable id="VAR_PAGENUM" value="" />
			<variable id="VAR_DIC_TITLE" value="" />
			<variable id="VAR_BOOK_SIZE" value="0"/>
			<variable id="VAR_DIC_TEXT_SIZE" value="10"/>
			<variable id="VAR_DIC_LINE_HEIGHT" value="35"/>
		</model>
		<code>
			<function id="getKeyboardObj"><![CDATA[
				//var orientation = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V");
				//var id=(orientation=="H"?"KEYBOARD_H":"KEYBOARD_V");
				//var keyboard = this[id];
				//return keyboard;
				return this.KEYBOARD
			]]></function>
			<function id="beforeOpenDicEditor"><![CDATA[
				var model=this.getModel();
				
				var words=model.getVariable("VAR_KEYBUF");
				var keyboard = this.getKeyboardObj();

				var settings = this.getVariable("keyboard")

				keyboard.initBuffer(words,"strExisted",false);
				
				model.setVariable("VAR_OPEN_DIC_EDIT_FLAG", true);
				
				var dict = this.getDict();
				if (dict) {
					var title = dict.getTitle();
					if (title)
						model.setVariable("VAR_DIC_TITLE", title)
				}
				this.updatePageNo();
			]]></function>
			<function id="beforeCloseDicEditor"><![CDATA[
				var model=this.getModel();
				model.setVariable("VAR_OPEN_DIC_EDIT_FLAG", false);
			]]></function>
			<function id="canDicPageBack"><![CDATA[
				var dict = this.getDict();
				return dict.canPrev();
			]]></function>
			<function id="canDicPageForw"><![CDATA[
				var dict = this.getDict();
				return dict.canNext();
			]]></function>
			
			<function id="canDicExit"><![CDATA[
				return true;
			]]></function>
			<function id="doDicPageBack"><![CDATA[
				var dict = this.getDict();
				dict.doPrev();
				this.updatePageNo()
			]]></function>
			<function id="doDicPageForw"><![CDATA[
				var dict = this.getDict();
				dict.doNext();
				this.updatePageNo()
			]]></function>
			<function id="doSelChanged2" params="offset, length">
				var keyboard = this.getKeyboardObj();
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				//trace("doSelChanged1: offset="+offset+" length="+length+"\n");
				keyboard.doSelChanged(offset,length,words,false);
				
				var model=this.model;
				if(model.VAR_OPEN_DIC_EDIT_FLAG) {
					if (words != model.VAR_KEYBUF_DIC) {
						model.setVariable("VAR_KEYBUF_DIC", words);
						model.doSearch(words);
						//var orientation = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V");
						//orientation=="V"?this.KEYBOARD_V.setVariable("VIEW", "LIST"):this.KEYBOARD_H.setVariable("VIEW", "LIST")
						this.KEYBOARD.setVariable("VIEW", "LIST")
					}
				}
			</function>
			<function id="doOverflow" params="text">
				this.bubble("doBlink");
			</function>
			<function id="doNext"><![CDATA[
				if (this.canDicPageForw()) {
					this.doDicPageForw();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doPrevious"><![CDATA[
				if (this.canDicPageBack()) {
					this.doDicPageBack();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doOption"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSearch"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSize"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					//trace("DICTIONARY_EDITOR:variableChanged:"+id+"="+value+"\n");
					this.show(value);
					this.KEYBOARD_MODE.show(value)
					if(value) {
						var keyboard = this.getKeyboardObj();
						keyboard.KEYBUF.focus(value);
					}
				}else if (id == "VAR_DIC_TEXT_SIZE") {
					var dict = this.getDict()
					dict.setTextSize(value);
				}else if(id == "VAR_DIC_LINE_HEIGHT"){
					var dict = this.getDict()
					dict.setLineHeight(value);
				}
			</function>
			<function id="getDict"><![CDATA[
				//var model = this.model
				//var orientation = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V");
				//var dict = (orientation=="V"?this.KEYBOARD_V.DICT:this.KEYBOARD_H.DICT)
				//return dict;
				return this.KEYBOARD.DICT
			]]></function>
			<function id="updatePageNo"><![CDATA[
				var model = this.model
				var dict = this.getDict()
				var offs = dict.getOffset()
				var count = dict.countRecords()
				var lineCount = dict.getLineCount()
				if (count>0) {
					var page = Math.floor(offs / lineCount) + 1
					var total = Math.floor( (count + lineCount - 1) / lineCount)
					if (count>100) {
						model.setVariable("VAR_PAGENUM",">100 "+"fskin:/l/strings/STR_UI_DICTIONARY_ENTRIES_PAGE".idToString()+" "+ page+"/"+total)
					} else if (count==1) {
						model.setVariable("VAR_PAGENUM","1 "+"fskin:/l/strings/STR_UI_DICTIONARY_ENTRY_PAGE".idToString()+" "+ page+"/"+total)
					} else {
						model.setVariable("VAR_PAGENUM",count+" "+"fskin:/l/strings/STR_UI_DICTIONARY_ENTRIES_PAGE".idToString()+" "+ page+"/"+total)
					}
				} else {
					model.setVariable("VAR_PAGENUM","0 "+"fskin:/l/strings/STR_UI_DICTIONARY_ENTRY_PAGE".idToString()+" --- / ---")
				}
				model.setVariable("VAR_UPDATE", false)
				model.setVariable("VAR_UPDATE", true)
			]]></function>
			
		</code>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<keyboard id="KEYBOARD" left="0" right="0" top="0" bottom="30">
			<model>
				<variable id="VIEW" value="LIST"/>
			</model>
			<exPanel  skin="dic_frame"	left="0" right="0" top= "0" bottom="202" playing="match"/>
			<label skin="label-dicTitle" top="12" left="7" right="56" height="32" align="left" variable="VAR_DIC_TITLE"/>
			<button2icon skin="keyClose" right="7" top="7" width="42" height="42" do="doDicEditorClose" can="canDicExit"/>
			<kbookDictionaryViewer skin="dic_viewer" id="DICT" bgColor="#FFFFFFFF" lineHeight="VAR_DIC_LINE_HEIGHT" textSize="VAR_DIC_TEXT_SIZE" left="10" right="10" top="60" bottom="262" href="x-id://dictionaryData">
					<views variable="VIEW" list="LIST"/>
			</kbookDictionaryViewer>
			<limitedField skin="dictionaryInput" id="KEYBUF" left="14" right="336" bottom="210" height="42" doSelectionChanged="doSelChanged2" variable="VAR_KEYBUF" visible="true" active="true"/>
			<button2icon skin="dicPagePrev" right="71" bottom="209" width="57" height="42" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doDicPageBack" can="canDicPageBack"/>
			<button2icon skin="dicPageNext" right="7" bottom="209" width="57" height="42" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doDicPageForw" can="canDicPageForw"/>
			<label skin="label-dicPageNo" bottom="217" right="136" width="200" height="26" align="right" variable="VAR_PAGENUM"/>
			<keyLayout id="KEYLAYOUT" left="0" right="0" height="202" bottom="0" ignore="Return Entr&#233;e Enter"  skin="keyW_H" href="dictionaryKeyboardLayout.xml">
				<code>
					<function id="registerKey" params="key, bounds">
						this.container.container.KEYBOARD_MODE.register(key, bounds)
					</function>
					<function id="unregisterKey" params="key">
						this.container.container.KEYBOARD_MODE.unregister(key)
					</function>
				</code>
			</keyLayout>
		</keyboard>
		<kbookIndicator skin="sizeIndicator" left="90" height="30" bottom="0" variable="VAR_BOOK_SIZE"/>
		<eInkPanelKeyboard id="KEYBOARD_MODE" left="0" right="0" top="0" bottom="0" visible="false"/>

	</kbookOverlay>

	<kbookOverlay id="MARKUP_THUMBNAIL_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="getThumbnaiImage"><![CDATA[
				return this.MARKUP_THUMBNAIL_IMAGE;
			]]></function>
			<function id="doNext"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doPrevious"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doOption"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSearch"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSize"><![CDATA[
				this.bubble("doBlink");
			]]></function>
		</code>
		<focusBounds skin="background" left ="0" right="0" top="0" bottom="0" visible="true"/>
		<image id="MARKUP_THUMBNAIL_IMAGE" width="115" height="149" do="doMarkupThumbnailSelect"/>
		<exButton skin="optClose" right="192" width="42" height="42" top="306" do="doMarkupThumbnailClose" playing="V"/>
		<exButton skin="optClose" right="292" width="42" height="42" top="206" do="doMarkupThumbnailClose" playing="H"/>
	</kbookOverlay> 

	<kbookOverlay id="OPTION_OVERLAY_PAGE_DIRECTJUMP" left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_UPDATEBTN" value="false"/>
		</model>
		<code>
			<function id="getKeyboardObj"><![CDATA[
				var orientation = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V");
				var id=(orientation=="H"?"DIRECT_JUMP_H":"DIRECT_JUMP_V");
				var keyboard = this[id].KEYBOARD;
				return keyboard;
			]]></function>
			<function id="beforeOpenDirectJump"><![CDATA[
				//debugger;
				var model=this.getModel();
				model.setVariable("VAR_KEYBUF","");
				var keyboard = this.getKeyboardObj();
				var str = model.getVariable("VAR_KEYBUF");
				//var field = keyboard.KEYBUF;
				//field.setValue(str);
				keyboard.initBuffer(str,"strExisted",true);
			]]></function>
			<function id="canGoBtn"><![CDATA[
				var keyboard = this.getKeyboardObj();
				//trace(" DIRECTJUMP: canGoBtn="+keyboard.btnState+"\n");
				return keyboard.btnState;
			]]></function>
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					//trace("DIRECT_JUMP:variableChanged:"+id+"="+value+"\n");
					this.show(value);
					this.KEYBOARD_MODE.show(value)
					if(value) {
						var keyboard = this.getKeyboardObj();
						keyboard.KEYBUF.focus(value);
					}
				}
			</function>
		</code>
		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right="159" width="42" height="42" bottom="591" do="doDirectJumpClose" playing="V"/>
		<exButton skin="optClose" 		right="211" width="42" height="42" top="70" do="doDirectJumpClose" playing="H"/>
		<exGroup id="DIRECT_JUMP_V"  width="282" height="430" bottom="155" visible="true" active="true" playing="V">
			<keyboard id="KEYBOARD" left="0" right="0" top="0" bottom="0">
				<panel skin="jumpDialog" left="0" right="0" top="0" bottom="0" active="true"/>
				<limitedField skin="direct-text" id="KEYBUF" left="24" right="24" top="24" height="48" variable="VAR_KEYBUF" visible="true" active="true"/>
				<!--button2icon text="Go" bottom="20" height="58" right="20" left="20" skin="keyG_HBIG" variableUpdate="VAR_UPDATEBTN" can="canGoBtn"-->
				<button2icon text="fskin:/l/strings/STR_UI_BUTTON_GO" bottom="20" height="58" right="20" left="20" skin="keyG_HBIG" variableUpdate="VAR_UPDATEBTN" can="canGoBtn">
					<code>
						<function id="click">
							var keybuf = this.container.KEYBUF;
							var number = keybuf.getValue();
							this.getModel().execDirectJump(number);
						</function>
					</code>
				</button2icon>
				<keyLayout left="20" right="20" top="92" height="244"  type="NUMBERS" skin="keyW_HBIG" href="numberKeyboardLayout.xml">
					<code>
						<function id="registerKey" params="key, bounds">
							this.container.container.container.KEYBOARD_MODE.register(key, bounds)
						</function>
						<function id="unregisterKey" params="key">
							this.container.container.container.KEYBOARD_MODE.unregister(key)
						</function>
					</code>
				</keyLayout>
			</keyboard>
		</exGroup>
		<exGroup id="DIRECT_JUMP_H"  width="282" height="430" bottom="70" visible="true" active="true" playing="H">
			<keyboard id="KEYBOARD" left="0" right="0" top="0" bottom="0">
				<panel skin="jumpDialog" left="0" right="0" top="0" bottom="0" active="true"/>
				<limitedField skin="direct-text" id="KEYBUF" left="24" right="24" top="24" height="48" variable="VAR_KEYBUF" visible="true" active="true"/>
				<!--button2icon text="Go" bottom="20" height="58" right="20" left="20" skin="keyG_HBIG" variableUpdate="VAR_UPDATEBTN" can="canGoBtn"-->
				<button2icon text="fskin:/l/strings/STR_UI_BUTTON_GO" bottom="20" height="58" right="20" left="20" skin="keyG_HBIG" variableUpdate="VAR_UPDATEBTN" can="canGoBtn">
					<code>
						<function id="click">
							var keybuf = this.container.KEYBUF;
							var number = keybuf.getValue();
							this.getModel().execDirectJump(number);
						</function>
					</code>
				</button2icon>
				<keyLayout left="20" right="20" top="92" height="244"  type="NUMBERS" skin="keyW_HBIG" href="numberKeyboardLayout.xml">
					<code>
						<function id="registerKey" params="key, bounds">
							this.container.container.container.KEYBOARD_MODE.register(key, bounds)
						</function>
						<function id="unregisterKey" params="key">
							this.container.container.container.KEYBOARD_MODE.unregister(key)
						</function>
					</code>
				</keyLayout>
			</keyboard>
		</exGroup>
		<eInkPanelKeyboard id="KEYBOARD_MODE" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_PAGE" left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="doCmtPageForw"><![CDATA[
				var content = this.getModel().container.findContent("OPTION_OVERLAY_PAGE");
				content.getModel().closeCurrentOverlay();

				var content = this.getModel().container.findContent("OPTION_OVERLAY_PAGE_2");
				content.setURI("x-id://pageOptionOverlayModel");
				this.getModel().doOption();
			]]></function>
		</code>

		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "67" width="42" height="42" bottom="585" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="119" width="42" height="42" bottom="539" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU"  width="466" height="518" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel  skin="opt_frame"													left="0" right="0" top= "0" bottom="0" playing="match"/>
			<exButton skin="optGoToPage" textresource="STR_UI_MENU_GOTOPAGE"			left="8" right="5" top="8" height="58" do="doGoToPage"/>
			<exLine   skin="optSpaceSmall" 												left="0" right="0" top="66" height="2"/>
			<exButton skin="optHistory" textresource="STR_UI_MENU_HISTORYJUMP"			left="8" right="5" top="68" height="58" do="doHistoricalMode"/>
			<exLine   skin="optSpaceSmall" 												left="0" right="0" top="126" height="2" playing="hasTOC"/>
			<exButton skin="optTOC" textresource="STR_UI_MENU_TABLEOFCONTENTS"			left="8" right="5" top="128" height="58" do="doGoToToc" playing="hasTOC"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="186" height="8"/>
			<exButton skin="optSearch" textresource="STR_UI_MENU_SEARCHAKEYWORD"		left="8" right="5" top="194" height="58" do="doSearch" playing="item"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="252" height="8"/>
			<exButton skin="optEditNotes" textresource="STR_UI_MENU_CREATEEDITNOTES"	left="8" right="5" top="260" height="58" do="doEditNotes" playing="toolbar"/>
			<exLine   skin="optSpaceSmall" 												left="0" right="0" top="318" height="2" playing="toolbar,note"/>
			<exButton skin="optShowHideNotes" textresource="STR_UI_MENU_SHOWNOTES"		left="8" right="5" top="320" height="58" do="doShowHideNotes" playing="toolbar,note"
				onoff="VAR_ShowNotes,fskin:/l/strings/STR_UI_MENU_HIDENOTES,fskin:/l/strings/STR_UI_MENU_SHOWNOTES"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="378" height="8" playing="toolbar"/>
			<exButton skin="optCloseBook" textresource="STR_UI_MENU_CLOSETHISBOOK"		left="8" right="5" top= "386" height="58" do="doMenuClose"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="444" height="8"/>
			<exButton skin="dicMenuNext"												left="8" right="5" bottom="8" height="58" do="doCmtPageForw"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_PAGE_2" left="0" right="0" top="0" bottom="30" visible="false">

		<code>
			<function id="doOption">
				this.getModel().doCloseOptMenu();
				var content = this.getModel().container.findContent("OPTION_OVERLAY_PAGE");
				content.setURI("x-id://pageOptionOverlayModel");
			</function>
			<function id="doCmtPageBack"><![CDATA[
				var content = this.getModel().container.findContent("OPTION_OVERLAY_PAGE_2");
				content.getModel().closeCurrentOverlay();
				var content = this.getModel().container.findContent("OPTION_OVERLAY_PAGE");
				content.setURI("x-id://pageOptionOverlayModel");
				this.getModel().doOption();
			]]></function>
			<function id="doCloseOptMenu"><![CDATA[
				this.getModel().doCloseOptMenu();
				var content = this.getModel().container.findContent("OPTION_OVERLAY_PAGE");
				content.setURI("x-id://pageOptionOverlayModel");
			]]></function>
			<function id="doGoToNowPlaying"><![CDATA[
				var content = this.getModel().doGoToNowPlaying();
				var content = this.getModel().container.findContent("OPTION_OVERLAY_PAGE");
				content.setURI("x-id://pageOptionOverlayModel");
			]]></function>
			<function id="doOrientation"><![CDATA[
				var content = this.getModel().doOrientation();
				var content = this.getModel().container.findContent("OPTION_OVERLAY_PAGE");
				content.setURI("x-id://pageOptionOverlayModel");
			]]></function>
		</code>

		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "67" width="42" height="42" bottom="405" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="119" width="42" height="42" bottom="359" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU"  width="466" height="338" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel  skin="opt_frame"													left="0" right="0" top= "0" bottom="0" playing="match"/>
			<exButton skin="dicMenuPrev" 												left="8" right="5" top= "8" height="58" do="doCmtPageBack"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="66" height="8"/>
			<exButton skin="optDelBook" textresource="STR_UI_MENU_DELETEBOOK"			left="8" right="5" top= "74" height="58" do="doDelBook"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="132" height="8"/>
			<exButton skin="optBookInfo" textresource="STR_UI_MENU_BOOKINFO"			left="8" right="5" top="140" height="58" do="doViewBookInfo"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="198" height="8" playing="item"/>
			<exButton skin="optNowPlaying" textresource="STR_UI_MENU_NOWPLAYING"		left="8" right="5" top="206" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="264" height="8" playing="audio"/>
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"		left="8" right="5" top="272" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_PAGE_JUMPBAR"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_JUMP_SLIDER" value="0" />
			<variable id="VAR_UPDATEBTN" value="false"/>
		</model>
		<group id="JUMPBAR_AREA" left="0" right="0" bottom="0" height="128" visible="true" active="true">
			<code>
				<function id="canLine">
					return false
				</function>
				<function id="canLineAndHold">
					return false
				</function>
			</code>
			<panel skin="jumpBack" left="0" right="0" top="0" bottom="0" active="true"/>
			<button2icon skin="fontClose" 	right="10" top="12" width="50" height="50" bw="4" do="doJumpBarClose"/>

			<button2icon id="DirectJumpButtonNormal" skin="keyDirect"	left= "11" top="12" width="222" height="50" text="fskin:/l/strings/STR_UI_BUTTON_ENTERPAGE"  do="doDirectJump" bw="4" visible="false" active="false"/>
			<button2icon id="DirectJumpButtonLarge" skin="keyDirect"	left= "11" top="12" width="340" height="50" text="fskin:/l/strings/STR_UI_BUTTON_ENTERPAGE"  do="doDirectJump" bw="4" visible="false" active="false"/>
			<slider id="jumpSlider"		left= "14" top="72" right="14" variable="VAR_JUMP_SLIDER" skin="jumpBar" axis="x" min="0" max="1000" do="jumpBarDo" track="jumpBarTrack"/>
		</group>
	</kbookOverlay>

	<!-- [[[[[ -->
	<!-- @note already define model at kbookOverlayModel(x-id://pageOptionHistoricalOverlayModel) -->
	<kbookOverlay id="OPTION_OVERLAY_PAGE_HISTORICAL"  left="0" right="0" bottom="30" top="0" visible="false">
		<model>
			<variable id="VAR_UPDATEBTN" value="false"/>
		</model>

		<code>
			<function id="doNext">
				this.getModel().doNext();
			</function>

			<function id="doPrevious">
				this.getModel().doPrevious();
			</function>

			<function id="canLine">
				return true
			</function>

			<function id="doLine" params="dir">
				var settings = this.getVariable("gestureDirectionFlag")
				dir = settings ? (dir == Gesture.leftDirection ? Gesture.rightDirection : Gesture.leftDirection) : dir 
				if (dir == Gesture.leftDirection)
					this.doPrevious()
				else if (dir == Gesture.rightDirection)
					this.doNext()
			</function>

			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
		</code>

		<button2icon skin="historyBackward" width="92" height="42" left="8" bottom="10" visible="true" active="true" do="doHistoryBack" beforeClick="onMouseDown" afterClick="onMouseUp" variableUpdate="VAR_UPDATEBTN" can="canHistoryBack">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
		<button2icon skin="historyForward" width="92" height="42" right="8" bottom="10" visible="true" active="true" do="doHistoryForw" beforeClick="onMouseDown" afterClick="onMouseUp" variableUpdate="VAR_UPDATEBTN" can="canHistoryForw">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
		<button2icon skin="historyClose" width="42" height="42" right="8" top="8" bw="4" visible="true" active="true" do="doHistoricalClose">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
	</kbookOverlay>
	<!-- ]]]]] -->

	<kbookOverlay id="OPTION_OVERLAY_HOME" left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="doRoot">
				var state = this.getVariable("STATE");
				if ( state == "MENU_HOME" ) {
					this.getModel().doCloseOptMenu();
				} else {
					this.container.bubble("doRoot")
				}
			</function>
		</code>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "77" width="42" height="42" bottom="275" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="129" width="42" height="42" bottom="227" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU"  width="446" height="206" bottom="63" moveY_H="40" visible="true"  active="true">
			<exPanel  skin="opt_frame"												left="0" right="0" top="0" bottom="0" playing="match"/>/>
			<exButton skin="optSearch" textresource="STR_UI_MENU_SEARCHTITLE"		left="8" right="5" top="8" height="58" do="doSearch" playing="item"/>
			<exLine   skin="optSpaceBig" 											left="0" right="0" top="66" height="8" playing="item"/>
			<exButton skin="optNowPlaying" textresource="STR_UI_MENU_NOWPLAYING"	left="8" right="5" top="74" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 											left="0" right="0" top="132" height="8" playing="audio"/>
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"	left="8" right="5" top="140" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_HOME_NOSEARCH" left="0" right="0" top="0" bottom="30" visible="false">
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "77" width="42" height="42" bottom="209" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="129" width="42" height="42" bottom="161" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU"  width="446" height="140" bottom="63" moveY_H="40" visible="true"  active="true">
			<exPanel  skin="opt_frame"													left="0" right="0" top= "0" bottom="0" playing="match"/>/>
			<exButton skin="optNowPlaying" textresource="STR_UI_MENU_NOWPLAYING"		left="8" right="5" top="8" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="66" height="8" playing="audio"/>
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"		left="8" right="5" top="74" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_AUDIO"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_Repeat" value="off"/>
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "42" width="42" height="42" bottom="527" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="94" width="42" height="42" bottom="479" do="doCloseOptMenu" playing="H"/>

		<exGroup id="OPT_MENU" width="516" height="458" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"									left=  "0" right="0" top=  "0" bottom="0"/>
			<label skin="opt_labelItem" text="fskin:/l/strings/STR_UI_AUDIO_REPEAT"		left=  "0"           top= "8" height="58" width="157"/>
			<exRadio skin="optRadioRepeatOff" textresource="STR_UI_MENU_OFF"			left="157" right="5" top= "8" height="58" on="off"  variable="VAR_Repeat" do="doRepeatOff"/>
			<exLine  skin="optSpaceSmall2" 												left="125" right="0" top="66" height="2"/>
			<exRadio skin="optRadioRepeatASong" textresource="STR_UI_MENU_SONG_1"		left="157" right="5" top="68" height="58" on="song" variable="VAR_Repeat" do="doRepeatASong"/>
			<exLine  skin="optSpaceSmall2" 												left="125" right="0" top="126" height="2"/>
			<exRadio skin="optRadioRepeatAllSongs" textresource="STR_UI_MENU_SONG_ALL"	left="157" right="5" top="128" height="58" on="allSongs"   variable="VAR_Repeat" do="doRepeatAllSongs"/>
			<exLine  skin="optSpaceBig" 												left=  "0" right="0" top="186" height="8"/>
			<exButton skin="optShuffleOnOff" textresource="STR_UI_MENU_SHUFFLEON"		left=  "8" right="5" top="194" height="58" do="doShuffleOnOff"
				onoff="VAR_Shuffle,fskin:/l/strings/STR_UI_MENU_SHUFFLEOFF,fskin:/l/strings/STR_UI_MENU_SHUFFLEON"/>
			<exLine  skin="optSpaceBig" 												left=  "0" right="0" top="252" height="8" playing="reading"/>
			<exButton skin="optGoToReading" textresource="STR_UI_MENU_CONTINUEREADING"	left=  "8" right="5" top="260" height="58" do="doGoToReading" playing="reading"/>
			<exLine   skin="optSpaceBig" 												left=  "0" right="0" top="318" height="8"/>
			<exButton skin="optCloseBook" textresource="STR_UI_MENU_CLOSETHISMUSIC"		left=  "8" right="5" top="326" height="58" do="doMenuClose"/>
			<exLine   skin="optSpaceBig" 												left=  "0" right="0" top="384" height="8"/>
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"		left=  "8" right="5" top="392" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_PICTURE"  left="0" right="0" top="0" bottom="30" visible="false">
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "77" width="42" height="42" bottom="341" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="129" width="42" height="42" bottom="293" do="doCloseOptMenu" playing="H"/>

		<exGroup id="OPT_MENU" width="446" height="272" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"			left="0"   right="0" top="0" bottom="0"/>
			<exButton skin="optSlideshowOnOff" textresource="STR_UI_MENU_SLIDESHOWOFF"	left="8" right="5" top="8"  height="58" do="doSlideshowOnOff"
				onoff="VAR_Slideshow,fskin:/l/strings/STR_UI_MENU_SLIDESHOWOFF,fskin:/l/strings/STR_UI_MENU_SLIDESHOWON"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="66"  height="8"/>
			<exButton skin="optCloseBook" textresource="STR_UI_MENU_CLOSETHISPICTURE"	left="8" right="5" top= "74"  height="58" do="doMenuClose"/>
			<exLine  skin="optSpaceBig" 												left="0" right="0" top="132" height="8" playing="audio"/>
			<exButton skin="optNowPlaying" textresource="STR_UI_MENU_NOWPLAYING"		left="8" right="5" top="140" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 												left="0" right="0" top="198" height="8"/>
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"		left="8" right="5" top="206" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_BOOKLIST"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "77" width="42" height="42" bottom="647" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="129" width="42" height="42" bottom="599" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU" width="446" height="578" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"								left="0"   right="0" top="0" bottom="0"/>
			<exLabel skin="opt_labelItem" text="fskin:/l/strings/STR_UI_MENU_SORT"	left= "0"            top=  "8" height="58" width="157" playing="item,noReduce"/>
			<exRadio skin="optRadioTitle" textresource="STR_UI_MENU_BYORDER" 		left="157" right="5" top=  "8" height="58" on="order" variable="VAR_RADIO_SORT" do="doSortOrder" playing="item,!collection"/>
			<exLine  skin="optSpaceSmall2" 											left="125" right="0" top= "66" height="2" playing="item,!collection"/>
			<exRadio skin="optRadioAuthor" textresource="STR_UI_MENU_BYTITLE"		left="157" right="5" top= "68" height="58" on="title" variable="VAR_RADIO_SORT" do="doSortTitle" playing="item"/>
			<exLine  skin="optSpaceSmall2" 											left="125" right="0" top="126" height="2" playing="item"/>
			<exRadio skin="optRadioDate" textresource="STR_UI_MENU_BYAUTHOR"		left="157" right="5" top="128" height="58" on="author"   variable="VAR_RADIO_SORT" do="doSortAuthor" playing="item"/>
			<exLine  skin="optSpaceSmall2" 											left="125" right="0" top="186" height="2" playing="item"/>
			<exRadio skin="optRadioDate" textresource="STR_UI_MENU_BYDATE"			left="157" right="5" top="188" height="58" on="date"   variable="VAR_RADIO_SORT" do="doSortDate" playing="item"/>
			<exLine  skin="optSpaceBig" 											left=  "0" right="0" top="246" height="8" playing="item"/>
			<exLabel skin="opt_labelItem"	text="fskin:/l/strings/STR_UI_MENU_VIEW" left= "0"           top="254" height="58" width="157" playing="item,noReduce"/>
			<exRadio skin="optRadioDetails" textresource="STR_UI_MENU_LIST"			left="157" right="5" top="254" height="58" on="details"    variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
			<exLine  skin="optSpaceSmall2" 											left="125" right="0" top="312" height="2" playing="item"/>
			<exRadio skin="optRadioThumbnail" textresource="STR_UI_MENU_THUMBNAIL"	left="157" right="5" top="314" height="58" on="thumbnail" variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
			<exLine  skin="optSpaceBig" 											left=  "0" right="0" top="372" height="8" playing="item"/>
			<exButton skin="optSearch" textresource="STR_UI_MENU_SEARCHTITLE"		left=  "8" right="5" top="380" height="58" do="doSearch" playing="item"/>
			<exLine   skin="optSpaceBig" 											left=  "0" right="0" top="438" height="8" playing="item"/>
			<exButton skin="optNowPlaying" textresource="STR_UI_MENU_NOWPLAYING"	left=  "8" right="5" top="446" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 											left=  "0" right="0" top="504" height="8" playing="audio"/>
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"	left=  "8" right="5" top="512" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_COLLECTION_CONTENTS"  left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="doCmtPageForw"><![CDATA[
				var content = this.getModel().container.findContent("OPTION_OVERLAY_COLLECTION_CONTENTS");
				content.getModel().closeCurrentOverlay();

				var content = this.getModel().container.findContent("OPTION_OVERLAY_COLLECTION_CONTENTS_2");
				content.setURI("x-id://commonOptionOverlayModel");
				this.getModel().doOption();
			]]></function>
		</code>

		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "62" width="42" height="42" bottom="703" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="114" width="42" height="42" bottom="657" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU" width="476" height="636" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"								left="0"   right="0" top="0" bottom="0"/>
			<exLabel skin="opt_labelItem" text="fskin:/l/strings/STR_UI_MENU_SORT"	left= "0"            top=  "8" height="58" width="157" playing="item,noReduce"/>
			<exRadio skin="optRadioTitle" textresource="STR_UI_MENU_BYORDER" 		left="157" right="5" top=  "8" height="58" on="order" variable="VAR_RADIO_SORT" do="doSortOrder" playing="item,!collection"/>
			<exLine  skin="optSpaceSmall2" 											left="125" right="0" top= "66" height="2" playing="item,!collection"/>
			<exRadio skin="optRadioAuthor" textresource="STR_UI_MENU_BYTITLE"		left="157" right="5" top= "68" height="58" on="title" variable="VAR_RADIO_SORT" do="doSortTitle" playing="item"/>
			<exLine  skin="optSpaceSmall2" 											left="125" right="0" top="126" height="2" playing="item"/>
			<exRadio skin="optRadioDate" textresource="STR_UI_MENU_BYAUTHOR"		left="157" right="5" top="128" height="58" on="author"   variable="VAR_RADIO_SORT" do="doSortAuthor" playing="item"/>
			<exLine  skin="optSpaceSmall2" 											left="125" right="0" top="186" height="2" playing="item"/>
			<exRadio skin="optRadioDate" textresource="STR_UI_MENU_BYDATE"			left="157" right="5" top="188" height="58" on="date"   variable="VAR_RADIO_SORT" do="doSortDate" playing="item"/>
			<exLine  skin="optSpaceBig" 											left=  "0" right="0" top="246" height="8" playing="item"/>
			<exLabel skin="opt_labelItem" text="fskin:/l/strings/STR_UI_MENU_VIEW"	left= "0"            top="254" height="58" width="157" playing="item,noReduce"/>
			<exRadio skin="optRadioDetails" textresource="STR_UI_MENU_LIST"			left="157" right="5" top="254" height="58" on="details"    variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
			<exLine  skin="optSpaceSmall2" 											left="125" right="0" top="312" height="2" playing="item"/>
			<exRadio skin="optRadioThumbnail" textresource="STR_UI_MENU_THUMBNAIL"	left="157" right="5" top="314" height="58" on="thumbnail" variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
			<exLine  skin="optSpaceBig" 											left=  "0" right="0" top="372" height="8" playing="item"/>
			<exButton skin="optSearch" textresource="STR_UI_MENU_SEARCHTITLE"		left=  "8" right="5" top="380" height="58" do="doSearch" playing="item"/>
			<exLine   skin="optSpaceBig" 											left=  "0" right="0" top="438" height="8" playing="item"/>

			// when no item
			<exButton skin="optNowPlaying" textresource="STR_UI_MENU_NOWPLAYING"	left="8" right="5" top="446" height="58" do="doGoToNowPlaying" playing="audioNotItem"/>
			<exLine   skin="optSpaceBig" 											left="0" right="0" top="504" height="8" playing="audioNotItem" />
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"	left="8" right="5" top="512" height="58" do="doOrientation" playing="!item"/>

			<exButton skin="dicMenuNext"											left=  "8" right="5" bottom="8" height="58" do="doCmtPageForw" playing="item"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_COLLECTION_CONTENTS_2"  left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="doOption">
				this.getModel().doCloseOptMenu();
				var content = this.getModel().container.findContent("OPTION_OVERLAY_COLLECTION_CONTENTS");
				content.setURI("x-id://commonOptionOverlayModel");
			</function>
			<function id="doCmtPageBack"><![CDATA[
				var content = this.getModel().container.findContent("OPTION_OVERLAY_COLLECTION_CONTENTS_2");
				content.getModel().closeCurrentOverlay();
				var content = this.getModel().container.findContent("OPTION_OVERLAY_COLLECTION_CONTENTS");
				content.setURI("x-id://commonOptionOverlayModel");
				this.getModel().doOption();
			]]></function>
			<function id="doCloseOptMenu"><![CDATA[
				this.getModel().doCloseOptMenu();
				var content = this.getModel().container.findContent("OPTION_OVERLAY_COLLECTION_CONTENTS");
				content.setURI("x-id://commonOptionOverlayModel");
			]]></function>
			<function id="doGoToNowPlaying"><![CDATA[
				var content = this.getModel().doGoToNowPlaying();
			]]></function>
			<function id="doOrientation"><![CDATA[
				var content = this.getModel().doOrientation();
				var content = this.getModel().container.findContent("OPTION_OVERLAY_COLLECTION_CONTENTS");
				content.setURI("x-id://commonOptionOverlayModel");
			]]></function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "62" width="42" height="42" bottom="273" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="114" width="42" height="42" bottom="227" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU" width="476" height="206" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"								left="0" right="0" top="0" bottom="0"/>
			<exButton skin="dicMenuPrev" 											left="8" right="5" top= "8" height="58" do="doCmtPageBack"/>
			<exLine   skin="optSpaceBig" 											left="0" right="0" top="66" height="8"/>
			<exButton skin="optNowPlaying" textresource="STR_UI_MENU_NOWPLAYING"	left="8" right="5" top="74" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 											left="0" right="0" top="132" height="8" playing="audio"/>
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"	left="8" right="5" top="140" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_COLLECTION"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="date" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "77" width="42" height="42" bottom="273" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="129" width="42" height="42" bottom="227" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU" width="446" height="206" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"			left="0"   right="0" top="0" bottom="0"/>
			<exButton skin="optSearch" textresource="STR_UI_MENU_SEARCHAKEYWORD"	left="8" right="5" top="8" height="58" do="doSearch" playing="item"/>
			<exLine   skin="optSpaceBig" 						left="0" right="0" top="66" height="8" playing="item"/>
			<exButton skin="optNowPlaying" textresource="STR_UI_MENU_NOWPLAYING"	left="8" right="5" top="74" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 						left="0" right="0" top="132" height="8" playing="audio"/>
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"	left="8" right="5" top="140" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_PICTURELIST"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "77" width="42" height="42" bottom="461" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="129" width="42" height="42" bottom="413" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU" width="446" height="392" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"			left="0"   right="0" top="0" bottom="0"/>
			<exLabel skin="opt_labelItem" text="fskin:/l/strings/STR_UI_MENU_SORT"				left= "0"           top=  "8" height="58" width="157" playing="item,noReduce"/>
			<exRadio skin="optRadioTitle" textresource="STR_UI_MENU_BYTITLE"		left="157" right="5" top=  "8" height="58" on="title"  variable="VAR_RADIO_SORT" do="doSortTitle" playing="item"/>
			<exLine  skin="optSpaceSmall2" 						left="125" right="0" top= "66" height="2" playing="item"/>
			<exRadio skin="optRadioDate" textresource="STR_UI_MENU_BYDATE"			left="157" right="5" top= "68" height="58" on="date" variable="VAR_RADIO_SORT" do="doSortDate" playing="item"/>
			<exLine  skin="optSpaceBig" 						left=  "0" right="0" top="126" height="8" playing="item"/>
			<exLabel skin="opt_labelItem"	text="fskin:/l/strings/STR_UI_MENU_VIEW"				left= "0"           top="134" height="58" width="157" playing="item,noReduce"/>
			<exRadio skin="optRadioDetails" textresource="STR_UI_MENU_LIST"		left="157" right="5" top="134" height="58" on="details"    variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
			<exLine  skin="optSpaceSmall2" 						left="125" right="0" top="192" height="2" playing="item"/>
			<exRadio skin="optRadioThumbnail" textresource="STR_UI_MENU_THUMBNAIL"	left="157" right="5" top="194" height="58" on="thumbnail" variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
			<exLine  skin="optSpaceBig" 						left=  "0" right="0" top="252" height="8" playing="audioAndItem"/>
			<exButton skin="optNowPlaying" textresource="STR_UI_MENU_NOWPLAYING"	left=  "8" right="5" top="260" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 						left=  "0" right="0" top="318" height="8" playing="audioOrItem"/>
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"	left=  "8" right="5" top="326" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_AUDIOLIST"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "77" width="42" height="42" bottom="461" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="129" width="42" height="42" bottom="413" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU" width="446" height="392" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"			left="0"   right="0" top="0" bottom="0"/>
			<exLabel skin="opt_labelItem" text="fskin:/l/strings/STR_UI_MENU_SORT"				left= "0"           top=  "8" height="58" width="157" playing="item,noReduce"/>
			<exRadio skin="optRadioTitle" textresource="STR_UI_MENU_BYTITLE"		left="157" right="5" top=  "8" height="58" on="title"  variable="VAR_RADIO_SORT" do="doSortTitle" playing="item"/>
			<exLine  skin="optSpaceSmall2" 						left="125" right="0" top= "66" height="2" playing="item"/>
			<exRadio skin="optRadioArtist" textresource="STR_UI_MENU_BYARTIST"		left="157" right="5" top= "68" height="58" on="artist" variable="VAR_RADIO_SORT" do="doSortArtist" playing="item"/>
			<exLine  skin="optSpaceBig" 						left=  "0" right="0" top="126" height="8" playing="item"/>
			<exLabel skin="opt_labelItem"	text="fskin:/l/strings/STR_UI_MENU_VIEW"				left= "0"           top="134" height="58" width="157" playing="item,noReduce"/>
			<exRadio skin="optRadioDetails" textresource="STR_UI_MENU_LIST"		left="157" right="5" top="134" height="58" on="details"    variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
			<exLine  skin="optSpaceSmall2" 						left="125" right="0" top="192" height="2" playing="item"/>
			<exRadio skin="optRadioThumbnail" textresource="STR_UI_MENU_THUMBNAIL"	left="157" right="5" top="194" height="58" on="thumbnail" variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
			<exLine  skin="optSpaceBig" 						left=  "0" right="0" top="252" height="8" playing="audioAndItem"/>
			<exButton skin="optNowPlaying" textresource="STR_UI_MENU_NOWPLAYING"	left=  "8" right="5" top="260" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 						left=  "0" right="0" top="318" height="8" playing="audioOrItem"/>
			<exButton skin="optOrientation" textresource="STR_UI_MENU_ORIENTATION"	left=  "8" right="5" top="326" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_MYNOTES"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="date" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "67" width="42" height="42" bottom="527" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="119" width="42" height="42" bottom="479" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU" width="466" height="458" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"			left="0"   right="0" top="0" bottom="0"/>
			<exLabel skin="opt_labelItem" text="fskin:/l/strings/STR_UI_MENU_SORT"				left= "0"           top=  "8" height="58" width="157" playing="item,noReduce"/>
			<exRadio skin="optRadioDate" text="fskin:/l/strings/STR_UI_MENU_BYPAGE"			left="157" right="5" top=  "8" height="58" on="page"  variable="VAR_RADIO_SORT" do="doSortPage" playing="item"/>
			<exLine  skin="optSpaceSmall2" 						left="125" right="0" top= "66" height="2" playing="item"/>
			<exRadio skin="optRadioPage" text="fskin:/l/strings/STR_UI_MENU_BYTYPE"			left="157" right="5" top= "68" height="58" on="type" variable="VAR_RADIO_SORT" do="doSortType" playing="item"/>
			<exLine  skin="optSpaceSmall2" 						left="125" right="0" top="126" height="2" playing="item"/>
			<exRadio skin="optRadioType" text="fskin:/l/strings/STR_UI_MENU_BYCOMMENT"		left="157" right="5" top="128" height="58" on="text" variable="VAR_RADIO_SORT" do="doSortText" playing="item"/>
			<exLine  skin="optSpaceBig" 						left=  "0" right="0" top="186" height="8" playing="item"/>
			<exButton skin="optSearch" textresource="STR_UI_MENU_SEARCHTITLE"	left=  "8" right="5" top="194" height="58" do="doSearch" playing="item"/>
			<exLine  skin="optSpaceBig" 						left=  "0" right="0" top="252" height="8" playing="item"/>
			<exButton skin="optDelAllMyNotes" text="fskin:/l/strings/STR_UI_MENU_DELETENOTES" left="8" right="5" top="260" height="58" do="doDelAllMyNotes" playing="item"/>
			<exLine  skin="optSpaceBig" 						left=  "0" right="0" top="318" height="8" playing="item"/>
			<exButton skin="optNowPlaying" text="fskin:/l/strings/STR_UI_MENU_NOWPLAYING"	left="8" right="5" top="326" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 						left="0" right="0" top="384" height="8" playing="audio"/>
			<exButton skin="optOrientation" text="fskin:/l/strings/STR_UI_MENU_ORIENTATION"	left="8" right="5" top="392" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_ALLMYNOTES"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="date" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "67" width="42" height="42" bottom="461" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="119" width="42" height="42" bottom="411" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU" width="466" height="390" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"			left="0"   right="0" top="0" bottom="0"/>
			<exLabel skin="opt_labelItem" text="fskin:/l/strings/STR_UI_MENU_SORT"				left= "0"           top=  "8" height="58" width="157" playing="item,noReduce"/>
			<exRadio skin="optRadioDate" text="fskin:/l/strings/STR_UI_MENU_BYDATE"			left="157" right="5" top=  "8" height="58" on="date"  variable="VAR_RADIO_SORT" do="doSortDate" playing="item"/>
			<exLine  skin="optSpaceSmall2" 						left="125" right="0" top= "66" height="2" playing="item"/>
			<exRadio skin="optRadioType" text="fskin:/l/strings/STR_UI_MENU_BYTYPE"			left="157" right="5" top= "68" height="58" on="type" variable="VAR_RADIO_SORT" do="doSortType" playing="item"/>
			<exLine  skin="optSpaceSmall2" 						left="125" right="0" top="126" height="2" playing="item"/>
			<exRadio skin="optRadioText" text="fskin:/l/strings/STR_UI_MENU_BYCOMMENT"			left="157" right="5" top="128" height="58" on="text"   variable="VAR_RADIO_SORT" do="doSortText" playing="item"/>
			<exLine  skin="optSpaceBig" 						left=  "0" right="0" top="186" height="8" playing="item"/>
			<exButton skin="optSearch" textresource="STR_UI_MENU_SEARCHTITLE"	left=  "8" right="5" top="194" height="58" do="doSearch" playing="item"/>
			<exLine  skin="optSpaceBig" 						left=  "0" right="0" top="252" height="8" playing="item"/>
			<exButton skin="optNowPlaying" text="fskin:/l/strings/STR_UI_MENU_NOWPLAYING"	left=  "8" right="5" top="260" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 						left=  "0" right="0" top="318" height="8" playing="audio"/>
			<exButton skin="optOrientation" text="fskin:/l/strings/STR_UI_MENU_ORIENTATION"	left=  "8" right="5" top="324" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_NOTEPAD_FREEHAND" left="0" right="0" top="0" bottom="30" visible="false">
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "77" width="42" height="42" bottom="275" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="129" width="42" height="42" bottom="227" do="doCloseOptMenu" playing="H"/>

		<exGroup id="OPT_MENU" width="446" height="206" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"			left="0"   right="0" top="0" bottom="0"/>
			<exButton skin="optDelNotepad" text="fskin:/l/strings/STR_UI_MENU_DELETENOTEPAD_FREEHAND"	left="8" right="5" top="8"  height="58" do="doDelNotepad"/>
			<exLine  skin="optSpaceBig" 							left="0" right="0" top="66" height="8" playing="audio"/>
			<exButton skin="optNowPlaying" text="fskin:/l/strings/STR_UI_MENU_NOWPLAYING"		left="8" right="5" top="74" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 							left="0" right="0" top="132" height="8"/>
			<exButton skin="optOrientation" text="fskin:/l/strings/STR_UI_MENU_ORIENTATION"		left="8" right="5" top="140" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_NOTEPAD_TEXT" left="0" right="0" top="0" bottom="30" visible="false">
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exButton skin="optClose" 		right= "77" width="42" height="42" bottom="275" do="doCloseOptMenu" playing="V"/>
		<exButton skin="optClose" 		right="129" width="42" height="42" bottom="227" do="doCloseOptMenu" playing="H"/>
		<exGroup id="OPT_MENU" width="446" height="206" bottom="63" moveY_H="40" visible="true" active="true">
			<exPanel playing="match" skin="opt_frame"			left="0"   right="0" top="0" bottom="0"/>
			<exButton skin="optDelNotepad" text="fskin:/l/strings/STR_UI_MENU_DELETENOTEPAD_TEXT"	left="8" right="5" top="8"  height="58" do="doDelNotepad"/>
			<exLine  skin="optSpaceBig" 							left="0" right="0" top="66" height="8" playing="audio"/>
			<exButton skin="optNowPlaying" text="fskin:/l/strings/STR_UI_MENU_NOWPLAYING"		left="8" right="5" top="74" height="58" do="doGoToNowPlaying" playing="audio"/>
			<exLine   skin="optSpaceBig" 							left="0" right="0" top="132" height="8"/>
			<exButton skin="optOrientation" text="fskin:/l/strings/STR_UI_MENU_ORIENTATION"		left="8" right="5" top="140" height="58" do="doOrientation"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="FORMAT_ERROR_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://FormatErrorOverlayModel">
		<code>
			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
		</code>

		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<exGroup id="MESSAGE_AREA" top="0" width="420" height="190" visible="true" active="true">
			<exPanel  skin="opt_frame"								left="0" right="0" top= "0" bottom="0" playing="match"/>
			<!--kbookLabel skin="formatErrorMessage" left="0" right="0" top="40" height="44" align="center" variable="FORMAT_ERROR_MSG"/-->
			<kbookText skin="dialogTextCenter" active="false" left="15" right="15" top="40" height="100" variable="FORMAT_ERROR_MSG"/>
			<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="40" width="130" height="42" do="doCloseFormatError" />
		</exGroup>

	</kbookOverlay>

	<kbookOverlay id="DELETE_BOOKMARKS_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://pageDeleteBookmarksOverlayModel">
		<model>
			<variable id="VAR_DELETEBOOKMARK_MSG_1" value="" />
			<variable id="VAR_DELETEBOOKMARK_MSG_2" value="" />
		</model>
		<code>
			<function id="doOption">
				this.bubble("doBlink")
			</function>
			<function id="doSearch">
				this.bubble("doBlink")
			</function>
			<function id="doSize">
				this.bubble("doBlink")
			</function>
		</code>

		<focusBounds skin="background" left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<exGroup id="MESSAGE_AREA" width="446" height="256" top="0" visible="true" active="true">

			<exPanel  skin="opt_frame" left="0" right="0" top= "0" bottom="0" playing="match"/>

			<kbookText skin="dialogTextCenter" active="false" left="15" right="15" top="30" height="60" variable="VAR_DELETEBOOKMARK_MSG_1"/>

			<kbookText skin="dialogText" active="false" left="15" right="15" top="100" height="86" variable="VAR_DELETEBOOKMARK_MSG_2"/>

			<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" bottom="13" right="158" width="130" height="42" do="doYes" />
			<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" bottom="13" right="13" width="130" height="42" do="doNo" />
		</exGroup>
	</kbookOverlay>

	<kbookDialog id="CONFIRMATION_DIALOG" ok="OK" cancel="NO" left="0" right="0" top="0" bottom="30" visible="false" >
		<group width="446" height="186">
			<code>
				<function id="initialized">
					this.container.styles.push(this.YESNO_BUTTON);
					this.container.styles.push(this.OK_BUTTON);
				</function>
			</code>
			<text id="DIALOG" skin="text-dialog" active="false" variable="MSG" width="446" height="186" />
			<group id="YESNO_BUTTON" left="0" right="0" top="0" bottom="0">
				<!--button2 id="OK" skin="kbookDialogYesButton" bottom="13" right="158" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" /-->
				<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" bottom="13" right="158" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" />
				<!--button2 id="NO" skin="kbookDialogNOButton" bottom="13" right="13" width="130" height="42" do="doNO" /-->
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" bottom="13" right="13" width="130" height="42" do="doNO" />
			</group>
			<group id="OK_BUTTON" left="0" right="0" top="0" bottom="0">
				<!--button2 id="OK" skin="kbookDialogOKButton" bottom="13" right="13" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" /-->
				<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="13" right="13" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" />
			</group>
		</group>
	</kbookDialog>
	
	<kbookSimplePanel id="LOW_BATTERY_GROUP" skin="kbookDialog" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doMenu">
				this.doOK();
			</function>
			<function id="doRoot">
				this.doOK();
			</function>
			<function id="doOK">
				this.setVariable("LOW_BATTERY", 0);
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
			<function id="doNext">
				this.bubble("doBlink");
			</function>
			<function id="doPrevious">
				this.bubble("doBlink");
			</function>
		</code>
		<group width="446" height="186">
		<!--text skin="kbookAlertDialog" active="false" value="Low Battery!" width="446" height="186" /-->
		<kbookText skin="kbookAlertDialog" active="false" value="fskin:/l/strings/STR_UI_MESSAGE_LOWBATTERY" width="446" height="186" />

		<button skin="kbookDialogOKButton" bottom="13" right="13" width="130" height="42" do="doOK" />
		<sprite skin="diskSprite" left="5" top="5" width="140" height="140" u="5" active="false"/>
		</group>
		<!--background skin="diskBackground" left="0" right="0" top="0" bottom="0"/-->
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_LOWBATTERY"/>
	</kbookSimplePanel>

	<group id="DEVICE_SHUTDOWN_MODAL_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMenu">
				var value = this.getVariable("DEVICE_SHUTDOWN_MODAL")
				if (value)
					this.setVariable("DEVICE_SHUTDOWN_MODAL", 0)
				else 
					this.bubble("doMenuClose", this);
			</function>
			<function id="doRoot">
				var value = this.getVariable("DEVICE_SHUTDOWN_MODAL")
				if (value)
					this.setVariable("DEVICE_SHUTDOWN_MODAL", 0)
				this.container.bubble("doRoot")
			</function>
			<function id="doOption">
				this.bubble("doBlink")
			</function>
			<function id="doSearch">
				this.bubble("doBlink")
			</function>
			<function id="doSize">
				this.bubble("doBlink")
			</function>
			<function id="doSearch">
				this.bubble("doBlink")
			</function>
			<function id="doNext">
				this.bubble("doBlink")
			</function>
			<function id="doPrevious">
				this.bubble("doBlink")
			</function>
		</code>
		<panel skin="kbookDeviceShutdown" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="device-shutdown" left="0" width="70" top="0" height="70" active="false"/>
		<!--kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" text="Device Shutdown"/-->
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_DEVICESHUTDOWN"/>
		<!--group id="DEVICE_SHUTDOWN" width="480" height="143"-->
		<group id="DEVICE_SHUTDOWN" left="0" right="0" height="143">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>

			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_DEVICE_SHUTDOWN_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_DEVICE_SHUTDOWN_2"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DEVICE_SHUTDOWN"/>

			<group top="100" width="296" height="42">
				<!--button2 id="YES" skin="kbookDialogYesButton" top="0" left="0" width="142" height="42" do="doDeviceShutdown" /-->
				<!--button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doDeviceShutdown"/-->
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42">
					<code>
						<function id="click">
							var value = this.getVariable("DEVICE_SHUTDOWN_MODAL")
							if (value)
								this.setVariable("DEVICE_SHUTDOWN_MODAL", 0)
							this.bubble("doDeviceShutdown", this);
						</function>
					</code>
				</button2icon>
				<!--button2 id="NO" skin="kbookDialogNOButton" top="0" right="0" width="142" height="42"-->
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42">
					<code>
						<function id="click">
							var value = this.getVariable("DEVICE_SHUTDOWN_MODAL")
							if (value)
								this.setVariable("DEVICE_SHUTDOWN_MODAL", 0)
							else 
								this.bubble("doMenuClose", this);
						</function>
					</code>
				<!--/button2-->
				</button2icon>
			</group>
		</group>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" do="doMenu"/-->

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenu"/>
	</group>
		
	<group id="DISK_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doMenu">
				this.bubble("doBlink");
			</function>
			<function id="doRoot">
				this.bubble("doBlink");
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
		</code>
		<background skin="diskBackground" left="0" right="0" top="0" bottom="0"/>
		<sprite id="WAIT" skin="diskSprite" width="144" height="140" active="false"> <!-- temporary fix of #8 -->
			<animation id="WAIT" duration="3" loop="true">
				<frames>
					<frame>
						<setU u="0"/>
					</frame>
					<frame>
						<setU u="1"/>
					</frame>
					<frame>
						<setU u="2"/>
					</frame>
					<frame>
						<setU u="3"/>
					</frame>
				</frames>
			</animation>
		</sprite>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_LOADING"/>
	</group>

	<group id="SHUTDOWN_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<background skin="diskBackground" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="diskSprite" width="140" height="140" u="6" active="false"/>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="100" right="100" height="30" bottom="0" align="center" variable="SHUTDOWN_MSG"/>
	</group>

	<group id="SHUTDOWN_EXTERNAL_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="initialized"><![CDATA[
				var orientation = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V");

				if (orientation == "V") {
					this.VIEW_SHUTDOWN_WARNING_V.show(true)
					this.VIEW_SHUTDOWN_WARNING_H.show(false)
				}
				else {
					this.VIEW_SHUTDOWN_WARNING_V.show(false)
					this.VIEW_SHUTDOWN_WARNING_H.show(true)
				}
			]]></function>
		</code>
		<background skin="diskBackground" left="0" right="0" top="0" bottom="0"/>
		<exGroup id="VIEW_SHUTDOWN_WARNING_V"  width="410" height="200" top="291" visible="true" active="true">
			<exPanel  skin="opt_frame"								left="0" right="0" top= "0" bottom="0" playing="match"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="8" height="44" align="center" textresource="STR_WARNING_FORMAT_1"/>
			<kbookText skin="settingText" active="false" left="15" right="15" top="76" height="125" variable="FORMAT_WARNING_MSG"/>
		</exGroup>
		<exGroup id="VIEW_SHUTDOWN_WARNING_H"  width="410" height="200" top="191" visible="true" active="true">
			<exPanel  skin="opt_frame"								left="0" right="0" top= "0" bottom="0" playing="match"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="8" height="44" align="center" textresource="STR_WARNING_FORMAT_1"/>
			<kbookText skin="settingText" active="false" left="15" right="15" top="76" height="125" variable="FORMAT_WARNING_MSG"/>
		</exGroup>

		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="100" right="100" height="30" bottom="0" align="center" variable="SHUTDOWN_MSG"/>
	</group>

	<group id="FORMAT_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<background skin="diskBackground" left="0" right="0" top="0" bottom="0"/>
		<sprite id="FORMAT" skin="diskSprite" width="144" height="140" active="false"> 
		</sprite>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_FORMATTING"/>
	</group>
	
	<!-- This group is identical to FORMAT_GROUP in all but name, and they can eventually be collapsed into
		one.  However, for now I'm keeping them separate in case we want to change the text of the label
		in this group later. -->
	<group id="PROGRESS_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<background skin="diskBackground" left="0" right="0" top="0" bottom="0"/>
		<sprite id="PROGRESS" skin="diskSprite" width="144" height="140" active="false"> 
		</sprite>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_FORMATTING"/>
	</group>
	
	<kbookSimplePanel id="INVALID_FORMAT_GROUP" skin="kbookDialog" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doMenu">
				this.bubble("doBlink");
			</function>
			<function id="doRoot">
				this.bubble("doBlink");
			</function>
			<function id="doOK">
				this.setVariable("INVALID_FORMAT", 0);
				this.bubble("doGotoFormatDevice");
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
			<function id="doNext">
				this.bubble("doBlink");
			</function>
			<function id="doPrevious">
				this.bubble("doBlink");
			</function>
		</code>
		<group width="590" height="200">
			<kbookText skin="kbookAlertDialog" active="false" value="fskin:/l/strings/STR_UI_CONFIRM_INVALIDFORMAT" width="590" height="200"/>
			<button skin="kbookDialogOKButton" bottom="15" right="15" width="130" height="42" do="doOK" />
			<sprite skin="diskSprite" left="5" top="5" width="140" height="140" u="5" active="false"/>
		</group>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel left="150" right="150" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_INVALIDFORMAT"/>
	</kbookSimplePanel>
	
	<group id="STATUS_GROUP" left="0" right="0" top="0" bottom="0">
		<kbookProgress skin="batteryProgress" left="0" width="70" height="30" bottom="0" variable="BATTERY"/>
		<checkbox skin="batteryCheckBox" left="70" width="20" height="30" bottom="0" variable="POWER" on="1" off="0" active="false"/>
		<checkbox skin="blinkCheckBox" width="30" right="130" height="30" bottom="0" variable="BLINK" on="1" off="0" active="false"/>
		<group id="VOLUME_GROUP" width="75" right="130" height="30" bottom="0" visible="false">
			<checkbox id="MUTE" skin="volumeCheckBox" width="20" right="55" height="30" bottom="0" variable="MUTE" on="1" off="0" active="false"/>
			<kbookProgress id="VOLUME" skin="volumeProgress" width="55" right="0" height="30" bottom="0" variable="VOLUME"/>
		</group>
		<label id="prspTime" align="right" right="5" bottom="0" height="30" width="120" />
	</group>
	
	<!-- PRS+ stuff --> 
	<panel id="POPUP_MENU"  skin="popup" left="50" bottom="50" width="0" height="0"  visible="false">
		<exButton id="CLOSE_BOX" skin="optClose" right="0" top="-62" width="42" height="42" do="doMenu"/>
		<group id="innerGroup" left="6" right="6" top="6" bottom = "6">
			<group id="panel10" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="0" />
				<button id="0" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel9" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="9" />
				<button id="9" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>				
			</group>
			<group id="panel8" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="8" />
				<button id="8" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel7" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="7" />
				<button id="7" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel6" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="6" />
				<button id="6" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel5" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="5" />
				<button id="5" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel4" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="4" />
				<button id="4" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel3" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="3" />
				<button id="3" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel2" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="2" />
				<button id="2" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="true" do="doPopupButton"/>				
			</group>
			<group id="panel1" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="1" />
				<button id="1" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="true" do="doPopupButton"/>
			</group>
		</group>
	</panel>
	<!-- End of PRS+ stuff -->

	
	<group id="CALIBRATION_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMenu"><![CDATA[
				if (this.getVariable("STATE") == "DISPLAY_CALIBRATION") {
					var window = this.container.getWindow()
					var size = window.getSize()
					if (size.x < size.y)
						this.CALIBRATION_V.cancel()
					else
						this.CALIBRATION_H.cancel()
				}
			]]></function>
			<function id="doRoot"><![CDATA[
				if (this.getVariable("STATE") == "DISPLAY_CALIBRATION") {
					var window = this.container.getWindow()
					var size = window.getSize()
					if (size.x < size.y)
						this.CALIBRATION_V.cancel()
					else
						this.CALIBRATION_H.cancel()
					this.container.bubble("doRoot")
				}
			]]></function>
		</code>
		<calibration id="CALIBRATION_V" doFinish="doFinishCalibration" doCancel="doCancelCalibration" doNext="doNextCalibration" doFail="doFailCalibration" left="0" right="0" top="0" bottom="0">
			<point left="0" top="0" hitX="50" hitY="50" href="calibrationTop.png"/>
			<point right="0" bottom="0" hitX="550" hitY="750" href="calibrationBottom.png"/>
			<point right="35" top="35" href="confirmation30.png"/>
			<point width="30" height="30" href="confirmation30.png"/>
		</calibration>
		<calibration id="CALIBRATION_H" doFinish="doFinishCalibration" doCancel="doCancelCalibration" doNext="doNextCalibration" doFail="doFailCalibration" left="0" right="0" top="0" bottom="0">
			<point left="0" top="0" hitX="50" hitY="750" href="calibrationTop.png"/>
			<point right="0" bottom="0" hitX="550" hitY="50" href="calibrationBottom.png"/>
			<point right="35" top="35" href="confirmation30.png"/>
			<point width="30" height="30" href="confirmation30.png"/>
		</calibration>
		<group id="START" width="600" height="350">
			<kbookText skin="settingText" active="false" left="15" right="15" bottom="0" height="150" value="fskin:/l/strings/STR_UI_MESSAGE_CALIBRATION_START"/>
		</group>
		<group id="START_COLD" left="20" right="20" bottom="50" height="320">
			<kbookText skin="welcomeText" active="false" left="20" right="20" bottom="0" top="0" variable="CALIBRATION_MSG_1" />
		</group>
		<group id="FAIL" width="600" height="350">
			<kbookText skin="settingText" active="false" left="15" right="15" bottom="0" height="150" value="fskin:/l/strings/STR_UI_MESSAGE_CALIBRATION_ERR"/>
		</group>
		<group id="FAIL_COLD" left="20" right="20" bottom="50" height="320">
			<kbookText skin="welcomeText" active="false" left="0" right="0" bottom="0" top="0" variable="CALIBRATION_MSG_2" />
		</group>
	</group>
	
	<monochrome id="MONO_BTN_FILTER" left="0" right="0" top="0" bottom="0" visible="false"/>

	<gesture id="GESTURE" left="0" right="0" top="0" bottom="0" doFail="doGestureFail">
		<drag/>
		<line error="15"/>
		<lineAndHold error="15"/>
		<doubleTap/>
		<tap/>
		<code>
			<function id="onStart">
				var device = this.getDevice()
				device.doProcessing(200)
			</function>
			<function id="onEnd">
				var device = this.getDevice()
				device.doProcessed(200)
			</function>
			<function id="onFail">
				// Vancouver UI spec defines that invalid icon must be displayed if gesture is not handled.
				this.bubble("doBlink")
			</function>
		</code>
	</gesture>

</document>