<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://www.kinoma.com/fskin/1" href="x-id://model">
	<assets>
		<!-- PRS+ stuff -->
		<import href="../prsp/prspAssets.xml"/>

		<texture href="kBookAssets.png">
			<cutout id="whiteBox" x="630" y="0" width="70" height="70" columns="0" lines="0" />
			<cutout id="blackBox" x="351" y="0" width="35" height="70" columns="0" lines="0" />
			<cutout id="greyBox" x="500" y="75" width="35" height="70" columns="0" lines="0" />
			<cutout id="greyLine" x="280" y="138" width="35" height="2" columns="0" lines="0" />
			<cutout id="empty" x="0" y="0" width="0" height="0" />
		</texture>
		
		<style id="popupText" halign="left" valign="top" top="8" left="10" size="30" style="bold"/>
		<style id="popupTextWhite" halign="left" valign="top" top="8" left="10" size="30" style="bold" color="#FFFFFF"/>
		
		<skin id="popup"
			cutouts="blackBorder-tl,blackBorder-tc,blackBorder-tr,blackBorder-cl,whiteBox,blackBorder-cl,blackBorder-bl,blackBorder-bc,blackBorder-br"
		/>
		<skin id="popupText"
			styles="popupText,popupText,popupText,popupText"
			cutouts="empty,greyLine,empty,empty,whiteBox,empty,empty,greyLine,empty"
		/>
		<skin id="popupIndicator"
			styles="popupText,popupText,popupText,popupText"
			cutouts="empty,empty,empty,empty,greyBox,empty,empty,empty,empty"
		/>
		<skin id="popupIndicatorSel"
			styles="popupTextWhite,popupTextWhite,popupTextWhite,popupTextWhite"
			cutouts="empty,empty,empty,empty,blackBox,empty,empty,empty,empty"
		/>
		<skin id="prspButton"
			styles="popupTextWhite,popupTextWhite,popupTextWhite,popupTextWhite"
			cutouts="empty,empty,empty"
		/>		
		<!-- End of PRS+ stuff -->
	
		<import href="kbookAssets.xml"/>
	</assets>
	<code>
		<function id="afterModal" params="group">
			if(group){
			group.show(false);
			}
			this.modal--;
			if (this.modal &lt; 0)
				debugger
			trace("afterModal: this.modal=" + this.modal + "\n");
			if (!this.modal) {
				this.focus(true);

				this.MENU_DETAILS_GROUP.MENU.enable(true);
				this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.MENU_HOME.enable(true);
				this.DICTIONARY_GROUP.DICTIONARY.enable(true);
				this.PAGE_GROUP.PAGE_SUBGROUP.enable(true);
				this.SONG_GROUP.VIEW.SONG_GROUP.SONG.enable(true);
				this.PICTURE_GROUP.PICTURE.enable(true);
				this.DEMO_PICTURE_GROUP.DEMO_PICTURE.enable(true);
				this.SETTING_GROUP.SETTING.enable(true);
				this.INFO_GROUP.INFO.enable(true);
				this.ABOUT_GROUP.ABOUT.enable(true);
				this.AUTORUN_GROUP.AUTORUN.enable(true);
				this.SOFT_RESET_GROUP.SOFT_RESET.enable(true);
				this.HARD_RESET_GROUP.HARD_RESET.enable(true);
				this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE.enable(true);
				this.FORMAT_MS_GROUP.FORMAT_MS.enable(true);
				this.FORMAT_SD_GROUP.FORMAT_SD.enable(true);
				this.DELETE_BOOK_GROUP.DELETE_BOOK.enable(true);
				this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR.enable(true);
				this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS.enable(true);
				this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN.enable(true);
				this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.enable(true);
				this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND.enable(true);
				this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT.enable(true);
				this.DEMO_MODE_GROUP.DEMO_MODE.enable(true);
				this.SCROLL_SETTING_GROUP.PANEL.SCROLL_SETTING.enable(true);
				this.SETTING_NETWORK.VIEW.SETTING_GROUP.enable(true);
				this.SETTING_NETWORK.VIEW.WPS_GROUP.enable(true);
				this.SETTING_NETWORK.VIEW.FW_UPDATE_GROUP.enable(true);
				
				var target;
				switch (this.getVariable("STATE")) {
					case "MENU": target = this.MENU_DETAILS_GROUP.MENU; break;
					case "MENU_HOME": target = this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.MENU_HOME; break;
					case "DICTIONARY": target = this.DICTIONARY_GROUP.DICTIONARY; break;
					case "PAGE": target = this.PAGE_GROUP.PAGE_SUBGROUP.PAGE; break;
					case "SONG": target = this.SONG_GROUP.VIEW.SONG_GROUP.SONG; break;
					case "PICTURE": target = this.PICTURE_GROUP.PICTURE; break;
					case "DEMO_PICTURE": target = this.DEMO_PICTURE_GROUP.DEMO_PICTURE; break;
					case "SETTING": target = this.SETTING_GROUP.SETTING; break;
					case "INFO": target = this.INFO_GROUP.INFO; break;
					case "ABOUT": target = this.ABOUT_GROUP.ABOUT; break;
					case "AUTORUN": target = this.AUTORUN_GROUP.AUTORUN; break;
					case "SOFT_RESET": target = this.SOFT_RESET_GROUP.SOFT_RESET; break;
					case "HARD_RESET": target = this.HARD_RESET_GROUP.HARD_RESET; break;
					case "FORMAT_DEVICE": target = this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE; break;
					case "FORMAT_MS": target = this.FORMAT_MS_GROUP.FORMAT_MS; break;
					case "FORMAT_SD": target = this.FORMAT_SD_GROUP.FORMAT_SD; break;
					case "DELETE_BOOK": target = this.DELETE_BOOK_GROUP.DELETE_BOOK; debugger; break;
					case "DELETE_BOOK_ERR": target = this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR; debugger; break;
					case "DELETE_HISTORICAL_WORDS": target = this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS; debugger; break;
					case "DEVICE_SHUTDOWN": target = this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN; break;
					case "DISPLAY_CALIBRATION": target = this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION; break;
					case "NOTEPAD_FREEHAND": target = this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND; break;
					case "NOTEPAD_TEXT": target = this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT; break;
					case "DEMO_MODE": target = this.DEMO_MODE_GROUP.DEMO_MODE; break;
					case "SCROLL_SETTING": target = this.SCROLL_SETTING_GROUP.PANEL.SCROLL_SETTING; break;
					case "SETTING_NETWORK": target = this.SETTING_NETWORK.VIEW.SETTING_GROUP; break;
					case "SETTING_NETWORK_WPS": target = this.SETTING_NETWORK.VIEW.WPS_GROUP; break;
					case "SETTING_FW_UPDATE": target = this.SETTING_NETWORK.VIEW.FW_UPDATE_GROUP; break;
					case "BROWSER_STORE": 
						this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_STORE.enable(true);
						target = this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_STORE; 
						break;
					case "BROWSER_OPEN": 
						this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_OPEN.enable(true);
						target = this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_OPEN; 
						break;
				}
				target.focus(true);
			}
			else if (this.COLD_BOOT_WIZARD_GROUP.VIEW.COLD_BOOT_WIZARD_GROUP.isShown())
				this.COLD_BOOT_WIZARD_GROUP.VIEW.COLD_BOOT_WIZARD_GROUP.focus(true);
			else if (this.CALIBRATION_GROUP.isShown())
				this.CALIBRATION_GROUP.focus(true);
			else if (this.FORMAT_GROUP.isShown())
				this.FORMAT_GROUP.focus(true);
			else if (this.SHUTDOWN_GROUP.isShown())
				this.SHUTDOWN_GROUP.focus(true);
			else if (this.BATTERY_SHUTDOWN_GROUP.isShown())
				this.BATTERY_SHUTDOWN_GROUP.focus(true);
			else if (this.DISK_GROUP.isShown())
				this.DISK_GROUP.focus(true);
			else if (this.DEVICE_SHUTDOWN_MODAL_GROUP.isShown())
				this.DEVICE_SHUTDOWN_MODAL_GROUP.focus(true);
			else if (this.LOW_BATTERY_GROUP.isShown())
				this.LOW_BATTERY_GROUP.focus(true);
			else if (this.INVALID_FORMAT_GROUP.isShown())
				this.INVALID_FORMAT_GROUP.focus(true);
			else if (this.GOTO_GROUP.isShown())
				this.GOTO_GROUP.focus(true);
			else if (this.HARD_RESET_GROUP.isShown())
				this.HARD_RESET_GROUP.HARD_RESET.focus(true);
			else{
				this.getModel().overlayModel.updateFocus(true);
			}
		</function>
		<function id="beforeModal" params="group">
			if (!this.modal) {
				trace("beforeModal: STATE=" + this.getVariable("STATE") + "\n");
				this.focus(true);
				this.MENU_DETAILS_GROUP.MENU.enable(false);
				this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.MENU_HOME.enable(false);
				this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_STORE.enable(false);
				this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_OPEN.enable(false);
				this.DICTIONARY_GROUP.DICTIONARY.enable(false);
				this.PAGE_GROUP.PAGE_SUBGROUP.enable(false);
				this.SONG_GROUP.VIEW.SONG_GROUP.SONG.enable(false);
				this.PICTURE_GROUP.PICTURE.enable(false);
				this.DEMO_PICTURE_GROUP.DEMO_PICTURE.enable(false);
				this.SETTING_GROUP.SETTING.enable(false);
				this.INFO_GROUP.INFO.enable(false);
				this.ABOUT_GROUP.ABOUT.enable(false);
				this.AUTORUN_GROUP.AUTORUN.enable(false);
				this.SOFT_RESET_GROUP.SOFT_RESET.enable(false);
				this.HARD_RESET_GROUP.HARD_RESET.enable(false);
				this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE.enable(false);
				this.FORMAT_MS_GROUP.FORMAT_MS.enable(false);
				this.FORMAT_SD_GROUP.FORMAT_SD.enable(false);
				this.DELETE_BOOK_GROUP.DELETE_BOOK.enable(false);
				this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR.enable(false);
				this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS.enable(false);
				this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN.enable(false);
				this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.enable(false);
				this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND.enable(false);
				this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT.enable(false);
				this.DEMO_MODE_GROUP.enable(false);
				this.SCROLL_SETTING_GROUP.PANEL.SCROLL_SETTING.enable(false);
				this.SETTING_NETWORK.VIEW.SETTING_GROUP.enable(false);
				this.SETTING_NETWORK.VIEW.WPS_GROUP.enable(false);
				this.SETTING_NETWORK.VIEW.FW_UPDATE_GROUP.enable(false);
			}
			this.modal++;
			trace("beforeModal: this.modal=" + this.modal + "\n");
			if(group){
				group.show(true);
				group.focus(true);
				if ("onModal" in group)
					group.onModal()
			}
		</function>
		<function id="clearModal" params="">
			var target=null;
			if (this.modal>0) {
				trace("CLEARMODAL called\n");
				// Determine which, if any, modal UI group is currently shown.
				// Clear modal when it is GOTO_GROUP only!
				if (this.GOTO_GROUP.isShown()) {
					target=this.GOTO_GROUP;
					target.show(false);
					this.modal--;
					if (!this.modal) {
						this.MENU_DETAILS_GROUP.MENU.enable(true);
						this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.MENU_HOME.enable(true);
						this.DICTIONARY_GROUP.DICTIONARY.enable(true);
						this.PAGE_GROUP.PAGE_SUBGROUP.enable(true);
						this.SONG_GROUP.VIEW.SONG_GROUP.SONG.enable(true);
						this.PICTURE_GROUP.PICTURE.enable(true);
						this.DEMO_PICTURE_GROUP.DEMO_PICTURE.enable(true);
						this.SETTING_GROUP.SETTING.enable(true);
						this.INFO_GROUP.INFO.enable(true);
						this.ABOUT_GROUP.ABOUT.enable(true);
						this.AUTORUN_GROUP.AUTORUN.enable(true);
						this.SOFT_RESET_GROUP.SOFT_RESET.enable(true);
						this.HARD_RESET_GROUP.HARD_RESET.enable(true);
						this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE.enable(true);
						this.FORMAT_MS_GROUP.FORMAT_MS.enable(true);
						this.FORMAT_SD_GROUP.FORMAT_SD.enable(true);
						this.DELETE_BOOK_GROUP.DELETE_BOOK.enable(true);
						this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR.enable(true);
						this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS.enable(true);
						this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN.enable(true);
						this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.enable(true);
						this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND.enable(true);
						this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT.enable(true);
						this.DEMO_MODE_GROUP.enable(true);
						this.SCROLL_SETTING_GROUP.PANEL.SCROLL_SETTING.enable(true);
						this.SETTING_NETWORK.VIEW.SETTING_GROUP.enable(true);	
						this.SETTING_NETWORK.VIEW.WPS_GROUP.enable(true);	
						this.SETTING_NETWORK.VIEW.FW_UPDATE_GROUP.enable(true);	
						switch (this.getVariable("STATE")) {
						case "MENU": target = this.MENU_DETAILS_GROUP.MENU; break;
						case "MENU_HOME": target = this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.MENU_HOME; break;
						case "DICTIONARY": target = this.DICTIONARY_GROUP.DICTIONARY; break;
						case "PAGE": target = this.PAGE_GROUP.PAGE_SUBGROUP.PAGE; break;
						case "SONG": target = this.SONG_GROUP.VIEW.SONG_GROUP.SONG; break;
						case "PICTURE": target = this.PICTURE_GROUP.PICTURE; break;
						case "DEMO_PICTURE": target = this.DEMO_PICTURE_GROUP.DEMO_PICTURE; break;
						case "SETTING": target = this.SETTING_GROUP.SETTING; break;
						case "INFO": target = this.INFO_GROUP.INFO; break;
						case "ABOUT": target = this.ABOUT_GROUP.ABOUT; break;
						case "AUTORUN": target = this.AUTORUN_GROUP.AUTORUN; break;
						case "SOFT_RESET": target = this.SOFT_RESET_GROUP.SOFT_RESET; break;
						case "HARD_RESET": target = this.HARD_RESET_GROUP.HARD_RESET; break;
						case "FORMAT_DEVICE": target = this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE; break;
						case "FORMAT_MS": target = this.FORMAT_MS_GROUP.FORMAT_MS; break;
						case "FORMAT_SD": target = this.FORMAT_SD_GROUP.FORMAT_SD; break;
						case "DELETE_BOOK": target = this.DELETE_BOOK_GROUP.DELETE_BOOK; break;
						case "DELETE_BOOK_ERR": target = this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR; break;
						case "DELETE_HISTORICAL_WORDS": target = this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS; break;
						case "DEVICE_SHUTDOWN": target = this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN; break;
						case "DISPLAY_CALIBRATION": target = this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION; break;
						case "NOTEPAD_FREEHAND": target = this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND; break;
						case "NOTEPAD_TEXT": target = this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT; break;
						case "DEMO_MODE": target = this.DEMO_MODE_GROUP; break;
						case "SCROLL_SETTING": target = this.SCROLL_SETTING_GROUP.PANEL.SCROLL_SETTING; break;
						case "SETTING_NETWORK": target = this.SETTING_NETWORK.VIEW.SETTING_GROUP; break;
						case "SETTING_NETWORK_WPS": target = this.SETTING_NETWORK.VIEW.WPS_GROUP; break;
						case "SETTING_FW_UPDATE": target = this.SETTING_NETWORK.VIEW.FW_UPDATE_GROUP; break;
						case "BROWSER_STORE": 
							this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_STORE.enable(true);
							target = this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_STORE; 
							break;
						case "BROWSER_OPEN": 
							this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_OPEN.enable(true);
							target = this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_OPEN; 
							break;
						}
					} else {
						target=null
					}
				}
				if (target)
					target.focus(true);
				else if (this.COLD_BOOT_WIZARD_GROUP.VIEW.COLD_BOOT_WIZARD_GROUP.isShown())
					this.COLD_BOOT_WIZARD_GROUP.VIEW.COLD_BOOT_WIZARD_GROUP.focus(true);
				else if (this.CALIBRATION_GROUP.isShown())
					this.CALIBRATION_GROUP.focus(true);
				else if (this.FORMAT_GROUP.isShown())
					this.FORMAT_GROUP.focus(true);
				else if (this.SHUTDOWN_GROUP.isShown())
					this.SHUTDOWN_GROUP.focus(true);
				else if (this.BATTERY_SHUTDOWN_GROUP.isShown())
					this.BATTERY_SHUTDOWN_GROUP.focus(true);
				else if (this.DISK_GROUP.isShown())
					this.DISK_GROUP.focus(true);
				else if (this.DEVICE_SHUTDOWN_MODAL_GROUP.isShown())
					this.DEVICE_SHUTDOWN_MODAL_GROUP.focus(true);
				else if (this.LOW_BATTERY_GROUP.isShown())
					this.LOW_BATTERY_GROUP.focus(true);
				else if (this.INVALID_FORMAT_GROUP.isShown())
					this.INVALID_FORMAT_GROUP.focus(true);
				else if (this.GOTO_GROUP.isShown())
					this.GOTO_GROUP.focus(true);
				else if (this.HARD_RESET_GROUP.isShown())
					this.HARD_RESET_GROUP.HARD_RESET.focus(true);
				else{
					this.getModel().overlayModel.updateFocus(true);
				}
			}
		</function>
		<function id="beginFullScreen">
			this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.show(false);
		</function>
		<function id="construct">
			this.modal = 0;
			this.overlay = null;
			this.state = undefined;
			this.control = undefined;
			this.volumeBlink = undefined;
		</function>
		<function id="doQuit">
			this.timer = new HardwareTimer();
			this.timer.onCallback = this.doQuitCallback;
			this.timer.onClockChange = this.doQuitCallback;
			this.timer.device  = this.getDevice();
			this.timer.window  = this.container.getWindow();
			this.timer.schedule(2000);
			this.timer.device.doProcessing(100);
			this.bubble("setKeyHandlerActive", false);
		</function>
		<function id="doQuitCallback">
			ebook.logInteger(101, 2, 0);
			this.window.doQuit();
		</function>
		<function id="doResume">
			this.getDevice().doneResume();
			this.getModel().resume();
			if (this.modal) {
				if (this.CALIBRATION_GROUP.isShown())
					this.CALIBRATION_GROUP.focus(true);
				else if (this.FORMAT_GROUP.isShown())
					this.FORMAT_GROUP.focus(true);
				else if (this.SHUTDOWN_GROUP.isShown())
					this.SHUTDOWN_GROUP.focus(true);
				else if (this.BATTERY_SHUTDOWN_GROUP.isShown())
					this.BATTERY_SHUTDOWN_GROUP.focus(true);
				else if (this.DISK_GROUP.isShown())
					this.DISK_GROUP.focus(true);
				else if (this.DEVICE_SHUTDOWN_MODAL_GROUP.isShown())
					this.DEVICE_SHUTDOWN_MODAL_GROUP.focus(true);
				else if (this.LOW_BATTERY_GROUP.isShown())
					this.LOW_BATTERY_GROUP.focus(true);
				else if (this.INVALID_FORMAT_GROUP.isShown())
					this.INVALID_FORMAT_GROUP.focus(true);
				else if (this.GOTO_GROUP.isShown())
					this.GOTO_GROUP.focus(true);
				else if (this.HARD_RESET_GROUP.isShown())
					this.HARD_RESET_GROUP.HARD_RESET.focus(true);
			}
			this.bubble("setKeyHandlerDisableAPKey", false);
		</function>
		<function id="doSuspend">
			this.bubble("setKeyHandlerDisableAPKey", true);
			this.getModel().suspend();
			this.getDevice().doneSuspend();
		</function>
		<function id="endFullScreen">
			this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.show(true);
		</function>
		<function id="modelChanged"><![CDATA[
			arguments.callee.grammar.call(this);
			var state = this.getVariable("STATE");
			var target;
			if (this.state != state) {
				this.focus(true)
				this.MENU_DETAILS_GROUP.show(false)
				this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.show(false)
				this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.show(false)
				this.DICTIONARY_GROUP.show(false)
				this.PAGE_GROUP.show(false)
				this.SONG_GROUP.VIEW.SONG_GROUP.show(false)
				this.PICTURE_GROUP.show(false)
				if(this.DEMO_PICTURE_GROUP.isShown())
					this.endFullScreen()
				this.DEMO_PICTURE_GROUP.show(false)
				this.SETTING_GROUP.show(false)
				this.INFO_GROUP.show(false)
				if(this.ABOUT_GROUP.isShown())
					this.ABOUT_GROUP.onEnterAboutView(false)
				this.ABOUT_GROUP.show(false)
				this.AUTORUN_GROUP.show(false)
				this.SOFT_RESET_GROUP.show(false)
				this.HARD_RESET_GROUP.show(false)
				this.FORMAT_DEVICE_GROUP.show(false)
				this.FORMAT_MS_GROUP.show(false)
				this.FORMAT_SD_GROUP.show(false)
				this.DELETE_BOOK_GROUP.show(false)
				this.DELETE_BOOK_GROUP_ERR.show(false)
				this.DELETE_HISTORICAL_WORDS_GROUP.show(false)
				this.DEVICE_SHUTDOWN_GROUP.show(false)
				this.DISPLAY_CALIBRATION_GROUP.show(false)
				this.NOTEPAD_FREEHAND_GROUP.show(false)
				this.NOTEPAD_TEXT_GROUP.show(false)
				if ((state=="DEMO_PICTURE") && (this.DEMO_MODE_GROUP.isShown()))
					this.DEMO_MODE_GROUP.doDemoClose(this, true)
				this.DEMO_MODE_GROUP.show(false)
				this.SCROLL_SETTING_GROUP.show(false)
				this.SETTING_NETWORK.VIEW.SETTING_GROUP.show(false)
				this.SETTING_NETWORK.VIEW.WPS_GROUP.show(false)
				this.SETTING_NETWORK.VIEW.FW_UPDATE_GROUP.show(false)

				switch(state) {
				case "MENU":
					this.MENU_DETAILS_GROUP.show(true)
					this.MENU_DETAILS_GROUP.MENU.setViewStyle(this.getVariable("VIEW_STYLE"))
					target = this.MENU_DETAILS_GROUP.MENU
					break
				case "MENU_HOME":
					this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.show(true)
					target = this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.MENU_HOME
					break
				case "BROWSER_STORE":
					this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.show(true)
					target = this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_STORE
					break
				case "BROWSER_OPEN":
					this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.show(true)
					target = this.BROWSER_GROUP.BROWSER_GROUP_SUB.BROWSER_GROUP.BROWSER_OPEN
					break
				case "DICTIONARY":
					this.DICTIONARY_GROUP.show(true)
					target = this.DICTIONARY_GROUP.DICTIONARY
					break
				case "PAGE":
					this.PAGE_GROUP.show(true)
					target = this.PAGE_GROUP.PAGE_SUBGROUP.PAGE
					this.PAGE_GROUP.showBookSizeIcon(true);
					break
				case "SONG":
					this.SONG_GROUP.VIEW.SONG_GROUP.show(true)
					target = this.SONG_GROUP.VIEW.SONG_GROUP.SONG
					break
				case "PICTURE":
					this.PICTURE_GROUP.show(true)
					target = this.PICTURE_GROUP.PICTURE
					break
				case "DEMO_PICTURE":
					this.beginFullScreen()
					//for GOTO_GROUP modal
					this.clearModal()
					//for CALIBRATION_GROUP modal
					if(this.CALIBRATION_GROUP.isShown())
						this.bubble("doCancelCalibration")
					this.DEMO_PICTURE_GROUP.show(true)
					target = this.DEMO_PICTURE_GROUP.DEMO_PICTURE
					break
				case "SETTING":
					this.SETTING_GROUP.show(true)
					target = this.SETTING_GROUP.SETTING
					break
				case "INFO":
					this.INFO_GROUP.show(true)
					target = this.INFO_GROUP.INFO
					break
				case "ABOUT":
					this.ABOUT_GROUP.onEnterAboutView(true)
					this.ABOUT_GROUP.ABOUT.pageChanged(); // to convert String ID
					this.ABOUT_GROUP.show(true)
					target = this.ABOUT_GROUP.ABOUT
					break
				case "AUTORUN":
					this.AUTORUN_GROUP.show(true)
					target = this.AUTORUN_GROUP.AUTORUN;
					break
				case "SOFT_RESET":
					this.SOFT_RESET_GROUP.show(true)
					target = this.SOFT_RESET_GROUP.SOFT_RESET
					break
				case "HARD_RESET":
					this.HARD_RESET_GROUP.show(true)
					target = this.HARD_RESET_GROUP.HARD_RESET
					break
				case "FORMAT_DEVICE":
					this.FORMAT_DEVICE_GROUP.show(true)
					target = this.FORMAT_DEVICE_GROUP.FORMAT_DEVICE
					break
				case "FORMAT_MS":
					this.FORMAT_MS_GROUP.show(true)
					target = this.FORMAT_MS_GROUP.FORMAT_MS
					break
				case "FORMAT_SD":
					this.FORMAT_SD_GROUP.show(true)
					target = this.FORMAT_SD_GROUP.FORMAT_SD
					break
				case "DEVICE_SHUTDOWN":
					this.DEVICE_SHUTDOWN_GROUP.show(true)
					target = this.DEVICE_SHUTDOWN_GROUP.DEVICE_SHUTDOWN
					break
				case "DISPLAY_CALIBRATION":
					this.DISPLAY_CALIBRATION_GROUP.show(true)
					target = this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION
					break
				case "NOTEPAD_FREEHAND":
					this.NOTEPAD_FREEHAND_GROUP.show(true)
					target = this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND
					this.NOTEPAD_FREEHAND_GROUP.showHalfFreehandIcon(true);
					break
				case "NOTEPAD_TEXT":
					this.NOTEPAD_TEXT_GROUP.show(true)
					target = this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT
					break
				case "DELETE_BOOK":
					this.DELETE_BOOK_GROUP.show(true)
					target = this.DELETE_BOOK_GROUP.DELETE_BOOK
					break
				case "DELETE_BOOK_ERR":
					this.DELETE_BOOK_GROUP_ERR.show(true)
					target = this.DELETE_BOOK_GROUP_ERR.DELETE_BOOK_ERR
					break
				case "DELETE_HISTORICAL_WORDS":
					this.DELETE_HISTORICAL_WORDS_GROUP.show(true)
					target = this.DELETE_HISTORICAL_WORDS_GROUP.DELETE_HISTORICAL_WORDS
					break
				case "DEMO_MODE":
					this.DEMO_MODE_GROUP.show(true)
					target = this.DEMO_MODE_GROUP
					break
				case "SCROLL_SETTING":
					this.SCROLL_SETTING_GROUP.show(true)
					this.SCROLL_SETTING_GROUP.PANEL.SCROLL_SETTING.setViewStyle("details")
					target = this.SCROLL_SETTING_GROUP.PANEL.SCROLL_SETTING
					break
				case "SETTING_NETWORK":
					this.SETTING_NETWORK.VIEW.SETTING_GROUP.show(true)
					if("WPS_GROUP" in this.SETTING_NETWORK.VIEW){
						this.SETTING_NETWORK.VIEW.WPS_GROUP.show(true)
					}
					target = this.SETTING_NETWORK.VIEW.SETTING_GROUP
					break
				case "SETTING_NETWORK_WPS":
					this.SETTING_NETWORK.VIEW.WPS_GROUP.show(true)
					target = this.SETTING_NETWORK.VIEW.WPS_GROUP
					break
				case "SETTING_FW_UPDATE":
					this.SETTING_NETWORK.VIEW.FW_UPDATE_GROUP.show(true)
					target = this.SETTING_NETWORK.VIEW.FW_UPDATE_GROUP
					break
				}
				this.state = state;
				this.volumeVisibilityChanged();
				if (target.isEnabled())
					target.focus(true)
			}
		]]></function>
		<function id="variableChanged" params="id, value"><![CDATA[
			arguments.callee.grammar.call(this, id, value);
			if (id == "DISK") {
				if (value) {
					this.beforeModal(this.DISK_GROUP);
					this.DISK_GROUP.WAIT.startAnimation("WAIT");
				}
				else {
					this.DISK_GROUP.WAIT.stopAnimation("WAIT");
					this.afterModal(this.DISK_GROUP);
				}
			}
			else if (id == "HOME_FILE") {
				if("TAB_H" in this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.MENU_HOME){
					var index = this.getVariable("TAB_ITEM_VALUE")
					//[workaround]tab control should be combined(H and V)
					this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.MENU_HOME.TAB_H.setValue(index)
					this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.MENU_HOME.TAB_V.setValue(index)
					if (value) {
						this.MENU_HOME_GROUP.MENU_HOME_GROUP_SUB.MENU_HOME_GROUP.onChangeTab(value)
					}
				}
			}
			else if (id == "PAGE_FREEZE") {
				trace("PAGE_FREEZE=" + value + "\n")
				if (value)
					this.PAGE_GROUP.freeze()
				else
					this.PAGE_GROUP.unfreeze()
			}
			else if (id == "FORMAT") {
				if (value) {
					this.PAGE_GROUP.freeze()
					this.beforeModal(this.FORMAT_GROUP);
				}
				else {
					this.PAGE_GROUP.unfreeze()
					this.afterModal(this.FORMAT_GROUP);
				}
			}
			else if (id == "FORMAT_PERCENT") {
				var sprite = this.FORMAT_GROUP.FORMAT;
				var u = sprite.u + 1;
				if (u > 3)
					u = 0;
				sprite.u = u;
			}
			else if (id == "PROGRESS") {
				if (value) {
					if (!this.PROGRESS_GROUP.isShown()) {
						trace("PROGRESS variable was changed (true)\n");
						this.PAGE_GROUP.freeze()
						this.beforeModal(this.PROGRESS_GROUP);
					}
				}
				else {
					if (this.PROGRESS_GROUP.isShown()) {
						trace("PROGRESS variable was changed (false)\n");
						this.afterModal(this.PROGRESS_GROUP);
						this.PAGE_GROUP.unfreeze()
					}
				}
			}
			else if (id == "PROGRESS_PERCENT") {
				trace("PROGRES_PERCENT was changed\n");
				var sprite = this.PROGRESS_GROUP.PROGRESS;
				var u = sprite.u + 1;
				if (u > 3)
					u = 0;
				sprite.u = u;
			}
			else if (id == "VOLUME_BLINK") {
				if (this.volumeBlink != value) {
					this.volumeBlink = value;
					this.volumeVisibilityChanged();
				}
			}
			else if (id == "BATTERY") {
				this.setVariable("SAVE_BATTERY", value);
				var level = Math.floor((value - 1) / 20);
				if (level < 0)
					level = 0;
				if (level > 4)
					level = 4;
				this.setVariable("BATTERY_INDEX",  level);

				var charging = this.getVariable("CHARGING");
				this.setVariable("SAVE_CHARGING", charging);
				if (value == 0) {
					this.bubble("messageDisplayCancel");
					this.showClockTime(false);
					this.beforeModal(this.SHUTDOWN_GROUP);
					ebook.logInteger(101, 1, 0, 3);
					this.doQuit();
				}
				if (charging != 1 && charging != 2) {
					if ((!this.batteryWarning) && (value <= 20)) {
						this.bubble("messageDisplayCancel");
						this.batteryWarning = true;
						this.setVariable("LOW_BATTERY", 1);
					}
				}
				else {
					// 1:Charging or 2:Full charge
					this.setVariable("BATTERY_INDEX",  4 + charging);
				}
			}
			else if (id == "POWER") {
				if (!value) {
					// Removed AC adapter
					var charge = this.getVariable("SAVE_CHARGING");
					if (charge == 2) {
						// Charge Complete.
						var battery = this.getVariable("SAVE_BATTERY");
						var level = Math.floor((battery - 1) / 20);
						if (level < 0)
							level = 0;
						if (level > 4)
							level = 4;
						this.setVariable("BATTERY_INDEX",  level);
					}
				}
			}
			else if (id == "CHARGING") {
				this.setVariable("SAVE_CHARGING", value);
				if (value == 1 || value == 2) {
					// 1:Charging or 2:Full charge
					var lowBattery = this.getVariable("LOW_BATTERY");
					if (lowBattery)
						this.setVariable("LOW_BATTERY", 0);
					this.batteryWarning = false;
					this.setVariable("BATTERY_INDEX",  4 + value);
				}
				else {
					var battery = this.getVariable("SAVE_BATTERY");
					var level = Math.floor((battery - 1) / 20);
					if (level < 0)
						level = 0;
					if (level > 4)
						level = 4;
					this.setVariable("BATTERY_INDEX",  level);
				}
			}
			else if (id == "LOW_BATTERY") {
				if (value) {
					if (!this.LOW_BATTERY_GROUP.isShown())
						this.beforeModal(this.LOW_BATTERY_GROUP);
						this.showClockTime(false);
				}
				else {
					if (this.LOW_BATTERY_GROUP.isShown()) {
						this.afterModal(this.LOW_BATTERY_GROUP);
						this.bubble("messageDisplayBrowsing");
					}
				}
			}
			else if (id == "INVALID_FORMAT") {
				if (value) {
					this.beforeModal(this.INVALID_FORMAT_GROUP);
				}
				else {
					this.afterModal(this.INVALID_FORMAT_GROUP);
				}
			}
			else if (id == "DEVICE_SHUTDOWN") {
				if (value == 1) {
					// Internal memory
					this.beforeModal(this.SHUTDOWN_GROUP);
					ebook.logInteger(101, 1, 0, 1);
					this.doQuit();
				}
				else if (value == 2) {
					// External memory
					this.beforeModal(this.SHUTDOWN_EXTERNAL_GROUP);
					ebook.logInteger(101, 1, 0, 2);
					this.doQuit();
				}
			}
			else if (id == "DEVICE_SHUTDOWN_MODAL") {
				if (value) {
					this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.disableIndicatorIcon(true);
					this.beforeModal(this.DEVICE_SHUTDOWN_MODAL_GROUP);
				}
				else {
					this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.disableIndicatorIcon(false);
					this.afterModal(this.DEVICE_SHUTDOWN_MODAL_GROUP);
				}
			}
			else if (id == "DEVICE_RESTART") {
				if (value) {
					this.beforeModal(this.SHUTDOWN_GROUP);
				}
			}
			else if (id == "OVERLAY") {
				if (!value) {
						this.afterModal(null);
						this.getModel().fullScreenUpdate()
				}
				else {
					this.beforeModal(null);
				}
			}
			else if (id == "CALIBRATION") {
				var orientation = kbook.model.container.getVariable("ORIENTATION")
				if (value) {
					this.beforeModal(this.CALIBRATION_GROUP);
					if (orientation)
						this.CALIBRATION_GROUP.GUIDE.moveBy(0, 103)
					this.CALIBRATION_GROUP.CALIBRATION.show(true)
				}
				else {
					this.afterModal(this.CALIBRATION_GROUP);
					if (orientation)
						this.CALIBRATION_GROUP.GUIDE.moveBy(0, -103)
				}
			}
			else if (id == "CALIBRATION_STEP") {
				this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.START.show(false)
				this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.END.show(false)
				this.CALIBRATION_GROUP.GUIDE.START.show(false)
				this.CALIBRATION_GROUP.GUIDE.FAIL.show(false)
				switch (value) {
					case "START":
						this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.START.show(true)
					case "NEXT":
						this.CALIBRATION_GROUP.GUIDE.START.show(true)
						break
					case "FAIL":
						this.CALIBRATION_GROUP.GUIDE.FAIL.show(true)
						break
					case "END":
						this.DISPLAY_CALIBRATION_GROUP.DISPLAY_CALIBRATION.END.show(true)
						break
				}
			}
			else if (id == "DEMO_MODE_DIALOG") {
				if (value)
					this.beforeModal(this.DEMO_MODE_GROUP);
				else
					this.afterModal(this.DEMO_MODE_GROUP);
			}
			else if (id == "DEMO_MODE_MESSAGE") {
				//for title
				this.DEMO_MODE_GROUP.DEMO_MODE.SETTING.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE.FORMAT_SETTING.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE.FEATURE.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE[value].show(true)
				//for body message
				this.DEMO_MODE_GROUP.DEMO_MODE.TEXT.SETTING.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE.TEXT.FORMAT_SETTING.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE.TEXT.FEATURE.show(false)
				this.DEMO_MODE_GROUP.DEMO_MODE.TEXT[value].show(true)
				if( value == "FEATURE" ){
					this.DEMO_MODE_GROUP.DEMO_MODE.DEMO_BACK.show(false)
				}else{
					this.DEMO_MODE_GROUP.DEMO_MODE.DEMO_BACK.show(true)
				}
			}
			else if (id == "VIEW_STYLE") {
				this.MENU_DETAILS_GROUP.MENU.setViewStyle(value)
			}
			else if (id == "GESTURE_CANCEL") {
				if (value)
					this.GESTURE.cancel()
			}
			else if (id == "COLD_BOOT_WIZARD") {
				if (value) {
					this.beforeModal(this.COLD_BOOT_WIZARD_GROUP.VIEW.COLD_BOOT_WIZARD_GROUP);
				}
				else {
					this.afterModal(this.COLD_BOOT_WIZARD_GROUP.VIEW.COLD_BOOT_WIZARD_GROUP);
				}
			}
			else if (id == "WAN_SWITCH") {
				if (!value) {
					// Wireless switch OFF
					this.bubble("setAntennaStatus");
				}
			}
			else if (id == "NETWORK_STATE") {
				if (value != "prohibited") {
					this.bubble("setAntennaStatus", value);
				}
			}
			else if (id == "NETWORK_DEVICE" || id == "SIGNAL_STRENGTH" || id == "NETWORK_3G") {
				var anntena = this.getVariable("ANTENNA");
				var networkState = this.getVariable("NETWORK_STATE");
				if (anntena != 0 && networkState != "prohibited") {
						this.bubble("setAntennaStatus", networkState);
				}
			}
			else if (id == "SHOW_NETWORK_3G") {
				// iValsun freestyle #805
				// Corrected not to display "3G" icon in status bar when the antenna was "Wireless Off" or "Wireless Standby" or "No Network". 
				// When the antenna was "Wireless Off" or "Wireless Standby" or "No Network", ANIMATE_SHOW is false.
				if (value)
					this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showNetwork3G(true);
				else
					this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showNetwork3G(false);
			}
			else if (id == "NETWORK_PROGRESS") {
				var animate = this.getVariable("ANIMATE_SHOW");
				if (value >= 0 && animate)
					this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showNetworkProgress(true);
				else
					this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showNetworkProgress(false);
			}
			else if (id == "DOWNLOAD_MESSAGE") {
				if (value != "") {
					this.showClockTime(false);
					this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showStatusMessageArea(true);
				}
				else {
					this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showStatusMessageArea(false);
				}
			}
			else if (id == "BATTERY_STATE") {
				if (value == "no") {
					// Battery Removed
					//this.setVariable("BATTERY_SHUTDOWN_MSG", "fskin:/l/strings/STR_UI_MESSAGE_BATTERY_REMOVED_ERR_1".idToString() + "\n" + "fskin:/l/strings/STR_UI_MESSAGE_BATTERY_REMOVED_ERR_2".idToString());
					//this.setVariable("BATTERY_SHUTDOWN_STATUS_MSG", "fskin:/l/strings/STR_UI_MESSAGE_SHUTTINGDOWN".idToString());
					//this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.show(false);
					//this.beforeModal(this.BATTERY_SHUTDOWN_GROUP);
					ebook.logInteger(101, 1, 6, 1);
					//ebook.setExitCode(6);
					//this.doQuit();
				}
				else if (value == "dead") {
					// Dead Battery
					//this.setVariable("BATTERY_SHUTDOWN_MSG", "fskin:/l/strings/STR_UI_MESSAGE_DEAD_BATTERY_ERR_1".idToString() + "\n" + "fskin:/l/strings/STR_UI_MESSAGE_DEAD_BATTERY_ERR_2".idToString());
					//this.setVariable("BATTERY_SHUTDOWN_STATUS_MSG", "fskin:/l/strings/STR_UI_MESSAGE_SHUTTINGDOWN".idToString());
					//this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.show(false);
					//this.beforeModal(this.BATTERY_SHUTDOWN_GROUP);
					ebook.logInteger(101, 1, 6, 2);
					//ebook.setExitCode(6);
					//this.doQuit();
				}
			}
			else if (id == "EXIST_INTERNAL_AUTORUN") {
				this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showTestModeIndicator(value)
			}
			else if (id == "MENU_SORT_SELECTABLE") {
				this.MENU_DETAILS_GROUP.SORTSELECT.modelChanged()
				if (!value && this.SORTSELECT_OVERLAY.isShown())
					this.SORTSELECT_OVERLAY.bubble("doCloseOptMenu")
			}
			// for Simulator
			else if (id == "BROWSE_SWITCH") {
				if (value == 1) {
					this.bubble("doBrowseProgressStart")
				}
				else {
					this.bubble("doBrowseProgressStop")
				}
			}
			else if (id == "DOWNLOAD_SWITCH") {
				if (value == 1) {
					this.bubble("doDownloadProgressStart")
				}
				else {
					this.bubble("doDownloadProgressStop", true)
				}
			}
		]]></function>
		<function id="volumeVisibilityChanged">
			this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showVolimeGroup(this.volumeBlink == 1);
			this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showPlaying(this.control == 1);
		</function>
		<function id="showNetworkProgress" params="value">
			this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showNetworkProgress(value);
		</function>
		<function id="getString" params="id">
			return this.REGION.getString(id);
		</function>
		<function id="changeRegion" params="reg">
			this.REGION.setRegion(reg);
			return this.REGION
		</function>
		<function id="dispatchGesture" params="func, param1, param2, param3"><![CDATA[
			if (this.modal != 0)
				return false
			var target = null
			var state = this.getVariable("STATE")
			switch (state) {
				case "PAGE":
					target = this.PAGE_GROUP.PAGE_SUBGROUP.PAGE
					break
				case "PICTURE":  
					target = this.PICTURE_GROUP.PICTURE
					break;
				case "NOTEPAD_FREEHAND":  
					target = this.NOTEPAD_FREEHAND_GROUP.NOTEPAD_FREEHAND
					break;
				case "NOTEPAD_TEXT":  
					target = this.NOTEPAD_TEXT_GROUP.NOTEPAD_TEXT
					break;
			}
			if (target && func in target)
				return target[func](param1, param2, param3)
			return false
		]]></function>
		<function id="canLine">
			return this.dispatchGesture("canLine")
		</function>
		<function id="doLine" params="direction, down, up">
			return this.dispatchGesture("doLine", direction, down, up)
		</function>
		<function id="canLineAndHold">
			return this.dispatchGesture("canLineAndHold")
		</function>
		<function id="doLineAndHoldStart" params="direction, down, up">
			return this.dispatchGesture("doLineAndHoldStart", direction, down, up)
		</function>
		<function id="doLineAndHoldEnd" params="direction, down, up">
			return this.dispatchGesture("doLineAndHoldEnd", direction, down, up)
		</function>
		<function id="getMultiCheckboxSelectedIndexs">
			return this.MENU_DETAILS_GROUP.MENU.detailsView.getSelectedIndexs();
		</function>
		<function id="setValueToMultiCheckbox" params="index, value">
			return this.MENU_DETAILS_GROUP.MENU.detailsView.setValueToCheckBox(index, value)
		</function>
		<function id="getClockTimeLabel">
			return this.clockTimeLabel
		</function>
		<function id="getClockTimeBackground">
			return this.clockTimeBackground
		</function>
		<function id="getX_clockTimeBackground">
			return this.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.getNetworkProgressRight()
		</function>
		<function id="showClockTime" params="showIt">
			this.clockTimeBackground.show(showIt);
			this.clockTimeBackground.enable(showIt);
			this.clockTimeLabel.show(showIt);
			this.clockTimeLabel.enable(showIt);
		</function>
		<function id="getWifiEventLabel">
			return this.wifiEventLabel
		</function>
		<function id="getWifiEventBackground">
			return this.wifiEventBackground
		</function>
		<function id="showWifiEvent" params="showIt">
			this.wifiEventBackground.show(showIt);
			this.wifiEventBackground.enable(showIt);
			this.wifiEventLabel.show(showIt);
			this.wifiEventLabel.enable(showIt);
		</function>
	</code>
	<clock/>

	<localize path="./" kind="language"/>
	<localize path="./" kind="region"/>

	<kbookLang id="REGION" region="US"/>
	<group id="ABOUT_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="onEnterAboutView" params="flg">
                var uriBase = "about.xml"
                var szLang = kbook.model.language;
                var uri = "./languages/" + szLang + "/"+ uriBase;
				if(flg)
					this.ABOUT.VIEW.setURI(uri)
				else
					this.ABOUT.VIEW.setURI(null)
			</function>
		</code>
		<group id="ABOUT" left="0" right="0" top="0" bottom="0">
			<view id="VIEW" left="0" right="0" top="0" bottom="33"/>
			<kbookStatus left="0" right="0" height="33" bottom="0"/>
			<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" variable="ABOUT_INDEX_COUNT" active="true"/>
			<code>
				<function id="doNext">
					this.setVariable("DO_ABOUT_FUNCTION","doNext")
				</function>
				<function id="doPrevious">
					this.setVariable("DO_ABOUT_FUNCTION","doPrevious")
				</function>
				<function id="pageChanged">
					this.setVariable("DO_ABOUT_FUNCTION","pageChanged")
				</function>
			</code>
		</group>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>
	
	<group id="INFO_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookInfo id="INFO" left="0" right="0" top="0" bottom="33" split="255" href="x-id://infoData">

			<code>
				<function id="pageChanged">
					if (this.isShown()) {
						var c = this.countPages();
						var i = this.getPage() + 1;
						if (!c) c++;
						//this.setVariable("INFO_INDEX_COUNT", i + " of " + c);
						this.setVariable("INFO_INDEX_COUNT", i + "fskin:/l/strings/STR_UI_PARTS_OF".idToString() + c);
					}
				</function>
			</code>
		</kbookInfo>
		<!--button2 skin="menu_close" right="15" top="15" width="41" height="41" can="canMenuClose" do="doMenuClose"/-->
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" variable="INFO_INDEX_COUNT" active="true"/>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>
	
	<group id="MENU_DETAILS_GROUP" left="0" right="0" top="0" bottom="0">
		<fillBackground color="white" left="0" right="0" top="0" bottom="33"/>

		// multi delete
		<code>
			<function id="doRoot">
				this.bubble("closeMenuAndDoRoot");
			</function>
			<function id="doMenuClose">
				this.bubble("closeContentsList", false);
			</function>
			<function id="preDoDeleteContents">
				var indexs = this.MENU.detailsView.getSelectedIndexs();
				this.bubble("doDeleteContents", indexs);
			</function>
			<function id="preDoDeleteProtectionContents">
				var indexs = this.MENU.detailsView.getSelectedIndexs();
				this.bubble("doDeleteProtectionContents", indexs);
			</function>
			<function id="preDoChangeOrderAP">
				var indexs = this.MENU.detailsView.getSelectedIndexs();
				this.bubble("doChangeOrderAccessPoint", indexs);
			</function>

			<!-- [FY10] Ticket#661: setup standby picture -->
			<function id="preDoEditStandbyPicture">
				var indexs = this.MENU.detailsView.getSelectedIndexs();
				this.bubble("doEditStandbyPicture", indexs);
			</function>
				
			<function id="onOK">
				this.bubble("onApplyMenuDetail");
			</function>
		</code>
		<kbookMenuDetails id="MENU" left="0" right="0" top="0" bottom="30" bufferZone="20" sortSelect="true" href="x-id://menuData">
			<code>
				<function id="pageChanged">
					if (this.isShown()) {
						var c = this.countPages();
						var i = this.getPage() + 1;
						if (!c) c++;
						this.setVariable("MENU_INDEX_COUNT", i + "fskin:/l/strings/STR_UI_PARTS_OF".idToString() + c);
					}
				</function>
				<function id="doCheckContent">
					var indexs = this.detailsView.getSelectedIndexs();
					this.bubble("updateSelectedCount", indexs.length);
				</function>
				<function id="doSelectRadioButton" params="checkbox">
					this.detailsView.setValueToRadioButton(checkbox.index);
				</function>
				<function id="doCheckStandbyPicture" params="item">
					var indexs = this.detailsView.getSelectedIndexs();

					var count = indexs.length;
					if (!this.bubble("standbyPictureSelected", item.index, item.getValue())) {
						item.setValue(0);
						count--;
					}

					this.bubble("updateSelectedCount", count);
				</function>
			</code>
			<views>
				<viewStyleDetails id="detailsView" name="details" left="0" right="0" top="0" bottom="0" fixItemHeight="true" lineHeight="2" xSpacing="5" titleIconVisible="false" navbarSeparator="false" adjustTitleTextSizeMin="33" doneButtonWidth="160" default="true">
					<!-- add skin data for Menu List-->
					<fields>
						<fieldCheckbox skin="checkbox" type="multipleCheckbox" do="doCheckContent" can="canDeleteMultipleCheckOne" reaction="false" />
						<fieldCheckbox skin="checkbox_lock" type="multipleCheckbox" do="doCheckContent" can="canDeleteProtectionMultipleCheckOne" reaction="false" />
						<fieldCheckbox skin="radiobutton" type="multipleCheckbox" do="doSelectRadioButton" can="canSelectRadioBotton" reaction="false" />
						<fieldIconProtection skin="protection" type="fieldIconProtection" do="" can="canProtectedContents" />
						<fieldIcon_right skin="protectCheck" type="fieldIcon_right" do="" can="canProtectedContentsList" />
						<fieldIconSubList skin="optSubItem" type="fieldIconSubList" do="" can="canDisplaySubListMark" />

						<fieldCheckbox skin="checkbox" type="multipleCheckbox" do="doCheckStandbyPicture" can="canEditStandbyPicture" reaction="false" />
						<fieldCheckbox skin="checkbox" type="multipleCheckbox" do="doMultiSelectionOne" can="canMultiSelection" canChild="canMultiSelectionOne" reaction="false" />
						<!--fieldButton skin="keyWs2" text="@detail" bw="4" type="button" do="doEditAPSetting" can="canEditAPSetting" /-->
						<fieldIconButton skin="wifiSettingButton" type="button" do="doEditAPSetting" can="canEditAPSetting" />
						<fieldIconAccessPoint skin="ap_protect" type="fieldIconApProtection" do="" can="canApProtect" />
						<fieldIconAccessPoint skin="ap_signal" type="fieldIconApSignal" do="" can="canAPSignal" />
					</fields>
				</viewStyleDetails>
				<viewStyleDetails2 id="detailsView" name="titleonly" left="0" right="0" top="0" bottom="0" fixItemHeight="true" lineHeight="2" xSpacing="5" titleIconVisible="false" navbarSeparator="false" adjustTitleTextSizeMin="33" doneButtonWidth="160" default="true">
					<!-- add skin data for Menu List-->
					<fields>
						<fieldCheckbox skin="checkbox" type="multipleCheckbox" do="doCheckContent" can="canDeleteMultipleCheckOne" reaction="false" />
						<fieldCheckbox skin="checkbox_lock" type="multipleCheckbox" do="doCheckContent" can="canDeleteProtectionMultipleCheckOne" reaction="false" />
						<fieldCheckbox skin="radiobutton" type="multipleCheckbox" do="doSelectRadioButton" can="canSelectRadioBotton" reaction="false" />
						<fieldIconProtection skin="protection" type="fieldIconProtection" do="" can="canProtectedContents" />
						<fieldIcon_right skin="protectCheck" type="fieldIcon_right" do="" can="canProtectedContentsList" />
						<fieldIconSubList skin="optSubItem" type="fieldIconSubList" do="" can="canDisplaySubListMark" />

						<fieldCheckbox skin="checkbox" type="multipleCheckbox" do="doCheckStandbyPicture" can="canEditStandbyPicture" reaction="false" />
						<fieldCheckbox skin="checkbox" type="multipleCheckbox" do="doMultiSelectionOne" can="canMultiSelection" canChild="canMultiSelectionOne" reaction="false"/>
					</fields>
				</viewStyleDetails2>
				<viewStyleThumbnail id="thumbnailView" name="thumbnail" left="0" right="0" top="0" bottom="0" minWidth="180" minHeight="210" titleIconVisible="false" marginBottomHeight="5" adjustTitleTextSizeMin="33" doneButtonWidth="160" default="false">
					<fields>
						<fieldIconSubList skin="optSubItem" type="fieldIconSubList" do="" can="canDisplaySubListThumbnail" xOffset="0" yOffset="0"/>
						<fieldCheckbox skin="checkbox" type="multipleCheckbox" do="doCheckContent" can="canDeleteMultipleCheckOne" xOffset="21" yOffset="20"  reaction="false"/>
						<fieldCheckbox skin="checkbox_lock" type="multipleCheckbox" do="doCheckContent" can="canDeleteProtectionMultipleCheckOne" xOffset="21" yOffset="20" reaction="false"/>
						<fieldCheckbox skin="radiobutton" type="multipleCheckbox" do="doSelectRadioButton" can="canSelectRadioBotton" reaction="false" />
						<fieldIcon skin="newIcon" type="fieldIcon" do="" can="canNewContents" xOffset="-24" yOffset="20"/>
						<fieldIconProtection skin="protection" type="fieldIconProtection" do="" can="canProtectedContents" />
						<fieldIcon_right skin="protectCheck" type="fieldIcon_right" do="" can="canProtectedContentsTumb" xOffset="21" yOffset="20"/>

						<fieldCheckbox skin="checkbox" type="multipleCheckbox" do="doCheckStandbyPicture" can="canEditStandbyPicture" xOffset="21" yOffset="20" reaction="false"/>
						<fieldCheckbox skin="checkbox" type="multipleCheckbox" do="doMultiSelectionOne" can="canMultiSelection" canChild="canMultiSelectionOne" xOffset="21" yOffset="20" reaction="false"/>
					</fields>
				</viewStyleThumbnail>
			</views>
		</kbookMenuDetails>
		<kbookNavbar menu="MENU" right="0" width="44" top="70" bottom="30" />
		<kbookStatus skin="kbookMenuStatus" left="0" right="0" height="33" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" variable="MENU_INDEX_COUNT" active="true"/>

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" can="canBack" do="doMenuClose"/>

		// multi delete
		<!-- num of selected item -->
		<!--kbookLabel id="COUNTER" skin="selectedCount" right="160" top="40" height="30" width="300" align="right" variable="SELECTED_NUM" active="false"/-->

		<!-- OK button -->
		<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" width="206" height="42" bottom="47" visible="false" active="false" do="onOK" />

		<!-- done button -->
		<invisibleButton skin="keyWs2" variable="VAR_STR_DELETE_PROTECT_DONE" right="5" top="8" width="160" height="58" can="canDeleteMultipleCheck" do="preDoDeleteContents"/>
		<invisibleButton skin="keyWs2" variable="VAR_STR_DELETE_PROTECT_DONE" right="5" top="8" width="160" height="58" can="canDeleteProtectionMultipleCheck" do="preDoDeleteProtectionContents"/>
		<invisibleButton skin="keyWs2" variable="VAR_STR_DELETE_PROTECT_DONE" right="5" top="8" width="160" height="58" can="canMultiSelection" do="doMultiSelection"/>
		<invisibleButton skin="keyWs2" variable="VAR_STR_DELETE_PROTECT_DONE" right="5" top="8" width="160" height="58" can="canSelectRadioBotton" do="preDoChangeOrderAP"/>

		<!-- [FY10] Ticket#661: setup standby picture -->
		<invisibleButton skin="keyWs2" variable="VAR_STR_DELETE_PROTECT_DONE" right="5" top="8" width="160" height="58" can="canEditStandbyPictureMultipleCheck" do="preDoEditStandbyPicture"/>

		<extraHitAreaButton skin="btnQuickSort" id="SORTSELECT" right="0" top="24" width="42" height="30" topExtra="28" bottomExtra="12" can="canSortSelect" do="doSortSelect"/>

	</group>
	
	<view href="menuHomeGroup.xml" id="MENU_HOME_GROUP" left="0" right="0" top="0" bottom="0"/>
	
	<view href="browserGroup.xml" id="BROWSER_GROUP" left="0" right="0" top="0" bottom="0"/>

	<view href="settingNetwork.xml" id="SETTING_NETWORK" left="0" right="0" top="0" bottom="0"/>

	<group id="DICTIONARY_GROUP" left="0" right="0" top="0" bottom="0" >
		<group id="DICTIONARY" left="0" right="0" top="0" bottom="0" >
			<kbookStatus skin="kbookMenuStatus" left="0" right="0" height="33" bottom="0"/>
		</group>
	</group>

	<!-- [FY10] Ticket#678: Support Setting Menu Valiation -->
	<group id="SCROLL_SETTING_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMenu">
				this.bubble("doMenuClose2")
			</function>
			<function id="onOK">
				var indexs = this.PANEL.SCROLL_SETTING.detailsView.getSelectedIndexs();
				this.bubble("onApplyScrollSetting", indexs[0]);
			</function>

			<function id="getPanelBottom">
				return 100;
			</function>
			<function id="getButtonBottom">
				return 47;
			</function>
		</code>

		<fillBackground color="white" left="0" right="0" top="0" bottom="33"/>
		<group id="PANEL" left="0" right="0" top="0" bottom="100">
			<kbookMenuDetails id="SCROLL_SETTING" left="0" right="0" top="0" bottom="0" bufferZone="20" href="x-id://scrollSettingData">
				<code>
					<function id="pageChanged">
						if (this.isShown()) {
							var c = this.countPages();
							var i = this.getPage() + 1;
							if (!c) c++;
							this.setVariable("SETTING_INDEX_COUNT", i + "fskin:/l/strings/STR_UI_PARTS_OF".idToString() + c);
						}
					</function>
					<function id="doCheckContent" params="item">
						var view = this.detailsView;
						this.bubble("selectItem", view, item.index);
					</function>
				</code>
				<views>
					<viewStyleDetails id="detailsView" name="details" left="0" right="0" top="0" bottom="0" fixItemHeight="true" lineHeight="2" xSpacing="5" titleIconVisible="false" navbarSeparator="false" adjustTitleTextSizeMin="33" default="true" bottomLineVisible="true">
						<fields>
							<fieldCheckbox skin="radiobutton" type="multipleCheckbox" do="doCheckContent" can="canCheckBoxOfSetting" reaction="false" />
						</fields>
					</viewStyleDetails>
				</views>
			</kbookMenuDetails>
			<kbookNavbar menu="SCROLL_SETTING" bottomLine="true" right="0" width="44" top="70" bottom="0" />
		</group>
		<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" width="206" height="42" bottom="47" do="onOK"/>

		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" variable="SETTING_INDEX_COUNT" active="true"/>

		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose2"/>
	</group>

	<kbookPanel id="PAGE_GROUP" toolbar="OPTION_OVERLAY_PAGE_TOOLBAR" offset="60" main="PAGE_SUBGROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<keys>
			<key code="8" can="canGotoParent" do="doGotoParent"/>
		</keys>
		<code>
			<function id="doDigit" params="part"><![CDATA[
				var c = this.PAGE_SUBGROUP.PAGE.countPages(true).toString().length - 1;
				var s = "";
				for (var i = 0; i < c; i++)
					s += "_";
				s += part.key.charAt(0);
				this.setVariable("GOTO_VARIABLE", s);
				var container = this.container;
				container.beforeModal(container.GOTO_GROUP);
			]]></function>
			<function id="getOverlayBounds" params="tmpBounds"><![CDATA[
				var page = this.PAGE_SUBGROUP.PAGE;
				var navi = this.PAGE_SUBGROUP.PAGE_NEWSNAVIBAR.VIEW.PAGE_NEWSNAVIBAR;
				var toolOverlay =  this.OPTION_OVERLAY_PAGE_TOOLBAR;
				if (navi.isShown())
					tmpBounds.set(page.getX(), page.getY(), page.getWidth(), page.getHeight());
				else
					tmpBounds.set(toolOverlay.getX(), toolOverlay.getY(), toolOverlay.getWidth(), toolOverlay.getHeight());
				return tmpBounds;
			]]></function>
			<function id="getToolBarBound" params="tmpBounds"><![CDATA[
				var toolbar =  this.OPTION_OVERLAY_PAGE_TOOLBAR.TOOLBAR_GROUP;
				return tmpBounds.set(toolbar.getX(), toolbar.getY(), toolbar.getWidth(), toolbar.getHeight());
			]]></function>
			<function id="isShownNewsNaviBar"><![CDATA[
				return this.PAGE_SUBGROUP.PAGE_NEWSNAVIBAR.VIEW.PAGE_NEWSNAVIBAR.isShown();
			]]></function>
			<function id="isShownToolBar"><![CDATA[
				return this.OPTION_OVERLAY_PAGE_TOOLBAR.isShown();
			]]></function>
			<function id="getBookData">
				var page = this.PAGE_SUBGROUP.PAGE;
				return page;
			</function>
			<function id="showBookSizeIcon" params="showIt">
				this.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showBookSizeIndicator(showIt);
			</function>
		</code>
		<kbookOverlay id="OPTION_OVERLAY_PAGE_TOOLBAR" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://pageOptionToolbarOverlayModel">
			<code>
				<function id="variableChanged" params="id, value">
					arguments.callee.grammar.call(this, id, value);
					
					if (id == "SHOW") {
						this.show(value);
						this.enableToolbar(value);
						if(value)
							this.container.PAGE_SUBGROUP.PAGE.focus(value);
						value ? this.getModel().opened(this): this.getModel().closed();
					}
				</function>
				<function id="enableToolbar" params="enableIt">
					this.TOOLBAR_GROUP.show(enableIt);
				</function>
			</code>

			<panel skin="kbarea" left="0" right="0" top="0" height="60" active="true"/>
			<group id="TOOLBAR_GROUP" left="0" right="0" top="0" height="60">
				<kbookCheck skin="tool_check_pen" variable="PEN_TYPE" on="PEN" off="NONE" top="8" left="8" width="80" height="42" do="doToolPen"/>
				<kbookCheck skin="tool_check_freehand" variable="PEN_TYPE" on="FREEHAND" off="NONE" top="8" left="96" width="80" height="42" do="doToolPen"/>
				<kbookCheck skin="tool_check_eraser" variable="PEN_TYPE" on="ERASER" off="NONE" top="8" left="184" width="80" height="42" do="doToolPen"/>
				<kbookButton id="MYNOTE" skin="toolBar_myNote" top="8" left="272" width="136" height="42" text="fskin:/l/strings/KBOOK_UI_MYNOTE" do="doMyNote"/>
				<kbookCheck skin="tool_bookmarkOnOff_Left" variable="BOOKMARK_LEFT" on="HAS_BOOKMARK_LEFT" off="NO_BOOKMARK_LEFT" top="8" right="170" width="80" height="42" can="canToolBookMarkLeft" do="doToolBookmarkOnOffLeft"/>
				<kbookCheck skin="tool_bookmarkOnOff" variable="BOOKMARK" on="HAS_BOOKMARK" off="NO_BOOKMARK" top="8" right="82" width="80" height="42" can="canToolBookMark" do="doToolBookmarkOnOff"/>
				<button2 id="TOOLBARCLOSE" skin="toolBar_close" right="24" top="8" width="42" height="42" do="doCloseToolbar"/>
			</group>
		</kbookOverlay>
		<group id="PAGE_SUBGROUP" left="0" right="0" top="0" bottom="30">
			<code>
				<function id="doNext">
					this.PAGE.bubble("doNext");
				</function>
				<function id="doPrevious">
					this.PAGE.bubble("doPrevious");
				</function>
				<function id="doNextHold">
					this.PAGE.bubble("doNextHold");
				</function>
				<function id="doPreviousHold">
					this.PAGE.bubble("doPreviousHold");
				</function>
				<function id="doMenu" params="args">
					this.PAGE.bubble("doMenu", args);
				</function>
				<function id="doRoot">
					this.PAGE.bubble("doRoot");
				</function>
			</code>
			<kbookPage id="PAGE" left="0" right="0" top="0" bottom="0" dynamicScrollHeight="true" maxPartOfScroll="3" NotMarkOverlapArea="true" href="x-id://bookData">
				<tools variable="PEN_TYPE" pen="PEN" point="POINT" eraser="ERASER" freehand="FREEHAND" off="NONE"/>
				<controls>
					<control variable="SHOW_HIGHLIGHTS" do="doShowHighlights"/>
				</controls>
				<code>
					<function id="onTurnPages">
					</function>
					
					<function id="pageChanged"><![CDATA[
						if (this.isShown()) {
							this.onPageChanged()
							var p = this.container.container;
							p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.setBookSizeIndicator(this.getScale());
							p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.setHalfPageIndicator(this.getHalfPageWrapped());
							p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.setSplitPageIndicator(this.getSplitPageWrapped());
							var c = this.countPages(true);
							var i = this.componentPages();
							if (!c) c++;
							p.PAGE_INFO.setVariable("BOOK_INDEX_COUNT", i + "fskin:/l/strings/STR_UI_PARTS_OF".idToString() + c);
							p.modelChanged();
							if (p.container.OPTION_OVERLAY_PAGE_JUMPBAR.isShown() && !p.MONOCHROME_PAGE.isShown())
								p.container.OPTION_OVERLAY_PAGE_JUMPBAR.getModel().onPageChanged()
							if (p.container.OPTION_OVERLAY_PAGE_HISTORICAL.isShown())
								p.container.OPTION_OVERLAY_PAGE_HISTORICAL.getModel().updateHistoryBtn();
						}
					]]></function>
					<function id="modelChanged">
						var p = this.container.container;
						var state = p.container.getVariable("STATE");
						if (!this.isShown() || p.container.state != state) {
							p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showBookSizeIndicator(false);
							p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showHalfPageIndicator(false);
							p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showSplitPageIndicator(false);
						}
						arguments.callee.grammar.call(this)
					</function>
					<function id="updateHalfPageIcon" params="state">
						var p = this.container.container;
						p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.setHalfPageIndicator(state);
					</function>
					<function id="updateSplitPageIcon" params="state">
						var p = this.container.container;
						p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.setSplitPageIndicator(state);
					</function>
					<function id="showSplitHalfPageIcon" params="split, half">
						var p = this.container.container;
						p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showSplitPageIndicator(split);
						p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showHalfPageIndicator(half);
					</function>
					<function id="onStartFastTurnPage">
						var p = this.container.container;
						p.MONOCHROME_PAGE.moveTo(this.getX(), this.getY())
						p.MONOCHROME_PAGE.sizeTo(this.getWidth(), this.getHeight())
						p.MONOCHROME_PAGE.show(true)
						p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.MONOCHROME_LABEL.show(true)
						p.MONOCHROME_MODE.show(true)
					</function>
					<function id="onStopFastTurnPage">
						var p = this.container.container;
						p.MONOCHROME_PAGE.show(false)
						p.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.MONOCHROME_LABEL.show(false)
						p.MONOCHROME_MODE.show(false)
					</function>
					<function id="getCurrentID">
						var p = this.container.container;
						return p.MONOCHROME_MODE.getCurrentID()
					</function>
					<function id="getDrawnID">
						var p = this.container.container;
						return p.MONOCHROME_MODE.getDrawnID()
					</function>
					<function id="onStartSelection">
						var p = this.container.container;
						p.PARTIAL_MODE.show(true)
					</function>
					<function id="onStopSelection">
						var p = this.container.container;
						p.PARTIAL_MODE.show(false)
					</function>
					<function id="onStartFreehand">
						var p = this.container.container;
						p.PARTIAL_MODE.show(true)
					</function>
					<function id="onStopFreehand">
						var p = this.container.container;
						p.PARTIAL_MODE.show(false)
					</function>
					<function id="adjustNewspaperUI" params="showIt">
						var head = this.container.PAGE_NEWSHEADER;
						var navi = this.container.PAGE_NEWSNAVIBAR.VIEW.PAGE_NEWSNAVIBAR;

						var newPageY = (showIt) ? head.getY() + head.getHeight() : head.getY();
						var newPageHeight = (showIt) ? navi.getY() - head.getY() - head.getHeight()
													: navi.getY() + navi.getHeight() - head.getY();
						if (this.getY() != newPageY)
							this.moveBy(0, newPageY - this.getY());
						if (this.getHeight() != newPageHeight)
							this.sizeBy(0, newPageHeight - this.getHeight());

						head.show(showIt);
						navi.show(showIt);
						if (showIt)
							this.enableNewspaperUI(true);
					</function>
					<function id="enableNewspaperUI" params="enableIt">
						if (enableIt) {
							var orientation = kbook.model.container.getVariable("ORIENTATION")
							this.container.PAGE_NEWSNAVIBAR.VIEW.PAGE_NEWSNAVIBAR.PAGE_NEWSNAVIBAR_V.show(!orientation);
							this.container.PAGE_NEWSNAVIBAR.VIEW.PAGE_NEWSNAVIBAR.PAGE_NEWSNAVIBAR_H.show(orientation);
						}
						else {
							this.container.PAGE_NEWSNAVIBAR.VIEW.PAGE_NEWSNAVIBAR.PAGE_NEWSNAVIBAR_V.show(false);
							this.container.PAGE_NEWSNAVIBAR.VIEW.PAGE_NEWSNAVIBAR.PAGE_NEWSNAVIBAR_H.show(false);
						}
					</function>
					<function id="setNavibarLabels" params="id, txt, en">
						var grpV = this.container.PAGE_NEWSNAVIBAR.VIEW.PAGE_NEWSNAVIBAR.PAGE_NEWSNAVIBAR_V;
						grpV[id].setText(txt);
						grpV[id].show(en);
						var grpH = this.container.PAGE_NEWSNAVIBAR.VIEW.PAGE_NEWSNAVIBAR.PAGE_NEWSNAVIBAR_H;
						grpH[id].setText(txt);
						grpH[id].show(en);
					</function>
					<function id="isToolbarShown">
						return this.container.container.OPTION_OVERLAY_PAGE_TOOLBAR.isShown();
					</function>
				</code>
			</kbookPage>

			<group id="PAGE_NEWSHEADER" left="0" right="0" top="0" height="65" visible="false">
				<fillBackground color="#000000" left="0" right="0" top="0" height="40"/>
				<fillBackground color="#3A3A3A" left="0" right="0" height="25" bottom="0"/>
				<group id="PAGE_NEWSHEADER_LABELS" left="0" right="0" top="0" bottom="0">
					<kbookLabel skin="headlineTitle" left="0" right="280" top="0" height="40" variable="NEWSPAPER_TITLE"/>
					<kbookLabel skin="headlineDate" width="280" right="0" top="0" height="40" align="right" variable="NEWSPAPER_DATE"/>
					<kbookLabel skin="headlineNote" left="0" right="0" top="40" height="25" variable="NEWSPAPER_HEADER"/>
				</group>
				<control width="70" right="0" top="0" bottom="0">
					<code>
						<function id="canDoubleTap">
							return !(this.container.container.container.container.SEARCH_RESULT.isShown())
						</function>
						<function id="doDoubleTap">
							var target = this.container.container.container.PAGE_SUBGROUP.PAGE
							target.doDoubleTap(target.getX() + target.getWidth() - 1, target.getY())
						</function>
						<function id="doGestureFail">
							this.bubble("doBlink")
						</function>
					</code>
				</control>
			</group>

			<view href="pageNewsNaviBar.xml" id="PAGE_NEWSNAVIBAR" left="0" right="0" top="0" bottom="0"/>
			
		</group>
		<kbookStatus id="KBOOKSTATUS" skin="kbookPageStatus" left="0" right="0" height="30" bottom="0"/>
		<group id="PAGE_INFO" left="0" right="0" height="0" bottom="0">
			<model>
				<variable id="BOOK_INDEX_COUNT"/>
			</model>
			<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" variable="BOOK_INDEX_COUNT" do="doGoToJumpBar" active="true"/>
		</group>
		<monochrome id="MONOCHROME_PAGE" left="0" right="0" top="0" bottom="30" visible="false"/>
		<eInkPanel id="MONOCHROME_MODE" mode="sync" frame="true" left="0" right="0" top="0" bottom="0" visible="false"/>
		<eInkPanel id="PARTIAL_MODE" mode="partial" frame="true" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookPanel>
	
	<group id="GOTO_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doDigit" params="part"><![CDATA[
				var s = this.getVariable("GOTO_VARIABLE");
				if (s.charAt(0) == "_") {
					s = s.slice(1) + part.key.charAt(0);
				}
				else {
					var c = s.length - 1;
					var s = "";
					for (var i = 0; i < c; i++)
						s += "_";
					s += part.key.charAt(0);
				}
				this.setVariable("GOTO_VARIABLE", s);
			]]></function>
			<function id="doCenter">
				var s = this.getVariable("GOTO_VARIABLE");
				s = s.replace(/_/g, "");
				this.container.afterModal(this);
				this.container.PAGE_GROUP.PAGE_SUBGROUP.PAGE.bubble("doGoto", s);
			</function>
			<function id="doLeft"><![CDATA[
				var s = this.getVariable("GOTO_VARIABLE");
				var c = s.length;
				s = "_" + s;
				s = s.slice(0, c);
				this.setVariable("GOTO_VARIABLE", s);
			]]></function>
			<function id="doMenu"><![CDATA[
				this.container.afterModal(this);
			]]></function>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doRoot">
				this.bubble("doBlink");
			</function>
		</code>
		<background skin="diskBackground" left="0" right="0" top="0" bottom="30"/>
		<group width="140" height="140">
			<sprite skin="diskSprite" u="127" left="0" right="0" top="0" bottom="0"  active="false"/>
			<!--kbookLabel skin="message" left="0" right="0" top="30" height="40" align="center" text="PAGE"/-->
			<kbookLabel skin="message" left="0" right="0" top="30" height="40" align="center" textresource="STR_UI_GOTOPAGE"/>

			<kbookLabel skin="message" left="-2" right="0" height="50" bottom="20" align="center" variable="GOTO_VARIABLE"/> <!-- temporary fix of #79 -->
		</group>
	</group>
	
	<group id="PICTURE_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookImage id="PICTURE" left="0" right="0" top="0" bottom="33" active="true" href="x-id://imageData">
			<code>
				<function id="doFirst">
					this.bubble("doGotoFirstPicture");
				</function>
				<function id="doLast">
					this.bubble("doGotoLastPicture");
				</function>
				<function id="doNext">
					this.bubble("doGotoNextPicture");
				</function>
				<function id="doPrevious">
					this.bubble("doGotoPreviousPicture");
				</function>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
		</kbookImage>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<!--kbookIndicator skin="sizeIndicator" left="90" bottom="0" variable="PICTURE_SIZE"/-->
		<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" variable="PICTURE_INDEX_COUNT" active="true"/>
	</group>
	
	<group id="SETTING_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookSetting id="SETTING" left="0" right="0" top="0" bottom="30" fixItemHeight="true" centeringNumberKeysH="true" href="x-id://settingData">
		</kbookSetting>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>

		<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_SINGLEPAGE" active="true"/>

		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" can="canBack" do="doMenuClose"/>
	</group>

	<view href="bootWizard.xml" id="COLD_BOOT_WIZARD_GROUP" left="0" right="0" top="0" bottom="0"/>
	
	<view href="songGroup.xml" id="SONG_GROUP" left="0" right="0" top="0" bottom="0"/>
	
	<group id="AUTORUN_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookView id="AUTORUN" href="" left="0" right="0" top="0" bottom="0"/>
	</group>
	
	<group id="SOFT_RESET_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookReset" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="soft-reset" left="0" width="70" top="0" height="70" active="false"/>
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_RESTOREDEFAULTS"/>
		<group id="SOFT_RESET" left="0" right="0" height="250">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>

			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="150" value="fskin:/l/strings/STR_UI_MESSAGE_RESET"/>
			<group top="150" width="296" height="42">
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doSoftReset" />
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
		</group>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="FORMAT_DEVICE_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookFormatFlash" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="format-internal" left="0" width="70" top="0" height="70" active="false"/>

		<kbookLabel skin="title2" left="70" right="0" top="0" height="70" align="left" textresource="STR_UI_MESSAGE_FORMATINTERNALMEMORY"/>

		<!--group id="FORMAT_DEVICE" width="480" height="231"-->
		<group id="FORMAT_DEVICE" left="0" right="0" height="300">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_2"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="88" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_3"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="132" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_4"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="200" value="fskin:/l/strings/STR_UI_MESSAGE_FORMATDEVICE"/>

			<!--group top="188" width="296" height="42"-->
			<group top="200" width="296" height="42">
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doFormatFlash" />
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
		</group>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="FORMAT_MS_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookFormatFlash" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="format-ms" left="0" width="70" top="0" height="70" active="false"/>

		<kbookLabel skin="title2" left="70" right="0" top="0" height="70" align="left" textresource="STR_UI_MESSAGE_FORMATEXTERNALMEMORY_MS"/>

		<!--group id="FORMAT_MS" width="480" height="231"-->
		<group id="FORMAT_MS" left="0" right="0" height="300">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_E2"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="88" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_3"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="132" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_4"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="200" value="fskin:/l/strings/STR_UI_MESSAGE_FORMATDEVICE_MS"/>

			<!--group top="188" width="296" height="42"-->
			<group top="200" width="296" height="42">
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doFormatMSFlash" />
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
		</group>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="FORMAT_SD_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookFormatFlash" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="format-sd" left="0" width="70" top="0" height="70" active="false"/>

		<kbookLabel skin="title2" left="70" right="0" top="0" height="70" align="left" textresource="STR_UI_MESSAGE_FORMATEXTERNALMEMORY_SD"/>

		<!--group id="FORMAT_SD" width="480" height="231"-->
		<group id="FORMAT_SD" left="0" right="0" height="300">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_E2"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="88" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_3"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="132" height="44" align="center" textresource="STR_UI_MESSAGE_FORMATDEVICE_4"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="200" value="fskin:/l/strings/STR_UI_MESSAGE_FORMATDEVICE_SD"/>

			<!--group top="188" width="296" height="42"-->
			<group top="200" width="296" height="42">
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doFormatSDFlash" />
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
		</group>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="DELETE_BOOK_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookDeleteBook" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="delete-book" left="0" width="70" top="0" height="70" active="false"/>
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" variable="DELETEBOOK_TITLE"/>
		<group id="DELETE_BOOK" left="0" right="0" height="300">
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="120" variable="DELETEBOOK_NOTICE"/>

			<group top="120" width="296" height="42">
				<code>
					<function id="doOK">
						var isShow = this.container.container.isShown();
						this.bubble("doMenu");
						if (isShow)
							this.bubble("doDeleteBook");
					</function>
				</code>
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doOK" />
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
			<group top="235" width="570" height="90">
				<!--image left="10" top="0" width="51" height="68" href="x-id://bookCoverData"/-->
				<kbookLabel skin="settingsMessage" top="0" left="100" width="480" height="90" align="left" variable="DELETEBOOK_MSG"/>
			</group>
		</group>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="DELETE_BOOK_GROUP_ERR" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doMenu">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doRoot">
				this.bubble("doDeleteBookErr")
				this.container.bubble("doRoot")
			</function>
			<function id="doSearch">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doOption">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doSize">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doNext">
				this.bubble("doDeleteBookErr")
			</function>
			<function id="doPrevious">
				this.bubble("doDeleteBookErr")
			</function>
		</code>
		<panel skin="kbookDeleteBook" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="delete-book" left="0" width="70" top="0" height="70" active="false"/>
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" variable="DELETEBOOK_TITLE"/>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>

		<group id="DELETE_BOOK_ERR" left="0" right="0" height="300">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="192" variable="DELETEBOOK_NOTICEERR"/>

			<group top="192" width="296" height="42">
				<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" top="0" width="206" height="42" do="doDeleteBookErr"/>
			</group>
		</group>
	</group>
	<group id="DELETE_HISTORICAL_WORDS_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookDeleteHistoricalWords" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="delete-historical-words" left="0" width="70" top="0" height="70" active="false"/>
		<!--kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" text="Clear Keyboard History"/-->
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_CLEARKEYBOARDHISTORY"/>

		<!--group id="DELETE_HISTORICAL_WORDS" width="480" height="143"-->
		<group id="DELETE_HISTORICAL_WORDS" left="0" right="0" height="143">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_DELETEHISTORICAL_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_DELETEHISTORICAL_2"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DELETEHISTORICAL"/>

			<group top="100" width="296" height="42">
				<!--button2 id="YES" skin="kbookDialogYesButton" top="0" left="0" width="142" height="42" do="doDeleteHistoricalWords" /-->
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doDeleteHistoricalWords" />
				<!--button2 id="NO" skin="kbookDialogNOButton" top="0" right="0" width="142" height="42" do="doMenuClose" /-->
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
			</group>
		</group>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>
	
	<group id="DEVICE_SHUTDOWN_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookDeviceShutdown" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="device-shutdown" left="0" width="70" top="0" height="70" active="false"/>
		<!--kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" text="Device Shutdown"/-->
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_DEVICESHUTDOWN"/>

		<!--group id="DEVICE_SHUTDOWN" width="480" height="143"-->
		<group id="DEVICE_SHUTDOWN" left="0" right="0" height="180">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>

			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_DEVICE_SHUTDOWN_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_DEVICE_SHUTDOWN_2"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="137" value="fskin:/l/strings/STR_UI_MESSAGE_DEVICE_SHUTDOWN"/>

			<group top="150" width="296" height="42">
				<!--button2 id="YES" skin="kbookDialogYesButton" top="0" left="0" width="142" height="42" do="doDeviceShutdown" /-->
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doDeviceShutdown" />
				<!--button2 id="NO" skin="kbookDialogNOButton" top="0" right="0" width="142" height="42"-->
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42">
					<code>
						<function id="click">
							this.bubble("doMenuClose", this);
						</function>
					</code>
				</button2icon>
			</group>
		</group>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<group id="HARD_RESET_GROUP" left="0" right="0" top="0" bottom="0" visible="false" active="true">
		<panel skin="kbookReset" left="0" right="0" top="0" bottom="0"/>
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_UI_MESSAGE_HARDRESET"/>
		<group id="HARD_RESET" width="480" height="440" visible="true" active="true">
			<code>
				<function id="doMenu">
					this.bubble("doNoHardReset");
				</function>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
				<function id="doRoot">
					this.bubble("doNoHardReset");
				</function>

				<function id="doOption">
					this.bubble("doHardReset");
				</function>
			</code>
			<!--text skin="settingText" active="false" left="0" right="0" top="140" height="200" value="Do you want to DELETE all content, restore all factory settings, and clear the DRM authorization state?"/-->
			<kbookText skin="settingText" active="false" left="0" right="0" top="80" height="400" value="fskin:/l/strings/STR_UI_MESSAGE_HARDRESETOPERATION"/>
		</group>
	</group>
	
	<group id="DISPLAY_CALIBRATION_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<panel skin="kbookDisplayCalibration" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="display-calibration" left="0" width="70" top="0" height="70" active="false"/>
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_TOUCHPANEL"/>
		<group id="DISPLAY_CALIBRATION" left="0" right="0" top="0" bottom="0">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<group id="START" left="0" right="0" height="143">
				<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DISPLAY_CALIBRATIONSTART"/>

				<group top="100" width="296" height="42">
					<button2icon id="Yes" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42" do="doDisplayCalibration"/>
					<button2icon id="No" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42" do="doMenuClose" />
				</group>
			</group>
			<group id="END" left="0" right="0" height="143">
				<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DISPLAY_CALIBRATIONEND"/>
				<group top="100" width="296" height="42">
					<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" top="0" width="142" height="42" do="doMenuClose"/>
				</group>
			</group>
		</group>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenuClose"/>
	</group>

	<kbookPanel2 id="NOTEPAD_FREEHAND_GROUP" toolbar="OVERLAY_NOTEPAD_FREEHAND_TOOLBAR" main="NOTEPAD_FREEHAND" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="modelChanged">
				var state = this.container.getVariable("STATE");
				if (!this.isShown() || this.container.state != state) {
					this.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showHalfFreehandIndicator(false);
				}
				arguments.callee.grammar.call(this)
			</function>
			<function id="showHalfFreehandIcon" params="showIt">
				this.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showHalfFreehandIndicator(showIt);
			</function>
			<function id="updateHalfFreefandIcon" params="state">
				this.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.setHalfFreehandIndicator(state);
			</function>
		</code>
		<kbookOverlay id="OVERLAY_NOTEPAD_FREEHAND_TOOLBAR" left="0" right="0" top="0" bottom="30" href="x-id://notepadOverlayModel">
			<code>
				<function id="variableChanged" params="id, value">
					arguments.callee.grammar.call(this, id, value);
					if (id == "SHOW") {
						this.show(value);
						this.enableToolbar(value);
						value ? this.getModel().opened(this) : this.getModel().closed();
					}
				</function>
				<function id="enableToolbar" params="enableIt">
					this.NOTEPAD_FREEHAND_TOOLBAR_GROUP.show(enableIt);
				</function>
				<function id="setToolbarMode" params="mode">
					if (mode == "view") {
						this.NOTEPAD_FREEHAND_TOOLBAR_GROUP.NOTEPAD_FREEHAND_TOOLBAR_VIEW_GROUP.show(true);
						this.NOTEPAD_FREEHAND_TOOLBAR_GROUP.NOTEPAD_FREEHAND_TOOLBAR_EDIT_GROUP.show(false);
					} else if (mode == "edit") {
						this.NOTEPAD_FREEHAND_TOOLBAR_GROUP.NOTEPAD_FREEHAND_TOOLBAR_VIEW_GROUP.show(false);
						this.NOTEPAD_FREEHAND_TOOLBAR_GROUP.NOTEPAD_FREEHAND_TOOLBAR_EDIT_GROUP.show(true);
					}
				</function>
			</code>
			<panel skin="kbarea" left="0" right="0" top="0" height="60" active="true"/>
			<group id="NOTEPAD_FREEHAND_TOOLBAR_GROUP" left="0" right="0" top="0" height="60">
				<group id="NOTEPAD_FREEHAND_TOOLBAR_VIEW_GROUP" left="0" right="0" top="0" height="60" visible="true">
					<button2icon skin="keyW2" left="15" top="4" width="160" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" bw="4" do="doNotepadEdit"/>
					<button2icon skin="keyW2" right="76" top="4" width="126" height="50" text="fskin:/l/strings/STR_UI_BUTTON_NEW" bw="4" do="doNotepadNew"/>
					<button2 skin="toolBar_close" right="24" top="8" width="42" height="42" do="doNotepadBack"/>
				</group>
				<group id="NOTEPAD_FREEHAND_TOOLBAR_EDIT_GROUP" left="0" right="0" top="0" height="60" visible="false">
					<kbookCheck skin="tool_check_freehand" top="8" left="8" width="80" height="42" variable="NOTEPAD_EDIT_MODE" on="FREEHAND" off="FREEHAND" do="doNotepadFreehand"/>
					<kbookCheck skin="tool_check_eraser" top="8" left="96" width="80" height="42" variable="NOTEPAD_EDIT_MODE" on="ERASER" off="ERASER" do="doNotepadEraser"/>
					<button2icon skin="keyW2" right="206" top="4" width="126" height="50" text="fskin:/l/strings/STR_UI_BUTTON_NEW" bw="4" do="doNotepadDoneNew"/>
					<button2icon skin="keyW2" right="76" top="4" width="126" height="50" text="fskin:/l/strings/STR_UI_BUTTON_DONE" bw="4" do="doNotepadDone"/>
					<button2 skin="toolBar_close" right="24" top="8" width="42" height="42" do="doNotepadCancel"/>
				</group>
			</group>
		</kbookOverlay>
		<kbookNotepadFreehand id="NOTEPAD_FREEHAND" left="0" right="0" top="60" bottom="30" href="x-id://notepadFreehandData">
			<code>
				<function id="getEdit">
					return this.container.NOTEPAD_FREEHANDAREA_GROUP.NOTEPAD_FREEHANDAREA_SUBGROUP.SVGEDIT_NOTEPAD;
				</function>
				<function id="getPanel">
					return this.container.NOTEPAD_FREEHANDAREA_GROUP.NOTEPAD_FREEHANDAREA_SUBGROUP;
				</function>
				<function id="getToolbar">
					return this.container.OVERLAY_NOTEPAD_FREEHAND_TOOLBAR;
				</function>
				<function id="onStartFreehand">
					this.container.NOTEPAD_FREEHANDAREA_GROUP.NOTEPAD_FREEHANDAREA_SUBGROUP.PARTIAL_MODE.show(true)
				</function>
				<function id="onStopFreehand">
					this.container.NOTEPAD_FREEHANDAREA_GROUP.NOTEPAD_FREEHANDAREA_SUBGROUP.PARTIAL_MODE.show(false)
				</function>
			</code>
		</kbookNotepadFreehand>
		<group id="NOTEPAD_FREEHANDAREA_GROUP" left="0" right="0" top="60" bottom="30">
			<fillBackground color="gray" left="0" right="0" top="0" bottom="0"/>
			<panel id="NOTEPAD_FREEHANDAREA_SUBGROUP" skin="kbookNotepadFreehand" width="600" top="0" bottom="0" active="false">
				<svgEdit id="SVGEDIT_NOTEPAD" left="0" right="0" top="0" bottom="0" visible="true" active="false">
					<code>
						<function id="doRoot">
							this.container.container.container.NOTEPAD_FREEHAND.doRoot(this);
						</function>
					</code>
				</svgEdit>
				<eInkPanel id="PARTIAL_MODE" mode="partial" frame="true" left="0" right="0" top="0" bottom="0" visible="false"/>
			</panel>
		</group>
		<kbookStatus skin="kbookPageStatus" left="0" right="0" height="30" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" variable="NOTEPAD_INDEX_COUNT"/>
	</kbookPanel2>

	<kbookPanel2 id="NOTEPAD_TEXT_GROUP" toolbar="OVERLAY_NOTEPAD_TEXT_TOOLBAR" main="NOTEPAD_TEXT" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookOverlay id="OVERLAY_NOTEPAD_TEXT_TOOLBAR" left="0" right="0" top="0" bottom="30" href="x-id://notepadOverlayModel">
			<code>
				<function id="variableChanged" params="id, value">
					arguments.callee.grammar.call(this, id, value);
					if (id == "SHOW") {
						this.show(value);
						this.enableToolbar(value);
						value ? this.getModel().opened(this) : this.getModel().closed();
					}
				</function>
				<function id="enableToolbar" params="enableIt">
					this.NOTEPAD_TEXT_TOOLBAR_GROUP.show(enableIt);
				</function>
			</code>
			<panel skin="kbarea" left="0" right="0" top="0" height="60" active="true"/>
			<group id="NOTEPAD_TEXT_TOOLBAR_GROUP" left="0" right="0" top="0" height="60">
				<panel skin="kbarea" left="0" right="0" top="0" height="60" active="true"/>
				<button2icon skin="keyW2" left="15" top="4" width="160" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" bw="4" do="doNotepadEdit"/>
				<button2icon skin="keyW2" right="76" top="4" width="126" height="50" text="fskin:/l/strings/STR_UI_BUTTON_NEW" bw="4" do="doNotepadNew"/>
				<button2 skin="toolBar_close" right="24" top="8" width="42" height="42" do="doNotepadBack"/>
			</group>
		</kbookOverlay>
		<kbookNotepadText id="NOTEPAD_TEXT" left="0" right="0" top="60" bottom="30" href="x-id://notepadTextData">
			<code>
				<function id="getToolbar">
					return this.container.OVERLAY_NOTEPAD_TEXT_TOOLBAR;
				</function>
				<function id="setViewerText" params="text">
					this.container.NOTEPAD_TEXTAREA_GROUP.setText(text);
				</function>
			</code>
		</kbookNotepadText>
		<group id="NOTEPAD_TEXTAREA_GROUP" left="0" right="0" top="60" bottom="30">
			<model>
				<variable id="VAR_KEYBUF" value="" />
				<variable id="VAR_PAGENUM" value="1 / 1" />
				<variable id="VAR_UPDATE" value="false"/>
			</model>
			<code>
				<function id="getPageTextObj"><![CDATA[
					return this.NOTEPAD_TEXTAREA;
				]]></function>
				<function id="setText" params="text"><![CDATA[
					var model = this.getModel();
					var pageText = this.getPageTextObj();
					model.setVariable("VAR_KEYBUF", text);
					pageText.setPage(0);
					this.updatePageNo();
				]]></function>
				<function id="getText"><![CDATA[
					var model = this.getModel();
					return model.getVariable("VAR_KEYBUF", text);
				]]></function>
				<function id="setPage" params="num"><![CDATA[
					var pageText = this.getPageTextObj();
					pageText.setPage(num);
					this.updatePageNo();
				]]></function>
				<function id="getPage"><![CDATA[
					var pageText = this.getPageTextObj();
					return pageText.getPage();
				]]></function>
				<function id="getPages"><![CDATA[
					var pageText = this.getPageTextObj();
					return pageText.countPages();
				]]></function>
				<function id="updatePageNo"><![CDATA[
					var pageText = this.getPageTextObj();
					var page = pageText.getPage() + 1;
					var count = pageText.countPages();
					var pageNum = page + "fskin:/l/strings/STR_UI_PARTS_DELIMITER".idToString() + count;
					var model = this.model;
					if (pageNum != model.VAR_PAGENUM) {
						model.setVariable("VAR_PAGENUM", pageNum);
						model.setVariable("VAR_UPDATE", false);
						model.setVariable("VAR_UPDATE", true);
					}
				]]></function>
				<function id="canCmtPageBack"><![CDATA[
					var pageText = this.getPageTextObj();
					var page = pageText.getPage();
					return page > 0;
				]]></function>
				<function id="canCmtPageForw"><![CDATA[
					var pageText = this.getPageTextObj();
					var page = pageText.getPage();
					var count = pageText.countPages();
					return page + 1 < count;
				]]></function>
				<function id="canCmtEdit">
					return true;
				</function>
				<function id="canCmtDelete">
					return true;
				</function>
				<function id="doCmtPageBack"><![CDATA[
					var pageText = this.getPageTextObj();
					var page = pageText.getPage();
					var count = pageText.countPages();
					if (page>0) {
						--page;
						pageText.setPage(page);
						this.updatePageNo();
					} else {
						this.bubble("doBlink");
					}
				]]></function>
				<function id="doCmtPageForw"><![CDATA[
					var pageText = this.getPageTextObj();
					var page = pageText.getPage();
					var count = pageText.countPages();
					if (page+1<count) {
						++page;
						pageText.setPage(page);
						this.updatePageNo();
					} else {
						this.bubble("doBlink");
					}
				]]></function>
			</code>
			<pageText id="NOTEPAD_TEXTAREA" skin="cmtInput" left="0" right="0" top="0" bottom="0" active="false" variable="VAR_KEYBUF" limit="8192"/>
			<label skin="label-pageNo" bottom="20" right="129" width="70" height="26" align="center" variable="VAR_PAGENUM"/>

			<buttonPageUpDown skin="cmtPagePrev" right="71" bottom="7" width="65" height="50" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doCmtPageBack" can="canCmtPageBack"/>
			<buttonPageUpDown skin="cmtPageNext" right="8" bottom="7" width="65" height="50" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doCmtPageForw" can="canCmtPageForw"/>
		</group>
		<kbookStatus skin="kbookPageStatus" left="0" right="0" height="30" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" variable="NOTEPAD_INDEX_COUNT"/>
	</kbookPanel2>

	<group id="DEMO_MODE_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doDemoClose" params="object, force"><![CDATA[
				if(this.getVariable("DEMO_MODE_MESSAGE") != "FEATURE" || force==true ){
					if (this.getVariable("DEMO_MODE_DIALOG")) {
						this.setVariable("DEMO_MODE_DIALOG", false)
					}
					else {
						this.bubble("doMenu");
					}
				}else{
					this.bubble("doBlink")
				}
			]]></function>

			<function id="doRoot"><![CDATA[
				if (this.getVariable("DEMO_MODE_DIALOG"))
					this.setVariable("DEMO_MODE_DIALOG", false)
				var model=this.getModel();
				model.doRoot();
			]]></function>
			<function id="doMenu"><![CDATA[
				if (this.getVariable("DEMO_MODE_DIALOG")) {
					this.setVariable("DEMO_MODE_DIALOG", false)
				}
				else {
					var model=this.getModel();
					model.doMenu();
				}
			]]></function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
			<function id="doSearch">
				this.bubble("doBlink")
			</function>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doNext">
				this.bubble("doBlink")
			</function>
			<function id="doPrevious">
				this.bubble("doBlink")
			</function>
			
		</code>
		
		<group id="DEMO_MODE" top="0" bottom="0" left="0" right="0">
			<code>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
			<panel skin="kbookDemoMode" left="0" right="0" top="0" bottom="0"/>
			<!-- Back button -->
			<button2 skin="button_back" id="DEMO_BACK" left="5" top="5" width="61" height="61" do="doDemoClose"/>
			
			<!-- Title of Demo Mode -->
			<kbookLabel id="SETTING" skin="title" left="70" right="0" top="0" height="70" align="left" variable ="DEMO_TITLE" />
			<kbookLabel id="FORMAT_SETTING" skin="title2" left="70" right="0" top="0" height="70" align="left" variable ="DEMO_TITLE" />
			<kbookLabel id="FEATURE" skin="title" left="70" right="0" top="0" height="70" align="left" variable ="DEMO_TITLE" />
			
			<group id="TEXT" left="0" right="0" height="200">
				<!-- Messsage of Demo Mode -->
				<kbookText id="SETTING" skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DEMO_MODE_1"/>
				<kbookText id="FORMAT_SETTING" skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DEMO_MODE_1"/>
				<kbookText id="FEATURE" skin="settingText" active="false" left="15" right="15" top="0" height="100" value="fskin:/l/strings/STR_UI_MESSAGE_DEMO_MODE_2"/>
	
				<group top="100" width="296" height="42">
						<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" top="0" width="142" height="42">
							<code>
								<function id="click">
									if (this.getVariable("DEMO_MODE_DIALOG")) {
										this.setVariable("DEMO_MODE_DIALOG", false)
									}
									else {
										this.bubble("doMenu");
									}
								</function>
							</code>
						</button2icon>
				</group>
			</group>
		</group>
		
	</group>

	<group id="DEMO_PICTURE_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookImageDemo id="DEMO_PICTURE" left="0" right="0" top="0" bottom="0" active="true" href="x-id://demoImageData"/>
	</group>

	<kbookZoomOverlay id="ZOOM_OVERLAY" upButton="zoomUp" downButton="zoomDown" leftButton="zoomLeft" rightButton="zoomRight" sliderBar="ZOOMSLIDER" closeButton="ZOOMCLOSE" left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="ZOOM_RATE" value="100"/>
		</model>
		<code>
			<function id="onStartMonoChromePage">
				this.MONOCHROME.show(true)
			</function>
			<function id="onEndMonoChromePage">
				this.MONOCHROME.show(false)
			</function>
			<function id="applyOverlayBounds" params="tmpBounds"><![CDATA[
				this.container.PAGE_GROUP.getOverlayBounds(tmpBounds);

				// Toolbar bound
				var zoomToolBounds = new Rectangle();
				this.container.PAGE_GROUP.getToolBarBound(zoomToolBounds);
				// Height of Toolbar background
				var zoomToolBackWidth = this.ZOOM_TOOL_ORIGINAL.getWidth();
				var zoomToolBackHeight = this.ZOOM_TOOL_ORIGINAL.getHeight();

				if (this.container.PAGE_GROUP.isShownNewsNaviBar()) {
					// change height of ZoomBar to Toolbar+Title height
					zoomToolBounds.height = tmpBounds.y - zoomToolBounds.y;
					// change Toolbar background to Title height
					if (!this.container.PAGE_GROUP.isShownToolBar()) {
						zoomToolBackHeight = tmpBounds.y - zoomToolBounds.y;
					}
				
					tmpBounds.y -= this.ZOOM_TOOL_ORIGINAL.getHeight()
					tmpBounds.height += this.ZOOM_TOOL_ORIGINAL.getHeight()
				}
				this.moveTo(tmpBounds.x, tmpBounds.y);
				this.sizeTo(tmpBounds.width, tmpBounds.height);
				this.ZOOM_ADJUST_TOOL.moveTo(zoomToolBounds.x, zoomToolBounds.y);
				this.ZOOM_ADJUST_TOOL.sizeTo(zoomToolBounds.width, zoomToolBounds.height);
				this.ZOOM_LOCKED_TOOL.moveTo(zoomToolBounds.x, zoomToolBounds.y);
				this.ZOOM_LOCKED_TOOL.sizeTo(zoomToolBounds.width, zoomToolBounds.height);
				this.ZOOM_ADJUST_TOOL.zoomBar_back.sizeTo(zoomToolBackWidth, zoomToolBackHeight);
				if ((this.zoomLeft.getY() + this.zoomLeft.getHeight()) > (this.zoomDown.getY() + this.zoomDown.getHeight()))
					this.zoomDown.moveTo(this.zoomDown.getX(), this.zoomLeft.getY() + this.zoomLeft.getHeight() - this.zoomDown.getHeight());
				else
					this.zoomDown.moveTo(this.zoomDown.getX(), this.zoomDown_ORIGINAL.getY());
			]]></function>
		</code>
		<group id="ZOOM_TOOL_ORIGINAL" left="0" right="0" top="0" height="60" visible="false">
		</group>
		<kbookZoomButton id="zoomDown_ORIGINAL" skin="zoomDown" bottom="10" width="62" height="42" visible="false"/>
		<group id="ZOOM_ADJUST_TOOL" left="0" right="0" top="0" height="60">
			<code>
				<function id="canTap">
					return false;
				</function>
				<function id="canDoubleTap">
					return false;
				</function>
			</code>
			<panel id="zoomBar_back" skin="kbarea" left="0" right="0" top="0" height="65" active="true"/>
			<button2icon id="orientation"	skin="zoomOrientationBtn"	top="12" left= "24" width= "80" height="40" do="doOrientation"/>
			<button2icon id="fitHeight"		skin="zoomFitHeightBtn" 	top="12" left="135" width= "80" height="40" do="doFitHeight"/>
			<button2icon id="fitWidth"		skin="zoomFitWidthBtn" 		top="12" left="221" width= "80" height="40" do="doFitWidth"/>
			<kbookButton id="lock"			skin="zoomLockBtn" text="fskin:/l/strings/STR_UI_BUTTON_PAGE_LOCK" top="12" right="80" width="160" height="40" do="doZoomLock"/>
			<button		 id="ZOOMCLOSE"		skin="toolBar_close"		top="12" right="24" width= "42" height="40" do="doClose"/>
		</group>
		<group id="ZOOM_LOCKED_TOOL" left="0" right="0" top="0" height="60">
			<kbookButton id="lock"			skin="zoomUnlockBtn" text="fskin:/l/strings/STR_UI_BUTTON_UNLOCK"	top="12" right="80" width="160" height="40" do="doZoomUnlock"/>
			<button		 id="ZOOMCLOSE"		skin="zoomClose"			top="12" right="24" width= "42" height="40" do="doClose"/>
		</group>

		<kbookZoomButton id="zoomLeft" skin="zoomLeft" left="8" width="42" height="62" top="355" do="doLeft" />
		<kbookZoomButton id="zoomRight" skin="zoomRight" right="8" width="42" height="62" top="355" do="doRight" />
		<kbookZoomButton id="zoomUp" skin="zoomUp" top="8" width="62" height="42" do="doUp" />
		<kbookZoomButton id="zoomDown" skin="zoomDown" bottom="10" width="62" height="42" do="doDown" />
		<button id="zoomSliderPlus" skin="zoomSlider-plus"  left="8" top="8" width="54" height="48">
			<code>
				<function id="click">
					this.bubble("setButtonTap");
					this.bubble("zoomRateChanged", 10);
				</function>
				<function id="canDoubleTap">
					return false;
				</function>
			</code>
		</button>
		<button id="zoomSliderMinus" skin="zoomSlider-minus" left="8" top="282" width="54" height="48">
			<code>
				<function id="click">
					this.bubble("setButtonTap");
					this.bubble("zoomRateChanged", -10);
				</function>
				<function id="canDoubleTap">
					return false;
				</function>
			</code>
		</button>
		<kbookZoomSlider id="ZOOMSLIDER" variable="ZOOM_RATE" skin="zoomSlider" left="8" top="56" height="226" min="100" max="300" do="doZoomChange"/>

		<kbookZoomIndicator id="zoomIndicator_H" skin="zoomIndicator" right="24" top="78" width="72" height="72" playing="H"/>
		<kbookZoomIndicator id="zoomIndicator_V" skin="zoomIndicator" right="24" bottom="18" width="72" height="72" playing="V"/>
		<button id="ZOOMCLOSE" skin="zoomClose" right="8" top="8" width="42" height="42" do="doClose"/>
		<monochrome id="MONOCHROME" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookZoomOverlay>

	<kbookOverlay id="SEARCH_RESULT" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://pageSearchResultOverlayModel">
		<code>
			<function id="doNext">
				this.getModel().doNext();
			</function>
			<function id="doPrevious">
				this.getModel().doPrevious();
			</function>
			<function id="canLine">
				return true
			</function>
			<function id="doLine" params="dir">
				var settings = this.getVariable("gestureDirectionFlag")
				dir = settings ? (dir == Gesture.leftDirection ? Gesture.rightDirection : Gesture.leftDirection) : dir 
				if (dir == Gesture.leftDirection)
					this.doPrevious()
				else if (dir == Gesture.rightDirection)
					this.doNext()
			</function>
			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
		</code>
		<button2icon skin="searchBackward" width="92" height="42" left="8" bottom="10" visible="true" active="true" do="onBackward" beforeClick="onMouseDown" afterClick="onMouseUp">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
		<button2icon skin="searchForward" width="92" height="42" right="8" bottom="10" visible="true" active="true" do="onForward" beforeClick="onMouseDown" afterClick="onMouseUp">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
		<button2icon skin="searchClose" width="42" height="42" right="24" top="8" visible="true" active="true" do="doCloseSearchResult">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
	</kbookOverlay> 

	<kbookOverlay id="SEARCH_OVERLAY"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_UPDATEBTN" value="false"/>
		</model>
		<code>
			<function id="beforeOpenSearch"><![CDATA[
				var model=this.getModel();
				var words=model.getVariable("VAR_KEYBUF");
				var keyboard = this.KEYBOARD;
				this.container.KEYBOARD_POPUP_GROUP.initPopup(keyboard);
				var settings = this.getVariable("keyboard")
				keyboard.KEYLAYOUT.changeKeyboardType(settings);
				keyboard.KEYLAYOUT.setType("ALPHABET");
				if (kbook.model.STATE != "PAGE") {
					keyboard.initBuffer("","strExisted",false);
				} else {
					keyboard.initBuffer(words,"strExisted",false);
				}
			]]></function>
			<function id="canSearchBtn"><![CDATA[
				var keyboard = this.KEYBOARD;
				//trace("canSearchBtn="+keyboard.btnState+"\n");
				return keyboard.btnState;
			]]></function>
			<function id="doSelChanged2" params="offset, length">
				var keyboard = this.KEYBOARD;
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				//trace("doSelChanged2: offset="+offset+" length="+length+"\n");
				keyboard.doSelChanged(offset,length,words,false);
			</function>
			<function id="registerWords"><![CDATA[
				var keyboard = this.KEYBOARD;
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				if (words && words.length>0)
					keyboard.registerAllWords(words);
			]]></function>
			<function id="doMenu">
				var kbdObj=this.KEYBOARD;
				if(kbdObj.KEYLAYOUT.popup.isShown()){
					kbdObj.KEYLAYOUT.popup.container.deletePopup();
				}else{
					//trace("SEARCH_OVERLAY:doMenu()\n");
					this.registerWords();
					this.bubble("doCloseButton");
				}
			</function>
			<function id="doRoot">
				//trace("SEARCH_OVERLAY:doRoot()\n");
				this.registerWords();
				this.bubble("doCloseButton");
				if (kbook.model.STATE!="MENU_HOME") {
					var model=this.getModel();
					model.targetModel.doRoot();
				}
			</function>
			
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					//trace("SEARCH_OVERLAY:variableChanged:"+id+"="+value+"\n");
					this.show(value);
					this.KEYBOARD_MODE.show(value)
					if(value)
						this.KEYBOARD.KEYBUF.focus(value);
					else
						this.container.KEYBOARD_POPUP_GROUP.deletePopup()
				}
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<keyboard id="KEYBOARD" left="0" right="0" height="369" bottom="0">
			<panel skin="kbarea" left="0" right="0" top="0" height="113" active="true"/>
			<limitedField skin="searchInput" id="KEYBUF" left="14" right="184" top="18" height="40" doSelectionChanged="doSelChanged2" variable="VAR_KEYBUF" visible="true" active="true"/>
			<candidateButton id="CANDIDATE" skin="candidate" top="65" height="32" left="8" right="8"/>
			<button2icon text="fskin:/l/strings/STR_UI_BUTTON_SEARCH" top="14" height="50" right="66" width="116" skin="keyW2" variableUpdate="VAR_UPDATEBTN" can="canSearchBtn" bw="4"  beforeClick="onMouseDown" afterClick="onMouseUp">
				<code>
					<function id="click">
						var target = this.container.container;
						if (target.isShown()) {
							target.registerWords();

							var keybuf = this.container.KEYBUF;
							var words = keybuf.getValue();
							var model=this.getModel();
							model.setVariable("VAR_KEYBUF",words);
							this.getModel().execSearch(words);
						}
					</function>
				</code>
			</button2icon>
			<button2icon skin="keyClose" top="18" right="14" width="42" height="42">
				<code>
					<function id="click">
						//trace("SEARCH_OVERLAY:keyClose\n");
						var target = this.container.container;
						target.registerWords();
						this.bubble("doCloseButton");
					</function>
				</code>
			</button2icon>

			<keyLayout id="KEYLAYOUT" left="0" right="0" top="113" bottom="0" ignore="ignore"  skin="keyW_H">
				<code>
					<function id="registerKey" params="key, bounds">
						this.container.container.KEYBOARD_MODE.register(key, bounds)
					</function>
					<function id="unregisterKey" params="key">
						this.container.container.KEYBOARD_MODE.unregister(key)
					</function>
				</code>
			</keyLayout>
		</keyboard>
		<eInkPanelKeyboard id="KEYBOARD_MODE" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookOverlay>

	<kbookOverlay id="HIGHLIGHT_SELECTOR_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://pageHighlightSelectorOverlayModel">
		<model>
			<variable id="selectBounds"/>
		</model>
		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="selectBounds" visible="true"/>

		<exGroup id="VIEW_HIGHLIGHT_SELECTOR"  width="446" height="190" top="64" visible="true" active="true">
			<exButton id="CLOSE_BOX" skin="optClose" right="0" top="0" width="42" height="42" do="doCloseHighlightSelector"/>
			<exPanel  skin="opt_frame"								left="0" right="0" top= "50" bottom="0" playing="match"/>
			<!-- By Ink Item -->
			<exButton skin="optItemButton" u="16" textresource="STR_UI_SHORTCUT_ANNOTATION_BYFREEHAND"		left="8" right="5" top= "58" height="58" do="doHighlightSelectorByFh"/>
			<exLine   skin="optSpaceBig" 							left="0" right="0" top="116" height="8"/>
			<!-- By Text Item -->
			<exButton skin="optItemButton" u="17" textresource="STR_UI_SHORTCUT_ANNOTATION_BYTEXT"			left="8" right="5" top="124" height="58" do="doHighlightSelectorByText"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="COMMENT_VIEWER_OVERLAY"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_PAGENUM" value="1 / 1" />
			<variable id="VAR_BOUNDS"/>
			<variable id="VAR_UPDATE" value="false"/>
		</model>
		<code>
			<function id="getPageTextObj"><![CDATA[
				var orientation = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V");
				var id=(orientation=="H"?"CMT_VIEWER_H":"CMT_VIEWER_V");
				var pageText = this[id].KEYBUF;
				return pageText;
			]]></function>
			<function id="getCurPage"><![CDATA[
				var pageText = this.getPageTextObj();
				return pageText.getPage();
			]]></function>
			<function id="beforeOpenCmtViewer"><![CDATA[
				this.model.setVariable("VAR_PAGENUM", "");
				var pageText = this.getPageTextObj();
				pageText.setPage(0);
				this.updatePageNo();
			]]></function>
			<function id="updatePageNo"><![CDATA[
				var pageText = this.getPageTextObj();
				var page = pageText.getPage() + 1;
				var count = pageText.countPages();
				var pageNum = page + "fskin:/l/strings/STR_UI_PARTS_DELIMITER".idToString() + count;
				//trace("Viewer: updatePageNo: getPage()="+(page-1)+" countPage()="+count+"\n");
				var model = this.model;
				if (pageNum != model.VAR_PAGENUM) {
					model.setVariable("VAR_PAGENUM", pageNum);
					model.setVariable("VAR_UPDATE", false);
					model.setVariable("VAR_UPDATE", true);
				}
			]]></function>
			<function id="canCmtPageBack"><![CDATA[
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				//trace(" Viewer: canCmtPageBack:page="+page+"\n");
				return page>0;
			]]></function>
			<function id="canCmtPageForw"><![CDATA[
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				//trace(" Viewer: canCmtPageForw: page="+page+" count= " + count + "\n");
				return page + 1 < count;
			]]></function>
			<function id="doCmtPageBack"><![CDATA[
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				if (page>0) {
					--page;
					pageText.setPage(page);
					//trace(" Viewer:setPage("+page+")");
					this.updatePageNo();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doCmtPageForw"><![CDATA[
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				if (page+1<count) {
					++page;
					pageText.setPage(page);
					//trace(" Viewer:setPage("+page+")");
					this.updatePageNo();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doNext"><![CDATA[
				//trace("COMMENT_VIEWER_OVERLAY:doNext()\n");
				this.doCmtPageForw();
			]]></function>
			<function id="doPrevious"><![CDATA[
				//trace("COMMENT_VIEWER_OVERLAY:doPrevious()\n");
				this.doCmtPageBack();
			]]></function>
			<function id="doOption"><![CDATA[
				this.bubble("doBlink");
				//var model = this.getModel();
				//model.doAnnotationViewerClose();
				//model.targetModel.doOption();
			]]></function>
			<function id="doSearch"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSize"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doMenu">
				var model = this.getModel();
				model.doAnnotationViewerClose();
			</function>
		</code>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="VAR_BOUNDS" visible="true"/>
		<exGroup id="CMT_VIEWER_V" width="446" top="21" height="363" playing="V">
			<exButton skin="optClose" width="42" height="42" top="0" right="0" do="doAnnotationViewerClose"/>
			<pageText  skin="cmtInput" id="KEYBUF" active="false" left="0" right=  "0" top= "48" bottom="0" variable="VAR_KEYBUF" limit="2048"/>
			<buttonPageUpDown skin="cmtPagePrev" right="71" bottom="7" width="65" height="50" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doCmtPageBack" can="canCmtPageBack"/>
			<buttonPageUpDown skin="cmtPageNext" right="8" bottom="7" width="65" height="50" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doCmtPageForw" can="canCmtPageForw"/>
			<button2icon skin="keyWs" left="6" bottom="7" width="120" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" do="doAnnotationEdit" can="canAnnotationEdit"/>
			<button2icon skin="keyWs" left="124" bottom="7" width="130" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_DELETE" do="doAnnotationDelete" can="canAnnotationDelete"/>
			<label skin="label-pageNo" bottom="20" right="129" width="70" height="26" align="center" variable="VAR_PAGENUM"/>
		</exGroup>
		<exGroup id="CMT_VIEWER_H" width="542" top="17" height="219" playing="H">
			<exButton skin="optClose" width="42" height="42" top="0" right="0" do="doAnnotationViewerClose"/>
			<pageText  skin="cmtInput" id="KEYBUF" active="false" left="48" right=  "48" top= "0" bottom="0" variable="VAR_KEYBUF" limit="2048"/>
			<buttonPageUpDown skin="cmtPagePrev" right="119" bottom="7" width="65" height="50" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doCmtPageBack" can="canCmtPageBack"/>
			<buttonPageUpDown skin="cmtPageNext" right="56" bottom="7" width="65" height="50" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doCmtPageForw" can="canCmtPageForw"/>
			<button2icon skin="keyWs" left="54" bottom="7" width="120" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" do="doAnnotationEdit" can="canAnnotationEdit"/>
			<button2icon skin="keyWs" left="172" bottom="7" width="130" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_DELETE" do="doAnnotationDelete" can="canAnnotationDelete"/>
			<label skin="label-pageNo" bottom="20" right="177" width="70" height="26" align="center" variable="VAR_PAGENUM"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="COMMENT_EDITOR_OVERLAY"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_PAGENUM" value="1" />
			<variable id="VAR_UPDATE" value="false"/>
			<variable id="VAR_UPDATEBTN" value="false"/>
			<variable id="VAR_VIEWSIZE" value="normal"/>
		</model>
		<code>
			<function id="getKeyboardObj"><![CDATA[
				var keyboard = this.KEYBOARD;
				return keyboard;
			]]></function>
			<function id="getPageTextObj"><![CDATA[
				var keyboard = this.getKeyboardObj();
				return keyboard.KEYBUF;
			]]></function>
			<function id="beforeOpenCmtEditor" params="curPage,kbdType"><![CDATA[
				var model=this.getModel();
				var words=model.getVariable("VAR_KEYBUF");
				var keyboard = this.getKeyboardObj();

				var settings = this.getVariable("keyboard")
				keyboard.KEYLAYOUT.changeKeyboardType(settings);
				if(!kbdType)
					keyboard.KEYLAYOUT.setType("ALPHABET")
				else
					keyboard.KEYLAYOUT.setType(kbdType.id, kbdType.kind);
				keyboard.initBuffer(words,"strModified",false);

				this.container.KEYBOARD_POPUP_GROUP.initPopup(keyboard);

				// var model=this.getModel();
				// var words=model.getVariable("VAR_KEYBUF");
				// var keyboard = this.getKeyboardObj();
				// keyboard.initBuffer(words,"strModified",false);

				model.setVariable("VAR_PAGENUM", "");
				var pageText = this.getPageTextObj();
				pageText.setPage(curPage);
				this.updatePageNo();
			]]></function>
			<function id="setViewSize" params="mode"><![CDATA[
				var model = this.getModel();
				var keyboard = this.getKeyboardObj();
				keyboard.setViewSize(mode);
				model.setVariable("VAR_VIEWSIZE", mode);
			]]></function>
			<function id="updatePageNo"><![CDATA[
				var model = this.model;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage() + 1;
				var count = pageText.countPages();
				var pageNum = page + "fskin:/l/strings/STR_UI_PARTS_DELIMITER".idToString() + count;
				//trace("Editor: updatePageNo: getPage()="+(page-1)+" countPage()="+count+"\n");
				if (pageNum != model.VAR_PAGENUM) {
					model.setVariable("VAR_PAGENUM", pageNum);
					//debugger;
					model.setVariable("VAR_UPDATE", false);
					model.setVariable("VAR_UPDATE", true);
					//debugger;
				}
			]]></function>
			<function id="canCmtPageBack"><![CDATA[
				//debugger;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				//trace(" Editor: canCmtPageBack:page="+page+"\n");
				return page>0;
			]]></function>
			<function id="canCmtPageForw"><![CDATA[
				//debugger;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				//trace(" Editor: canCmtPageForw: page="+page+" count= " + count + "\n");
				return page + 1 < count;
			]]></function>
			<function id="doCmtPageBack"><![CDATA[
				//debugger;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				if (page>0) {
					--page;
					pageText.setPage(page);
					//trace(" Editor:setPage("+page+")");
					this.updatePageNo();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doCmtPageForw"><![CDATA[
				//debugger;
				var pageText = this.getPageTextObj();
				var page = pageText.getPage();
				var count = pageText.countPages();
				if (page+1<count) {
					++page;
					pageText.setPage(page);
					//trace(" Editor:setPage("+page+")");
					this.updatePageNo();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="getWords">
				var keyboard = this.getKeyboardObj();
				var field = keyboard.KEYBUF;
				var words = field.getValue();
				return words;
			</function>
			<function id="registerOneWord">
				var words = this.getWords();
				var keyboard = this.getKeyboardObj();
				var field = keyboard.KEYBUF;
				var offset= field.getSelectionOffset();
				var length= field.getSelectionLength();
				keyboard.doSelChanged(offset,length,words,true);
				FskPredictive.checkSave(); //iVALSUN-bobsled-#514 at 081008
			</function>
			<function id="doSelChanged2" params="offset, length">
				var keyboard = this.getKeyboardObj();
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				//trace("doSelChanged1: offset="+offset+" length="+length+"\n");
				keyboard.doSelChanged(offset,length,words,false);
			</function>
			<function id="doOverflow" params="text">
				this.bubble("doBlink");
			</function>
			<function id="canDoneBtn"><![CDATA[
				var model = this.getModel();
				var keyboard = this.getKeyboardObj();
				//trace("canDoneBtn="+keyboard.btnState+"\n");
				return (model.getVariable("VAR_VIEWSIZE") == "max") ? true : keyboard.btnState;
			]]></function>
			<function id="canExitWithoutConfirm">
				var model = this.getModel();
				var keyboard = this.getKeyboardObj();
				//trace("canDoneBtn="+keyboard.btnState+"\n");
				return keyboard.btnState;
			</function>
			<function id="doMenu"><![CDATA[
				var kbdObj=this.getKeyboardObj();
				if(kbdObj.KEYLAYOUT.popup.isShown()){
					kbdObj.KEYLAYOUT.popup.container.deletePopup();
				}else{
					if (!this.getVariable("DEMO_MODE") || "ignoreDemo" in this.getModel()) {
						this.registerOneWord();
						var words = this.getWords();
						this.model.doAnnotationEditorQuit(this.canExitWithoutConfirm(),undefined,words);
					} else {
						this.model.doAnnotationEditorQuit("demo");
					}
				}
			]]></function>
			<function id="doRoot">
				if (!this.getVariable("DEMO_MODE") || "ignoreDemo" in this.getModel()) {
					this.registerOneWord();
					this.model.doAnnotationEditorQuit(this.canExitWithoutConfirm(),"doRoot");
				} else {
					this.model.doAnnotationEditorQuit("demo","doRoot");
				}
			</function>
			<function id="doNext"><![CDATA[
				this.doCmtPageForw();
			]]></function>
			<function id="doPrevious"><![CDATA[
				this.doCmtPageBack();
			]]></function>
			<function id="doOption"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSearch"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSize"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					//trace("COMMENT_EDITOR:variableChanged:"+id+"="+value+"\n");
					this.show(value);
					this.KEYBOARD_MODE.show(value)
					if(value) {
						var keyboard = this.getKeyboardObj();
						keyboard.KEYBUF.focus(value);
					}
					else
						this.container.KEYBOARD_POPUP_GROUP.deletePopup()
				}
			</function>
		</code>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<keyboard id="KEYBOARD" left="0" right="0" top="0" bottom="0">
			<code>
				<function id="setViewSize" params="mode"><![CDATA[
					var width, height, limit;
					var width0 = this.getWidth();
					var height0= this.getHeight();
					var cmtWidth = width0;
					var cmtHeight = this.KBAREA.getY() - this.getY();
					var vflag = (width0 < height0 ? true : false)

					if (mode == "normal") {
						width = 446;
						height = (vflag?315:219);
						limit = 2048;
						this.NEWBTN.show(false);
						this.CANDIDATE.sizeTo(width0 - 203, this.CANDIDATE.getHeight());
					} else if (mode == "max") {
						width = cmtWidth;
						height = cmtHeight;
						limit = 8192;
						this.NEWBTN.show(true);
						this.CANDIDATE.sizeTo(width0 - 333, this.CANDIDATE.getHeight());
					}
					var x = this.getX() + (cmtWidth - width) / 2;
					var y = this.getY() + (cmtHeight - height) / 2;
					this.KEYBUF.moveTo(x, y);
					this.KEYBUF.sizeTo(width, height);
					this.KEYBUF.setLimit(limit);
					this.buttons.moveTo(x,  y + height - this.buttons.getHeight());
					this.buttons.sizeTo(width, this.buttons.getHeight());
				]]></function>
			</code>
			<panel skin="kbarea" id="KBAREA" left="0" right="0" bottom="256" height="61" active="true"/>
			<pageText  skin="cmtInput" id="KEYBUF" width="446" top= "0" height="219" doSelectionChanged="doSelChanged2" doOverflow="doOverflow" limit="2048" variable="VAR_KEYBUF"/><!-- top will be set-->
			<group id="buttons" width="446" bottom="0" height="65"><!-- bottom will be set -->
				<buttonPageUpDown skin="cmtPagePrev"  right= "71" top="8" width="65" height="50" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doCmtPageBack" can="canCmtPageBack"/>
				<buttonPageUpDown skin="cmtPageNext"  right=  "8" top="8" width="65" height="50" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doCmtPageForw" can="canCmtPageForw"/>
				<label skin="label-pageNo" bottom="20" right="129" width="70" height="26" align="center" variable="VAR_PAGENUM"/>
			</group>
			<button2icon skin="keyClose" width="42" height="42" bottom="265" right="14">
				<code>
					<function id="click">
						var model=this.getModel();
						if (!this.getVariable("DEMO_MODE") || "ignoreDemo" in model) {
							var target = this.container.container;
							target.registerOneWord();
							var words = target.getWords();
							model.doAnnotationEditorQuit(target.canExitWithoutConfirm(),undefined,words);
						}
						else
							model.doAnnotationEditorQuit("demo");
					</function>
				</code>
			</button2icon>
			<button2icon skin="keyW2" width="126" height="50" bottom="261" right="66" text="fskin:/l/strings/STR_UI_BUTTON_DONE" variableUpdate="VAR_UPDATEBTN" can="canDoneBtn" bw="4">
				<code>
					<function id="click">
						var model = this.getModel();
						if (!this.getVariable("DEMO_MODE") || "ignoreDemo" in model) {
							var target = this.container.container;
							target.registerOneWord();
							var words = target.getWords();
							model.setVariable("VAR_KEYBUF",words);
							model.doAnnotationEditorClose();
						}
						else{
							model.doAnnotationEditorQuit("demo");
							this.bubble("doDemoModeDialog");
						}
					</function>
				</code>
			</button2icon>
			<button2icon id="NEWBTN" skin="keyW2" width="126" height="50" bottom="261" right="196" text="fskin:/l/strings/STR_UI_BUTTON_NEW" variableUpdate="VAR_UPDATEBTN" can="canDoneBtn" bw="4">
				<code>
					<function id="click">
						var model = this.getModel();
						if (!this.getVariable("DEMO_MODE") || "ignoreDemo" in model) {
							var target = this.container.container;
							target.registerOneWord();
							var words = target.getWords();
							model.setVariable("VAR_KEYBUF",words);
							model.doAnnotationEditorClose(true);
						}
						else{
							model.doAnnotationEditorQuit("demo");
							this.bubble("doDemoModeDialog");
						}
					</function>
				</code>
			</button2icon>
			<candidateButton id="CANDIDATE" skin="candidate" bottom="271" height="32" left="8" right="195"/>
			<keyLayout id="KEYLAYOUT" left="0" right="0" height="256" bottom="0" skin="keyW_H">
				<code>
					<function id="registerKey" params="key, bounds">
						this.container.container.KEYBOARD_MODE.register(key, bounds)
					</function>
					<function id="unregisterKey" params="key">
						this.container.container.KEYBOARD_MODE.unregister(key)
					</function>
				</code>
			</keyLayout>
		</keyboard>

		<eInkPanelKeyboard id="KEYBOARD_MODE" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookOverlay>

	<kbookOverlay id="SCRIBBLE_VIEWER_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_BOUNDS"/>
		</model>
		<code>
			<function id="getEdit">
				var orientation = (kbook.model.container.getVariable("ORIENTATION") ? "H" : "V");
				var id = (orientation == "H" ? "SCR_VIEWER_H":"SCR_VIEWER_V");
				return this[id].SCR_PANEL.SVGEDIT_SCR_VIEWER;
			</function>
			<function id="doPrevious">
				this.bubble("doBlink");
			</function>
			<function id="doNext">
				this.bubble("doBlink");
			</function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
			<function id="doMenu">
				var model = this.getModel();
				model.doAnnotationViewerClose();
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="VAR_BOUNDS" visible="true"/>
		<exGroup id="SCR_VIEWER_V" width="446" top="21" height="424" playing="V">
			<exButton skin="optClose" width="42" height="42" top="0" right="0" do="doAnnotationViewerClose"/>
			<exPanel id="SCR_PANEL" skin="scr_view" left="0" right="0" top="48" bottom="0">
				<svgEdit id="SVGEDIT_SCR_VIEWER" left="0" right="0" top="0" bottom="61" visible="true" active="false"/>
			</exPanel>
			<button2icon skin="keyWs" left="6" bottom="7" width="120" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" do="doAnnotationEdit" can="canAnnotationEdit"/>
			<button2icon skin="keyWs" left="124" bottom="7" width="130" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_DELETE" do="doAnnotationDelete" can="canAnnotationDelete"/>
		</exGroup>
		<exGroup id="SCR_VIEWER_H" width="542" top="17" height="376" playing="H">
			<exButton skin="optClose" width="42" height="42" top="0" right="0" do="doAnnotationViewerClose"/>
			<exPanel id="SCR_PANEL" skin="scr_view" left="48" right="48" top="0" bottom="0">
				<svgEdit id="SVGEDIT_SCR_VIEWER" left="0" right="0" top="0" bottom="61" visible="true" active="false"/>
			</exPanel>
			<button2icon skin="keyWs" left="54" bottom="7" width="120" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_EDIT" do="doAnnotationEdit" can="canAnnotationEdit"/>
			<button2icon skin="keyWs" left="172" bottom="7" width="130" height="50" text="fskin:/l/strings/STR_UI_COMMENTVIEWER_DELETE" do="doAnnotationDelete" can="canAnnotationDelete"/>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="SCRIBBLE_EDITOR_OVERLAY"  left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="getEdit">
				return this.SCR_EDITOR.SCR_PANEL.SVGEDIT_SCR_EDITOR;
			</function>
			<function id="onStartFreehand">
				this.SCR_EDITOR.SCR_PANEL.PARTIAL_MODE.show(true);
			</function>
			<function id="onStopFreehand">
				this.SCR_EDITOR.SCR_PANEL.PARTIAL_MODE.show(false);
			</function>
			<function id="doPrevious">
				this.bubble("doBlink");
			</function>
			<function id="doNext">
				this.bubble("doBlink");
			</function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
			<function id="doMenu">
				var model = this.getModel();
				if (!this.getVariable("DEMO_MODE"))
					model.doAnnotationEditorQuit(model.canDoneBtn())
				else
					model.doAnnotationEditorQuit("demo")
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exGroup id="SCR_EDITOR" width="446" top="21" height="363">
			<kbookCheck id="tool_freehand" skin="tool_check_freehand" variable="SCR_PEN_TYPE" on="FREEHAND" off="FREEHAND" top="0" left="0" width="80" height="42" do="doFreehand"/>
			<kbookCheck id="tool_freehand" skin="tool_check_eraser" variable="SCR_PEN_TYPE" on="ERASER" off="ERASER" top="0" left="87" width="80" height="42" do="doEraser"/>
			<button2icon skin="keyW2" width="126" height="50" top="-4" right="52" text="fskin:/l/strings/STR_UI_BUTTON_DONE" bw="4">
				<code>
					<function id="click">
						var model = this.getModel();
						if (!this.getVariable("DEMO_MODE")) {
							model.doAnnotationEditorClose();
						}
						else{
							model.doAnnotationEditorQuit("demo")
							this.bubble("doDemoModeDialog")
						}
					</function>
				</code>
			</button2icon>
			<button2 skin="optClose" right="0" top="0" width="42" height="42">
				<code>
					<function id="click">
						var model=this.getModel();
						if (!this.getVariable("DEMO_MODE")) {
							model.doAnnotationEditorQuit(model.canDoneBtn());
						}
						else
							model.doAnnotationEditorQuit("demo")
					</function>
				</code>
			</button2>
			<exPanel id="SCR_PANEL" skin="scr_edit" left="0" right="0" top="48" bottom="0">
				<svgEdit id="SVGEDIT_SCR_EDITOR" left="0" right="0" top="0" bottom="0" visible="true" active="false"/>
				<eInkPanel id="PARTIAL_MODE" mode="partial" frame="true" left="0" right="0" top="0" bottom="0" visible="false"/>
			</exPanel>
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="DICTIONARY_VIEWER_OVERLAY"  left="0" right="0" top="0" bottom="0" visible="false" href="x-id://pageDictionaryOverlayModel">
		<model>
			<variable id="VAR_DIC_TITLE" value="" />
			<variable id="VAR_DIC_TEXT_SIZE" value="10"/>
			<variable id="VAR_DIC_LINE_SPACING" value="1"/>
			<variable id="VIEW_HEADWORD_UPDATE" value="false"/>
			<variable id="VAR_UPDATE_PAGENO"	value="false"/>
			<variable id="VAR_UPDATE"	value="false"/>
			<variable id="VAR_DIC_TEST"	value="0"/>
			<variable id="VAR_DIC_INDEX"	value="1"/>
			<variable id="VAR_DATABASE" value="0"/>
			<variable id="VAR_UPDATE_DATABASE" value="false"/>
			
		</model>
		<code>
			<function id="beforeOpenDicViewer"><![CDATA[
				this.container.PAGE_GROUP.PAGE_SUBGROUP.show(false)
				this.container.PAGE_GROUP.KBOOKSTATUS.show(false)
				this.container.PAGE_GROUP.PAGE_INFO.show(false)

				var model=this.getModel();
				var title = kbook.model.getDictionary_Title()
				if (title) 
					model.setVariable("VAR_DIC_TITLE", title)
			]]></function>
			<function id="beforeCloseDicViewer"><![CDATA[
				this.container.PAGE_GROUP.PAGE_SUBGROUP.show(true)
				this.container.PAGE_GROUP.KBOOKSTATUS.show(true)
				this.container.PAGE_GROUP.PAGE_INFO.show(true)
				//var model=this.getModel();
			]]></function>
			<function id="updateDictionaryViewer">
				var dict = this.getDict();
				if (dict)
					dict.setRenderParameter()
			</function>
			<function id="redrawDictionaryViewer"><![CDATA[
				var dict = this.getDict();
				if (dict)
					dict.redraw()
				var dictHead = this.getDictHead()
				if (dictHead)
					dictHead.redraw()
			]]></function>
			<function id="canDicPageBack"><![CDATA[
				return this.DICTIONARY_NORMAL_VIEW.DICT.canPrev();
			]]></function>
			<function id="canDicPageForw"><![CDATA[
				return this.DICTIONARY_NORMAL_VIEW.DICT.canNext();
			]]></function>
			<function id="setIndex" params="index"><![CDATA[
				return this.DICTIONARY_NORMAL_VIEW.DICT.setIndex(index);
			]]></function>
			<function id="getIndex" params="index"><![CDATA[
				return this.DICTIONARY_NORMAL_VIEW.DICT.getIndex()
			]]></function>
			<function id="canDicEdit"><![CDATA[
				return true;
			]]></function>
			<function id="canDicExit"><![CDATA[
				return true;
			]]></function>
			<function id="doDicPageBack"><![CDATA[
				this.DICTIONARY_NORMAL_VIEW.DICT.doPrev();
			]]></function>
			<function id="doDicPageForw"><![CDATA[
				this.DICTIONARY_NORMAL_VIEW.DICT.doNext();
			]]></function>
			<function id="doNextHold"><![CDATA[
				this.DICTIONARY_NORMAL_VIEW.DICT.doNextHold();
			]]></function>
			<function id="doPreviousHold"><![CDATA[
				this.DICTIONARY_NORMAL_VIEW.DICT.doPreviousHold();
			]]></function>
			<function id="doNext"><![CDATA[
				if (this.canDicPageForw()) {
					this.doDicPageForw();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doPrevious"><![CDATA[
				if (this.canDicPageBack()) {
					this.doDicPageBack();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doLine" params="dir">
				return this.DICTIONARY_NORMAL_VIEW.DICT.doLine(dir)
			</function>
			<function id="doLineAndHoldStart" params="dir, down, up">
				return this.DICTIONARY_NORMAL_VIEW.DICT.doLineAndHoldStart(dir, down, up)
			</function>
			<function id="doLineAndHoldEnd" params="dir, down, up">
				return this.DICTIONARY_NORMAL_VIEW.DICT.doLineAndHoldEnd(dir, down, up)
			</function>
			<function id="doNextHold" params="part">
				return this.DICTIONARY_NORMAL_VIEW.DICT.doNextHold(part)
			</function>
			<function id="doPreviousHold" params="part">
				return this.DICTIONARY_NORMAL_VIEW.DICT.doPreviousHold(part)
			</function>
			<function id="doGestureFail" params="">
				trace(" doGestureFail at dicViewer(main.xml)\n")
				return this.DICTIONARY_NORMAL_VIEW.DICT.doGestureFail()
			</function>
			<function id="doDrag" params="x, y, type, tapCount">
				//trace(" doDrag at dicViewer(main.xml)\n")
				//return this.DICTIONARY_NORMAL_VIEW.DICT.doDrag(x, y, type, tapCount)
			</function>
			<function id="doSearch"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doMenu"><![CDATA[
				var model = this.getModel()
				model.doDicViewerClose()
			]]></function>
			<function id="doSelectItem"><![CDATA[
				this.DICTIONARY_NORMAL_VIEW.setVariable("VIEW", "CONTENT")
				this.updateHeadWord()
			]]></function>
			<function id="updateHeadWord"><![CDATA[
				var model=this.getModel();
				model.setVariable("VIEW_HEADWORD_UPDATE", false)
				model.setVariable("VIEW_HEADWORD_UPDATE", true)
			]]></function>
			<function id="getDict"><![CDATA[
				return this.DICTIONARY_NORMAL_VIEW.DICT;
			]]></function>
			<function id="getDictHead"><![CDATA[
				return this.DICTIONARY_NORMAL_VIEW.DICTHEAD;
			]]></function>getDictHead
			<function id="variableChanged" params="id, value"><![CDATA[
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					this.show(value);
					this.enableDicViewer(value);
					//if(value)
					//	this.container.PAGE_SUBGROUP.PAGE.focus(value);
					value ? this.getModel().opened(this): this.getModel().closed();
				}else if (id == "VAR_DIC_TEXT_SIZE") {
					this.DICTIONARY_NORMAL_VIEW.DICT.setTextSize(value);
				}else if(id == "VAR_DIC_LINE_SPACING"){
					this.DICTIONARY_NORMAL_VIEW.DICT.setLineSpacing(value);
				}
			]]></function>
			<function id="enableDicViewer" params="enableIt">
				this.DICTIONARY_NORMAL_VIEW.BTN_CLOSE.show(enableIt);
				this.DICTIONARY_NORMAL_VIEW.BTN_DICEDIT.show(enableIt);
			</function>
			<function id="doDicTest"><![CDATA[
				trace(" doDicTest in DicViewer\n")
				var model=this.getModel();
				{
					var dic_test = -1							// 100 or -1,-2,-3, -4
																// -1: all check
																// -2: the word in the dictionary
																// -3: the dictionary with the size
																// -4: check it only once.
					var ret = 0;
					var dic_index = 1;
					if (dic_test== -2)
						dic_index = this.getIndex()
					//index =139
					model.setVariable("VAR_DIC_INDEX",dic_index)
					if (dic_test<0) {
						var dir = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V")
						if (dir=="H") {
							model.targetModel.doSomething("onEnterOrientation");
						}
						if (dic_test== -3) {
							this.updateDictionaryViewer()
						} else if (kbook.model.setDictionaryIndex(0)==0) {
							model.reopen()
							model.setDictionaryScale(-1)
							this.updateDictionaryViewer()
							this.setIndex(dic_index)
						} else {
							ret = -1;
						}
					}
					if (ret==0) {
						this.redrawDictionaryViewer()
						model.setVariable("VAR_DIC_TEST",dic_test)
						kbook.model.processing(55);
					}
				}
			]]></function>
			<function id="nextDicTest"><![CDATA[
				var model=this.getModel();
				var dic_test = model.getVariable("VAR_DIC_TEST")
				if (dic_test>0) {
					if (this.canDicPageForw()) {
						this.doDicPageForw();
						--dic_test
					} else {
						dic_test = 0;
					}
					if (dic_test==0)
						kbook.model.processed(55);
					model.setVariable("VAR_DIC_TEST",dic_test)
				} else if (dic_test<0) {
					var action
					var dic_index = model.getVariable("VAR_DIC_INDEX")
					if (dic_test== -4) {
						action = "end"
					} else if (dic_test!=-2 && this.canDicPageForw()) {
						this.doDicPageForw();
					} else {
						var scale = model.editor.getScale()
						if (dic_test== -3) {
							action="end"
						} else if (scale < 4) { //XXL==4
							model.setDictionaryScale(scale+1)
							this.updateDictionaryViewer()
							this.setIndex(dic_index)
							this.redrawDictionaryViewer()
						} else {
							var index = kbook.model.getCurrentDictionaryIndex();
							if (dic_test!=-2 && kbook.model.setDictionaryIndex(index+1)==0) {
								action="reopen"
							} else {
								var dir = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V")
								if (dir=="V") {
									model.targetModel.doSomething("onEnterOrientation")
									if (kbook.model.setDictionaryIndex(0)==0) {
										action="reopen"
									} else {
										action="end" //error
									}
								} else {
									action="end"
								}
							}
						}
					}
					if (action=="reopen") {
						model.reopen()
						model.setDictionaryScale(-1)
						this.updateDictionaryViewer()
						if (dic_test!=-2)
							this.setIndex(dic_index)
						this.redrawDictionaryViewer()
					} else if (action=="end") {
						kbook.model.processed(55);
						model.setVariable("VAR_DIC_TEST",0)
					}
				}
			]]></function>
			<function id="showDicViewSizeIndicator" params="showIt">
				this.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showDicViewSizeIndicator(showIt);
			</function>
			<function id="setDicViewSizeIndicator" params="fontSize">
				this.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.setDicViewSizeIndicator(fontSize);
			</function>
		</code>
		<kbookStatus id="KBOOKSTATUS" left="0" right="0" height="33" bottom="0"/>
		<group id="DICTIONARY_NORMAL_VIEW" left="0" right="0" top="0" bottom="30" >
			<model>
				<variable id="VIEW" value="CONTENT"/>
				<variable id="VIEW_HEADWORD" value="HEADWORD"/>
			</model>
			<exPanel id="DICT_BACK" skin="dic_frame_bottom" left="0" right="0" height="200" bottom="0" visible="false"/>
			<exPanel id="PANEL_DIC_FRAME" skin="dic_frame"	left="0" right="0" top= "0" bottom="0" playing="match"/>
			<exPanelTop id="PANEL_DIC_FRAME_TOP" skin="dic_frame_top"	left="0" right="0" top= "0" bottom="0" visible="false" playing="match"/>
			<label id="DICTITLE" skin="label-dicTitle" top="12" left="7" right="56" height="32" align="left" variable="VAR_DIC_TITLE"/>
			
			<panel3part id="PANEL_DIC_HEADWORD" skin="dic_headword" bottom="7" left="10" right="100" height="46" active="false"/>
			<kbookDictionaryViewer id="DICTHEAD" skin="dic_viewer" bgColor="#FFC6C6C6" textSize="18" bottom="7" left="26" right="116" height="46" href="x-id://dictionaryData">
				<views variable="VIEW_HEADWORD" variableUpdate="VIEW_HEADWORD_UPDATE" headword="HEADWORD"/>
			</kbookDictionaryViewer>
			<!--button2icon skin="keyW2" width="30" height="50" bottom="3" right="116" text="T" do="doDicTest" bw="4"/-->
			<button2icon id="BTN_DICEDIT" skin="dicEdit" right="7" bottom="7" width="87" height="42" do="doDicEdit" can="canDicEdit"/>
			<button2icon id="BTN_CLOSE" skin="keyClose" right="14" top="7" width="42" height="42" do="doDicViewerClose" can="canDicExit"/>
			<kbookDictionaryViewer skin="dic_viewer" id="DICT" bgColor="#FFFFFFFF" textSize="VAR_DIC_TEXT_SIZE" lineSpacing="VAR_DIC_LINE_SPACING" columnSpacing="8" columnWidth="14" message="STR_UI_MESSAGE_DICTIONARY_NO_RESULT" replaceIdentifier="XXBUTTONXX:9" left="10" right="10" top="60" bottom="60" href="x-id://dictionaryData">
				<views variable="VIEW" content="CONTENT"/>
				<code>
					<function id="getModel">
						return this.container.container.getModel()
					</function>
					<function id="fitMonoToObj" params="mono,obj">
						mono.moveTo(obj.getX(),obj.getY())
						mono.sizeTo(obj.getWidth(),obj.getHeight())
						mono.show(true)
						//trace(" fitMonoToObj:{")
						//trace(mono.getX()+",")
						//trace(mono.getY()+",")
						//trace(mono.getWidth()+",")
						//trace(mono.getHeight()+"}\n")
					</function>
					<function id="onStartFastTurnPage">
						this.container.container.KBOOKSTATUS.show(false)
						this.container.PANEL_DIC_FRAME.show(false)
						this.container.PANEL_DIC_HEADWORD.show(false)
						this.container.DICTITLE.show(false)
						this.container.BTN_DICEDIT.show(false)
						this.container.BTN_CLOSE.show(false)

						this.container.PANEL_DIC_HEADWORD.show(true)
						this.container.BTN_DICEDIT.show(true)
						this.container.DICT_BACK.show(true)

						var frameTop = this.container.PANEL_DIC_FRAME_TOP
						frameTop.show(true)
						var mono = this.container.container
						this.fitMonoToObj(mono.MONOCHROME_FRAME, frameTop)
						this.fitMonoToObj(mono.MONOCHROME_CONTENT, this)
						this.fitMonoToObj(mono.MONOCHROME_HEADWORD, this.container.DICTHEAD)
						this.fitMonoToObj(mono.MONOCHROME_1, this.container.BTN_DICEDIT)
						this.fitMonoToObj(mono.MONOCHROME_2, this.container.PANEL_DIC_HEADWORD)
						this.fitMonoToObj(mono.MONOCHROME_3, this.container.DICT_BACK)

						this.container.container.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.setRegionMonochromeSize();
						this.container.container.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.MONOCHROME_SIZE.show(true)

						this.container.container.MONOCHROME_MODE.show(true)
					</function>
					<function id="onStopFastTurnPage">
						this.container.container.MONOCHROME_FRAME.show(false)
						this.container.container.MONOCHROME_CONTENT.show(false)
						this.container.container.MONOCHROME_HEADWORD.show(false)
						this.container.container.MONOCHROME_1.show(false)
						this.container.container.MONOCHROME_2.show(false)
						this.container.container.MONOCHROME_3.show(false)
						this.container.container.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.MONOCHROME_SIZE.show(false)
						this.container.container.MONOCHROME_MODE.show(false)
						this.container.PANEL_DIC_FRAME_TOP.show(false)
						this.container.DICT_BACK.show(false)

						this.container.container.KBOOKSTATUS.show(true)
						this.container.PANEL_DIC_FRAME.show(true)
						this.container.PANEL_DIC_HEADWORD.show(true)
						this.container.DICTITLE.show(true)
						this.container.BTN_DICEDIT.show(true)
						this.container.BTN_CLOSE.show(true)
					</function>
					<function id="getCurrentID">
						return this.container.container.MONOCHROME_MODE.getCurrentID()
					</function>
					<function id="getDrawnID">
						return this.container.container.MONOCHROME_MODE.getDrawnID()
					</function>
				</code>
			</kbookDictionaryViewer>
		</group>
		<monochrome id="MONOCHROME_FRAME" left="0" right="0" top="0" bottom="0" visible="false"/>
		<monochrome id="MONOCHROME_CONTENT" left="0" right="0" top="0" bottom="0" visible="false"/>
		<monochrome id="MONOCHROME_HEADWORD" bottom="0" left="0" width="0" height="0" visible="false"/>
		<monochrome id="MONOCHROME_1" bottom="0" left="0" width="0" height="0" visible="false"/>
		<monochrome id="MONOCHROME_2" bottom="0" left="0" width="0" height="0" visible="false"/>
		<monochrome id="MONOCHROME_3" bottom="0" left="0" width="0" height="0" visible="false"/>
		<eInkPanel id="MONOCHROME_MODE" mode="sync" frame="true" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookOverlay>


	<kbookOverlay id="SHORTCUT_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://pageShortcutOverlayModel">
		<model>
			<variable id="VAR_UPDATE" value="false"/>
			<variable id="VAR_DIC_TITLE" value="dic Title"/>
		</model>
		<code>
			<function id="initGoToDicEditBtn" params="count,dictionary,isWebModel"><![CDATA[
				var container2 = this.VIEW_SHORTCUT.VIEW_SHORTCUT2
				var model = kbook.model
				var dicID = model.getDictionary_FullID()
				if (dicID == "" || count==1) {
					container2.BTN_DICVIEWER.show(true)
					container2.BTN_DICVIEWER.enable(true)
					container2.BTN_DICEDIT.show(false)
					container2.BTN_DICEDIT.enable(false)
					container2.BTN_DICOTHERS.show(false)
					container2.BTN_DICOTHERS.enable(false)
				}else if (count==0) {
					container2.BTN_DICVIEWER.show(false)
					container2.BTN_DICVIEWER.enable(false)
					container2.BTN_DICEDIT.show(true)
					container2.BTN_DICEDIT.enable(true)
					container2.BTN_DICOTHERS.show(false)
					container2.BTN_DICOTHERS.enable(false)
				} else {
					container2.BTN_DICVIEWER.show(true)
					container2.BTN_DICVIEWER.enable(true)
					container2.BTN_DICEDIT.show(false)
					container2.BTN_DICEDIT.enable(false)
					container2.BTN_DICOTHERS.show(true)
					container2.BTN_DICOTHERS.enable(true)
				}
				if (isWebModel) {
					container2.BTN_CALLPEDIA.show(true)
					container2.BTN_CALLPEDIA.enable(true)
				}

				if (dictionary) {
					container2.BTN_HIGHLIGHT.show(false)
					container2.BTN_HIGHLIGHT.enable(false)
					container2.BTN_SEARCH.show(false)
					container2.BTN_SEARCH.enable(false)
				} else {
					container2.BTN_HIGHLIGHT.show(true)
					container2.BTN_HIGHLIGHT.enable(true)
					container2.BTN_SEARCH.show(true)
					container2.BTN_SEARCH.enable(true)
				}

				model=this.getModel();
				var title = kbook.model.getDictionary_Title()
				if (title) {
					model.setVariable("VAR_DIC_TITLE", title)
					this.VIEW_SHORTCUT.VIEW_SHORTCUT3.btn_chgDic.setText(title)
				}
					
			]]></function>
			<function id="beforeOpenDicViewer"><![CDATA[
				this.VIEW_SHORTCUT.setVariable("VIEW", "SIMPLE");
			]]></function>
			<function id="doDrag" params="x, y, type, tapCount">
				//trace(" doDrag shortcut at main.xml\n")
				this.getModel().doDrag(x, y, type, tapCount);
			</function>
			<function id="doGestureFail">
				//trace(" doGestureFail shortcut at main.xml\n")
				this.getModel().doGestureFail();
			</function>
		</code>

		<group id="VIEW_SHORTCUT"  left="0" right="0" bottom="0" height="185" visible="true" active="true"> <!-- PRS+ change, was: height="183" -->
			<model>
				<variable id="VIEW" value="CONTENT"/>
			</model>

			<code>
				<function id="canTap">
					return false;
				</function>
				<function id="canDoubleTap">
					return false;
				</function>
				<function id="canLine">
					return false;
				</function>
				<function id="canLineAndHold">
					return false;
				</function>
			</code>
			<!-- background of menu -->
			<panel skin="kbarea" left="0" right="0" top="0" bottom="0" active="true"/>
			<panel skin="img_white" left="0" right="0" top="60" bottom="0" active="true"/>
			<group id="VIEW_SHORTCUT2" left="0" right="0" top="0" height="60" visible="true" active="true">
				<exButton skin="fontClose" right="10" width="50" height="50" do="doCloseShortcut" bw="4"/>
				<button2icon id="BTN_SEARCH"    skin="btn_search"    right="90"  width="50" height="50" do="doShortcutSearch" bw="4"/>
				<button2icon id="BTN_HIGHLIGHT" skin="btn_highlight" right="140" width="50" height="50" do="doShortcutHighlight" bw="4"/>
				<button2icon id="BTN_CALLPEDIA" skin="btn_callPedia" right="190" width="50" height="50" do="doCallPedia" visible="false" active="false" bw="4"/>
				<button2icon id="BTN_DICVIEWER" skin="btn_callDic"   left="10"   width="50" height="50" variableUpdate="VAR_UPDATE" do="doShortcutDictionary" bw="4"/>
				<button2icon id="BTN_DICEDIT"   skin="btn_callDic"   left="10"   width="50" height="50" variableUpdate="VAR_UPDATE" do="doDicOthers" bw="4"/>
				<button2icon id="BTN_DICOTHERS" skin="btn_dicOthers" left="60"   width="50" height="50" variableUpdate="VAR_UPDATE" do="doDicOthers" bw="4"/>
				<button2icon id="BTN_PREVDICENTRY" skin="keyLeft"    left="140" width="42"  height="42" do="doNextPrevDicEntry"/> <!-- PRS+ added -->
				<button2icon id="BTN_NEXTDICENTRY" skin="keyRight"   left="190" width="42"  height="42" do="doNextPrevDicEntry"/> <!-- PRS+ added -->
				<group id="adjustFont_SHORTCUT" left="110" right="240" top="0" bottom="0" visible="false" active="false">
					<label skin="number-ToneCurve" left="0"  width="32"  height="42" align="center" variable="VAR_DATABASE"/>
					<button2icon skin="keyLeft"    left="40" width="42"  height="42" can="canDatabasePrev" do="doDatabasePrev" variableUpdate="VAR_UPDATE_DATABASE"/>
					<button2icon skin="keyRight"   left="90" width="42"  height="42" can="canDatabaseNext" do="doDatabaseNext" variableUpdate="VAR_UPDATE_DATABASE"/>
				</group>
			</group>
			<!-- line_shortcut -->
			<group id="VIEW_SHORTCUT3" left="0" right="0" top="60" height="42">
				<button2icon id="btn_chgDic" skin="btn_chgDic2" left="10" right="10" height="40" do="doChangeDictionary" bw="4"/>
			</group>
			<exLine skin="line_shortcut" left="14" right="14" top="102" height="2"/> <!-- PRS+ change: bottom="79" to top="102" -->


			<!-- line space is 3 dot.  lineSpaceing= 3*72/kFskDocumentViewerDefaultDPI = 3*72/167 = 1.2934 -->
			<kbookDictionaryButton id="DIC_BTN" skin="shortcutDictionary" message="STR_UI_MESSAGE_NO_DEFINITION,STR_UI_MESSAGE_DICTIONARY_NOT_SUPPORTED" replaceIdentifier="XXBUTTON1XX:0,XXBUTTON2XX:1" bgColor="#FFFFFFFF" textSize="8" lineSpacing="1.2934" left="14" right="14" bottom="2" height="79" variableUpdate="VAR_UPDATE" can="canShortcutDictionary" do="doShortcutDictionary" href="x-id://dictionaryData"/> <!-- PRS+ change, was: bottom="0" -->
			<fillBackground color="black" left="0" right="0" bottom="0" height="2"/> <!-- PRS+ added -->
		</group>
	</kbookOverlay>

	<kbookOverlay id="DICTIONARY_EDITOR_OVERLAY"  left="0" right="0" top="0" bottom="0" visible="false" href="x-id://pageDictionaryEditorOverlayModel">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_KEYBUF_DIC" value="" />
			<variable id="VAR_OPEN_DIC_EDIT_FLAG" value="false"/>
			<variable id="VAR_UPDATE" value="false"/>
			<variable id="VAR_UPDATEBTN" value="false"/>
			<variable id="VAR_PAGENUM" value="" />
			<variable id="VAR_DIC_TITLE" value="" />
			<variable id="VAR_DIC_TEXT_SIZE" value="10"/>
			<variable id="VAR_DIC_LINE_HEIGHT" value="35"/>
			<variable id="VAR_UPDATE_PAGENO"	value="false"/>
			<variable id="VAR_DIC_TEST"	value="0"/>
		</model>
		<code>
			<function id="getKeyboardObj"><![CDATA[
				return this.KEYBOARD
			]]></function>
			
			
			
			<function id="beforeOpenDicEditor"><![CDATA[
				var model=this.getModel();
				var words=model.getVariable("VAR_KEYBUF");
				var keyboard = this.getKeyboardObj();

				this.container.KEYBOARD_POPUP_GROUP.initPopup(keyboard);
				var settings = kbook.model.getDictionary_Keyboard()
				keyboard.KEYLAYOUT.changeKeyboardType(settings);
				keyboard.KEYLAYOUT.setType("ALPHABET");

				keyboard.initBuffer(words,"strExisted",false);
				model.setVariable("VAR_OPEN_DIC_EDIT_FLAG", true);
				
				var title = kbook.model.getDictionary_Title()
				if (title) 
					model.setVariable("VAR_DIC_TITLE", title)
				this.updatePageNo();
			]]></function>
			<function id="beforeCloseDicEditor"><![CDATA[
				var model=this.getModel();
				model.setVariable("VAR_OPEN_DIC_EDIT_FLAG", false);
			]]></function>
			<function id="redrawDictionaryViewer"><![CDATA[
				var dict = this.getDict();
				if (dict)
					dict.redraw()
			]]></function>
			<function id="canDicPageBack"><![CDATA[
				var dict = this.getDict();
				return dict.canPrev();
			]]></function>
			<function id="canDicPageForw"><![CDATA[
				var dict = this.getDict();
				return dict.canNext();
			]]></function>
			
			<function id="canDicExit"><![CDATA[
				return true;
			]]></function>
			<function id="doDicPageBack"><![CDATA[
				var dict = this.getDict();
				dict.doPrev();
				this.updatePageNo()
			]]></function>
			<function id="doDicPageForw"><![CDATA[
				var dict = this.getDict();
				dict.doNext();
				this.updatePageNo()
			]]></function>
			<function id="doSelChanged2" params="offset, length">
				var keyboard = this.getKeyboardObj();
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				//trace("doSelChanged1: offset="+offset+" length="+length+"\n");
				keyboard.doSelChanged(offset,length,words,false);
				
				var model=this.model;
				if(model.VAR_OPEN_DIC_EDIT_FLAG) {
					var words2 = model.getVariable("VAR_KEYBUF_DIC")
					if (words != words2) {
						model.setVariable("VAR_KEYBUF_DIC", words);
						model.doSearch(words,"detail");
						this.KEYBOARD.setVariable("VIEW", "LIST")
					}
				}
			</function>
			<function id="doOverflow" params="text">
				this.bubble("doBlink");
			</function>
			<function id="doNext"><![CDATA[
				if (this.canDicPageForw()) {
					this.doDicPageForw();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doPrevious"><![CDATA[
				if (this.canDicPageBack()) {
					this.doDicPageBack();
				} else {
					this.bubble("doBlink");
				}
			]]></function>
			<function id="doSearch"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doMenu"><![CDATA[
				var kbdObj=this.KEYBOARD;
				if(kbdObj.KEYLAYOUT.popup.isShown()){
					kbdObj.KEYLAYOUT.popup.container.deletePopup();
				}else{
					var model = this.getModel()
					model.doDicEditorClose()
				}
			]]></function>
			<function id="showKeyboardMode" params="showIt">
				this.KEYBOARD_MODE.show(showIt)
			</function>
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					//trace("DICTIONARY_EDITOR:variableChanged:"+id+"="+value+"\n");
					if (!value)
						this.show(value);
					this.enableDicEditor(value)
					this.KEYBOARD_MODE.show(value)
					if(value) {
						var keyboard = this.getKeyboardObj();
						keyboard.KEYBUF.focus(value);
						this.show(value)
					}
					else {
						this.container.KEYBOARD_POPUP_GROUP.deletePopup()
					}
				}else if (id == "VAR_DIC_TEXT_SIZE") {
					var dict = this.getDict()
					dict.setTextSize(value);
				}else if (id == "VAR_DIC_LINE_HEIGHT"){
					var dict = this.getDict()
					dict.setLineHeight(value);
				}else if (id == "VAR_UPDATE_PAGENO") {
					this.updatePageNo()
				}
			</function>
			<function id="enableDicEditor" params="enableIt">
				if (!enableIt)
					this.container.KEYBOARD_POPUP_GROUP.deletePopup()
				this.KEYBOARD.BTN_CLOSE.show(enableIt);
				this.KEYBOARD.cmtPageBack.show(enableIt);
				this.KEYBOARD.cmtPageForw.show(enableIt);
				this.KEYBOARD.KEYLAYOUT.show(enableIt);
			</function>
			<function id="getDict"><![CDATA[
				return this.KEYBOARD.DICT
			]]></function>
			<function id="updatePageNo"><![CDATA[
				var model = this.model
				var dict = this.getDict()
				var offs = dict.getOffset()
				var count = dict.countRecords()
				var lineCount = dict.getLineCount()
				var var_pagenum = model.getVariable("VAR_PAGENUM")
				var pagenum
				if (count>0) {
					var page = Math.floor(offs / lineCount) + 1
					var total = Math.floor( (count + lineCount - 1) / lineCount)
					if (count>100) {
						pagenum = ">100 "+"fskin:/l/strings/STR_UI_DICTIONARY_ENTRIES_PAGE".idToString()+" "+ page+"/"+total
					} else if (count==1) {
						pagenum = "1 "+"fskin:/l/strings/STR_UI_DICTIONARY_ENTRY_PAGE".idToString()+" "+ page+"/"+total
					} else {
						pagenum = "" + count+" "+"fskin:/l/strings/STR_UI_DICTIONARY_ENTRIES_PAGE".idToString()+" "+ page+"/"+total
					}
				} else {
					pagenum = "0 "+"fskin:/l/strings/STR_UI_DICTIONARY_ENTRY_PAGE".idToString()+" --- / ---"
				}
				if (var_pagenum != pagenum) {
					model.setVariable("VAR_PAGENUM",pagenum)
				}
				model.setVariable("VAR_UPDATE", false)
				model.setVariable("VAR_UPDATE", true)
			]]></function>
			<function id="doDicTest"><![CDATA[
				trace(" doDicTest in DicEdit\n")
				var keyboard = this.getKeyboardObj()
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				var model=this.getModel();
				{
					var text = "a"
					keyboard.setFieldString(text)
					this.redrawDictionaryViewer()
					model.setVariable("VAR_DIC_TEST",1)
					kbook.model.processing(55);
				}
			]]></function>
			<function id="nextDicTest"><![CDATA[
				var keyboard = this.getKeyboardObj()
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				var model=this.getModel();
				var dicTest = model.getVariable("VAR_DIC_TEST")
				if (dicTest) {
					if (words) {
						var code = words.charCodeAt(0)
						var code_z = "z".charCodeAt(0)
						if (code < code_z) {
							words= String.fromCharCode(code+1)
							keyboard.setFieldString(words)
							this.redrawDictionaryViewer()
						} else {
							model.setVariable("VAR_DIC_TEST",0)
							kbook.model.processed(55);
						}
					} else {
						model.setVariable("VAR_DIC_TEST",0)
						kbook.model.processed(55);
					}
				}
			]]></function>
			<function id="showDicEditSizeIndicator" params="showIt">
				this.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.showDicEditSizeIndicator(showIt);
			</function>
			<function id="setDicEditSizeIndicator" params="fontSize">
				this.container.STATUS_GROUP.STATUS_GROUP_SUB.STATUS_GROUP.setDicEditSizeIndicator(fontSize);
			</function>
		</code>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<keyboard id="KEYBOARD" left="0" right="0" top="0" bottom="30">
			<model>
				<variable id="VIEW" value="LIST"/>
			</model>
			<exPanel  skin="dic_frame"	left="0" right="0" top= "0" bottom="256" playing="match"/>
			<label skin="label-dicTitle" top="12" left="7" right="56" height="32" align="left" variable="VAR_DIC_TITLE"/>
			<button2icon id="BTN_CLOSE" skin="keyClose" right="14" top="7" width="42" height="42" do="doDicEditorClose" can="canDicExit"/>
			<kbookDictionaryViewer skin="dic_viewer" id="DICT" bgColor="#FFFFFFFF" lineHeight="VAR_DIC_LINE_HEIGHT" textSize="VAR_DIC_TEXT_SIZE" left="10" right="10" top="60" bottom="316" href="x-id://dictionaryData">
					<views variable="VIEW" list="LIST"/>
			</kbookDictionaryViewer>
			<limitedField skin="dictionaryInput" id="KEYBUF" left="14" right="336" bottom="264" height="42" doSelectionChanged="doSelChanged2" variable="VAR_KEYBUF" visible="true" active="true"/>
			<button2icon id="cmtPageBack" skin="dicPagePrev" right="78" bottom="263" width="57" height="42" variableUpdate="VAR_UPDATE" do="doDicPageBack" can="canDicPageBack"/>
			<button2icon id="cmtPageForw" skin="dicPageNext" right="14" bottom="263" width="57" height="42" variableUpdate="VAR_UPDATE" do="doDicPageForw" can="canDicPageForw"/>
			<label skin="label-dicPageNo" bottom="271" right="143" width="200" height="26" align="right" variable="VAR_PAGENUM"/>
			<keyLayout id="KEYLAYOUT" left="0" right="0" height="256" bottom="0" ignore="ignore" skin="keyW_H" href="dictionaryKeyboardLayout.xml">
				<code>
					<function id="registerKey" params="key, bounds">
						this.container.container.KEYBOARD_MODE.register(key, bounds)
					</function>
					<function id="unregisterKey" params="key">
						this.container.container.KEYBOARD_MODE.unregister(key)
					</function>
				</code>
			</keyLayout>
		</keyboard>
		
		<!--button2icon skin="keyW2" width="30" height="50" bottom="33" left="8" text="T" do="doDicTest" bw="4"/-->
		<eInkPanelKeyboard id="KEYBOARD_MODE" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_PAGE_TONECURVE"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_TONETYPE" value="0"/>
		</model>
		<code>
			<function id="canTap">
				return false;
			</function>
			<function id="canDoubleTap">
				return false;
			</function>
			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
		</code>
		<group id="TONECURVE_AREA" left="0" right="0" bottom="0" height="122" visible="true" active="true">
			<code>
				<function id="canLine">
					return false;
				</function>
				<function id="canLineAndHold">
					return false;
				</function>
			</code>
			<panel skin="kbarea" left="0" right="0" top="0" bottom="0" active="true"/>
			<group id="TONECURVE_PARTS_GROUP" top="0" bottom="0" left="0" right="0">
				<group id="PARTS_NORMAL" top="0" bottom="0" width="532" visible="false" active="true">
					<radio2 id="RADIO_TONE_N_ORIGINAL" skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_ORIGINAL"  left=  "0" width="156" top="23" height="30" on="0" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<radio2 id="RADIO_TONE_N_PROMINET" skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_PROMINENT" left="156" width="156" top="23" height="30" on="1" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<radio2 id="RADIO_TONE_N_DETAILED" skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_DETAILED"  left="312" width="156" top="23" height="30" on="2" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<radio2 id="RADIO_TONE_N_LIGHTER"  skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_LIGHTER"   left=  "0" width="156" top="76" height="30" on="3" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<radio2 id="RADIO_TONE_N_DARKER"   skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_DARKER"    left="156" width="156" top="76" height="30" on="4" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<radio2 id="RADIO_TONE_N_CUSTOM"   skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_CUSTOM"    left="312" width="156" top="76" height="30" on="5" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<button2icon id="BTN_CUSTOM_N" skin="customButton" width="64" bottom="15" height="36" do="doCustomButton"/>
				</group>
				<group id="PARTS_WIDE" top="0" bottom="0" left="0" right="0" visible="false" active="true">
					<radio2 id="RADIO_TONE_W_ORIGINAL" skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_ORIGINAL"  left="205" width="156" top="23" height="30" on="0" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<radio2 id="RADIO_TONE_W_PROMINET" skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_PROMINENT" left="410" width="156" top="23" height="30" on="1" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<radio2 id="RADIO_TONE_W_DETAILED" skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_DETAILED"  left="615" width="156" top="23" height="30" on="2" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<radio2 id="RADIO_TONE_W_LIGHTER"  skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_LIGHTER"   left="205" width="156" top="76" height="30" on="3" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<radio2 id="RADIO_TONE_W_DARKER"   skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_DARKER"    left="410" width="156" top="76" height="30" on="4" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<radio2 id="RADIO_TONE_W_CUSTOM"   skin="radioToneCurve" textresource="STR_UI_RADIOBUTTON_TONE_CURVE_CUSTOM"    left="615" width="156" top="76" height="30" on="5" variable="VAR_RADIO_TONETYPE" do="doRadioTone"/>
					<button2icon id="BTN_CUSTOM_W" skin="customButton" width="64" bottom="15" height="36" do="doCustomButton"/>
				</group>
			</group>

			<button2icon skin="fontClose" 	 right="20" top="12" width="50" height="50" bw="4" do="doToneCurveClose"/>
		</group>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_PAGE_TONECURVEEDITOR"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_TONECURVE_SLIDER_1" value="0" />
			<variable id="VAR_TONECURVE_SLIDER_2" value="0" />
			<variable id="VAR_TONECURVE_LABEL_1" value="0" />
			<variable id="VAR_TONECURVE_LABEL_2" value="0" />
			<variable id="VAR_UPDATE_RESET" value="false"/>
			<variable id="VAR_UPDATE_BTN1" value="false"/>
			<variable id="VAR_UPDATE_BTN2" value="false"/>
			
			<variable id="VAR_BGCOLOR_TYPE" value="0" />
			<variable id="VAR_FCOLOR_LEVELS" value="0" />
			<variable id="VAR_UPDATE_TYPE" value="false"/>
			<variable id="VAR_UPDATE_LIMIT" value="false"/>
			<variable id="VAR_UPDATE_DATABASE" value="false"/>
			<variable id="VAR_DATABASE" value=""/>
			<variable id="VAR_LIMIT_0" value="0"/>
			<variable id="VAR_LIMIT_1" value="0"/>
			<variable id="VAR_LIMIT_2" value="0"/>
			<variable id="VAR_LIMIT_3" value="0"/>
			<variable id="VAR_LIMIT_4" value="0"/>
			<variable id="VAR_LIMIT_5" value="0"/>
			<variable id="VAR_LIMIT_6" value="0"/>
		</model>
		<code>
			<function id="canTap">
				return false;
			</function>
			<function id="canDoubleTap">
				return false;
			</function>
			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
		</code>
		
		<group id="TONECURVE_AREA" left="0" right="0" bottom="0" height="122" visible="true" active="true">
			<code>
				<function id="canLine">
					return false;
				</function>
				<function id="canLineAndHold">
					return false;
				</function>
			</code>
			<panel skin="kbarea" left="0" right="0" top="0" bottom="0" active="true"/>
			
			<group left="24" top="14" width="42" height="42">
				<panel1part skin="image_tonecurve_contrast" width="33" height="33"/>
			</group>
			<group left="24" bottom="12" width="42" height="42">
				<panel1part skin="image_tonecurve_brightness" width="33" height="33"/>
			</group>

			<button2icon skin="fontClose" 	 right="20" top="8" width="50" height="50" bw="4" do="doToneCurveClose"/>
			<button2icon skin="keyW2" right="20" width="163" bottom="8" height="50" bw="4" variableUpdate="VAR_UPDATE_RESET" can="canToneReset" do="doToneReset" text="fskin:/l/strings/STR_UI_BUTTON_TONE_CURVE_RESET"/>

			<kbookSlider id="toneCurveSlider1"	left="128" top   ="15" right="300" variable="VAR_TONECURVE_SLIDER_1" skin="jumpBar" axis="x" min="-127" max="127" cast="1:0,1:0" do="toneCurveDo1" track="toneCurveTrack1"/>
			<kbookSlider id="toneCurveSlider2"	left="128" bottom="13" right="300" variable="VAR_TONECURVE_SLIDER_2" skin="jumpBar" axis="x" min="-255" max="255" cast="1:0,1:0" do="toneCurveDo2" track="toneCurveTrack2"/>
			
			<button2icon skin="keyLeft"  right="250" top="14"    width="42"  height="42" can="canTone1Prev" do="doTone1Prev" variableUpdate="VAR_UPDATE_BTN1"/>
			<button2icon skin="keyRight" right="200" top="14"    width="42"  height="42" can="canTone1Next" do="doTone1Next" variableUpdate="VAR_UPDATE_BTN1"/>
	
			<button2icon skin="keyLeft"  right="250" bottom="12" width="42"  height="42" can="canTone2Prev" do="doTone2Prev" variableUpdate="VAR_UPDATE_BTN2"/>
			<button2icon skin="keyRight" right="200" bottom="12" width="42"  height="42" can="canTone2Next" do="doTone2Next" variableUpdate="VAR_UPDATE_BTN2"/>

			<label skin="number-ToneCurve" top   ="14" left= "66" height="42" width="7"  align="right" text="("/>
			<label skin="number-ToneCurve" top   ="14" left= "73" height="42" width="42" align="right" variable="VAR_TONECURVE_SLIDER_1"/>
			<label skin="number-ToneCurve" top   ="14" left="115" height="42" width="7"  align="right" text=")"/>

			<label skin="number-ToneCurve" bottom="12" left= "66" height="42" width="7"  align="right" text="("/>
			<label skin="number-ToneCurve" bottom="12" left= "73" height="42" width="42" align="right" variable="VAR_TONECURVE_SLIDER_2"/>
			<label skin="number-ToneCurve" bottom="12" left="115" height="42" width="7"  align="right" text=")"/>
			
		</group>

		<group id="adjustFont_TONECURVEEDITOR" left="0" right="0" height="350" bottom="0" visible="false" active="false">
			<panel skin="kbarea" left="0" right="0" top="0" bottom="0" active="true"/>

			<label skin="number-ToneCurve" top="8" height="42" left="0"  width="40" align="right" variable="VAR_LIMIT_6"/>
			<button2icon skin="keyLeft"    top="8" height="42" left="40" width="42"  can="canLimitPrev_6" do="doLimitPrev_6big" variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyLeft"    top="8" height="42" left="90" width="42" can="canLimitPrev_6" do="doLimitPrev_6"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="8" height="42" left="140" width="42" can="canLimitNext_6" do="doLimitNext_6"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="8" height="42" left="190" width="42" can="canLimitNext_6" do="doLimitNext_6big" variableUpdate="VAR_UPDATE_LIMIT"/>
			
			<label skin="number-ToneCurve" top="58" height="42" left="0"  width="40" align="right" variable="VAR_LIMIT_5"/>
			<button2icon skin="keyLeft"    top="58" height="42" left="40" width="42"  can="canLimitPrev_5" do="doLimitPrev_5big" variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyLeft"    top="58" height="42" left="90" width="42" can="canLimitPrev_5" do="doLimitPrev_5"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="58" height="42" left="140" width="42" can="canLimitNext_5" do="doLimitNext_5"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="58" height="42" left="190" width="42" can="canLimitNext_5" do="doLimitNext_5big" variableUpdate="VAR_UPDATE_LIMIT"/>
			
			<label skin="number-ToneCurve" top="108" height="42" left="0"  width="40" align="right" variable="VAR_LIMIT_4"/>
			<button2icon skin="keyLeft"    top="108" height="42" left="40" width="42"  can="canLimitPrev_4" do="doLimitPrev_4big" variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyLeft"    top="108" height="42" left="90" width="42" can="canLimitPrev_4" do="doLimitPrev_4"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="108" height="42" left="140" width="42" can="canLimitNext_4" do="doLimitNext_4"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="108" height="42" left="190" width="42" can="canLimitNext_4" do="doLimitNext_4big" variableUpdate="VAR_UPDATE_LIMIT"/>
			
			<label skin="number-ToneCurve" top="158" height="42" left="0"  width="40" align="right" variable="VAR_LIMIT_3"/>
			<button2icon skin="keyLeft"    top="158" height="42" left="40" width="42"  can="canLimitPrev_3" do="doLimitPrev_3big" variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyLeft"    top="158" height="42" left="90" width="42" can="canLimitPrev_3" do="doLimitPrev_3"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="158" height="42" left="140" width="42" can="canLimitNext_3" do="doLimitNext_3"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="158" height="42" left="190" width="42" can="canLimitNext_3" do="doLimitNext_3big" variableUpdate="VAR_UPDATE_LIMIT"/>
			
			<label skin="number-ToneCurve" top="208" height="42" left="0"  width="40" align="right" variable="VAR_LIMIT_2"/>
			<button2icon skin="keyLeft"    top="208" height="42" left="40" width="42"  can="canLimitPrev_2" do="doLimitPrev_2big" variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyLeft"    top="208" height="42" left="90" width="42" can="canLimitPrev_2" do="doLimitPrev_2"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="208" height="42" left="140" width="42" can="canLimitNext_2" do="doLimitNext_2"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="208" height="42" left="190" width="42" can="canLimitNext_2" do="doLimitNext_2big" variableUpdate="VAR_UPDATE_LIMIT"/>
			
			<label skin="number-ToneCurve" top="258" height="42" left="0"  width="40" align="right" variable="VAR_LIMIT_1"/>
			<button2icon skin="keyLeft"    top="258" height="42" left="40" width="42"  can="canLimitPrev_1" do="doLimitPrev_1big" variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyLeft"    top="258" height="42" left="90" width="42" can="canLimitPrev_1" do="doLimitPrev_1"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="258" height="42" left="140" width="42" can="canLimitNext_1" do="doLimitNext_1"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="258" height="42" left="190" width="42" can="canLimitNext_1" do="doLimitNext_1big" variableUpdate="VAR_UPDATE_LIMIT"/>
			
			<label skin="number-ToneCurve" top="308" height="42" left="0"  width="40" align="right" variable="VAR_LIMIT_0"/>
			<button2icon skin="keyLeft"    top="308" height="42" left="40" width="42"  can="canLimitPrev_0" do="doLimitPrev_0big" variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyLeft"    top="308" height="42" left="90" width="42" can="canLimitPrev_0" do="doLimitPrev_0"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="308" height="42" left="140" width="42" can="canLimitNext_0" do="doLimitNext_0"    variableUpdate="VAR_UPDATE_LIMIT"/>
			<button2icon skin="keyRight"   top="308" height="42" left="190" width="42" can="canLimitNext_0" do="doLimitNext_0big" variableUpdate="VAR_UPDATE_LIMIT"/>

			<button2icon skin="fontClose"  right="0" top="8" width="50" height="50" bw="4" do="doToneCurveClose"/>
			
			<label skin="number-ToneCurve" top="50"  left="270" height="42" width="20"  align="right" variable="VAR_BGCOLOR_TYPE"/>
			<button2icon skin="keyLeft"    top="100" left="240" width="42"  height="42" can="canTypePrev" do="doTypePrev" variableUpdate="VAR_UPDATE_TYPE"/>
			<button2icon skin="keyRight"   top="100" left="290" width="42"  height="42" can="canTypeNext" do="doTypeNext" variableUpdate="VAR_UPDATE_TYPE"/>
				
			<label skin="number-ToneCurve" bottom="54" left="270" height="42" width="20"  align="right" variable="VAR_FCOLOR_LEVELS"/>
			<button2icon skin="keyLeft"    bottom="4"  left="270" height="42" width="42"  do="doSave" variableUpdate="VAR_UPDATE_TYPE"/>
			
			<label skin="number-ToneCurve" top="0"  right="50" height="40" width="256"  align="center" variable="VAR_DATABASE"/>
			<button2icon skin="keyLeft"    top="40" right="150" width="42"  height="42" can="canDatabasePrev" do="doDatabasePrev" variableUpdate="VAR_UPDATE_DATABASE"/>
			<button2icon skin="keyRight"   top="40" right="100" width="42"  height="42" can="canDatabaseNext" do="doDatabaseNext" variableUpdate="VAR_UPDATE_DATABASE"/>
		</group> 
		<!--optGraph id="TONECURVE_GRAPH"             skin="tonecurveGraph" width="264" height="264" bottom="122" right="0"/-->
		<!--optGraph id="TONECURVE_GRAPH" type="font" skin="tonecurveGraph" width="264" height="264" bottom="0" right="0"/--> <!--adjustFont-->
	</kbookOverlay>

	<group id="viewGroup" clip="true" left="100" top="100" width="320" height="320">
		<model>
			<variable id="originXVariable" value="0"/>
			<variable id="originYVariable" value="0"/>
			<variable id="transXVariable" value="0"/>
			<variable id="transYVariable" value="0"/>
			<variable id="scaleXVariable" value="1"/>
			<variable id="scaleYVariable" value="1"/>
			<variable id="antiAliasVariable" value="1"/>
			<variable id="canZoomAndPan" value="0"/>
			<variable id="haveDocument" value="0"/>
			<variable id="toolToggle" value="allOff"/>
			
			<code>
				<function id="updateSVG" params="">
					var originX = Number(this.getVariable("originXVariable"))
					var originY = Number(this.getVariable("originYVariable"))
					var transX = Number(this.getVariable("transXVariable"))
					var transY = Number(this.getVariable("transYVariable"))
					var scaleX = Number(this.getVariable("scaleXVariable"))
					var scaleY = Number(this.getVariable("scaleYVariable"))
					var antiAlias = Number(this.getVariable("antiAliasVariable"))
					var svgImage = this.container.theSVGImage
					svgImage.xOrigin = originX
					svgImage.yOrigin = originY
					svgImage.xTranslation = transX
					svgImage.yTranslation = transY
					svgImage.xScale = scaleX
					svgImage.yScale = scaleY
					svgImage.antiAlias = antiAlias		
					svgImage.matrixChanged()
				</function>
				<function id="canOpen">
					return true
				</function>
				<function id="onlyOpen" params="path">
					var svgImage = this.container.theSVGImage
					svgImage.setURI("")
					var url = "file://" + path
					svgImage.setURI(url)	
					svgImage.xOrigin = 0
					svgImage.yOrigin = 0
					svgImage.xTranslation = 0
					svgImage.yTranslation = 0
					svgImage.xScale = 1
					svgImage.yScale = 1
					svgImage.antiAlias = 1		
					//svgImage.matrixChanged()
				</function>
				<function id="doOpen">
					var result = FileSystem.chooseFile()
					if (result) {
						this.setVariable("haveDocument", "1")
						if (1)
							this.linkToURL("file://" + result[0])
						else
							this.onlyOpen(result[0])
		//				this.changed()
					}
				</function>
				<function id="doReopen">
					this.displayCurrent()
				</function>
				<function id="doReset">
					this.setVariable("originXVariable", 0)
					this.setVariable("originYVariable", 0)
					this.setVariable("transXVariable", 0)
					this.setVariable("transYVariable", 0)
					this.setVariable("scaleXVariable", 1)
					this.setVariable("scaleYVariable", 1)
					this.setVariable("antiAliasVariable", 1)
					this.updateSVG()
				</function>
				<function id="canForward"><![CDATA[
					return this.historyIndex < (this.history.length - 1)
				]]></function>
				<function id="doForward">
					this.historyIndex++
					this.changed()
					this.displayCurrent()
				</function>
				<function id="canBackward">
					return this.historyIndex > 0
				</function>
				<function id="doBackward">
					this.historyIndex--
					this.changed()
					this.displayCurrent()
				</function>
						
				<function id="canDraw"><![CDATA[
					return this.getVariable("haveDocument") != 0 && this.getVariable("canZoomAndPan") != 0			
				]]></function>
				<function id="doDraw">
					this.container.theSVGImage.drawSVGFont(19)
				</function>

				<function id="canDrag"><![CDATA[
					return this.getVariable("haveDocument") != 0 && this.getVariable("canZoomAndPan") != 0			
				]]></function>
				<function id="doDrag">
					this.container.theSVGImage.setTool("drag")			
				</function>
				<function id="canZoom"><![CDATA[
					return this.getVariable("haveDocument") != 0 && this.getVariable("canZoomAndPan") != 0					
				]]></function>
				<function id="doZoom">
					this.container.theSVGImage.setTool("zoom")			
				</function>
				<function id="doNoTool">
					this.container.theSVGImage.setTool("none")
				</function>

				<function id="canRewind"><![CDATA[
					return this.getVariable("haveDocument") != 0 && ! this.container.theSVGImage.isPlaying()
				]]></function>
				<function id="doRewind">
					this.container.theSVGImage.rewind()
				</function>
				<function id="canPlayPause">
					return this.getVariable("haveDocument") != 0
				</function>
				<function id="doPlayPause">
					this.container.theSVGImage.playPause()
					this.changed()
				</function>
				<function id="canStepBackward"><![CDATA[
					return this.getVariable("haveDocument") != 0 && ! this.container.theSVGImage.isPlaying()
				]]></function>
				<function id="doStepBackward">
					this.container.theSVGImage.stepBackward()		
				</function>
				<function id="canStepForward"><![CDATA[
					return this.getVariable("haveDocument") != 0 && ! this.container.theSVGImage.isPlaying()
				]]></function>
				<function id="doStepForward">
					this.container.theSVGImage.stepForward()
				</function>
				
				<function id="canPreviousGroup">
					return this.container.toolBar.canPreviousGroup()
				</function>
				<function id="doPreviousGroup">
					this.container.toolBar.previousGroup()
				</function>
				<function id="canNextGroup">
					return this.container.toolBar.canNextGroup()
				</function>
				<function id="doNextGroup">
					this.container.toolBar.nextGroup()
				</function>
				
				<function id="canView">
					true
				</function>
				<function id="doView">
					this.container.toolBar.selectToolGroup(0)
				</function>
				<function id="canAnimation">
					true
				</function>
				<function id="doAnimation">
					this.container.toolBar.selectToolGroup(1)
				</function>
				<function id="canHistory">
					true
				</function>
				<function id="doHistory">
					this.container.toolBar.selectToolGroup(2)
				</function>
				
				<function id="linkToURL" params="url">
					if (this.canForward())
						this.history.splice(this.historyIndex + 1, this.history.length - this.historyIndex + 1)
					this.historyIndex++
					this.history.push(url)
					this.displayCurrent()
					this.container.theSVGImage.hostDisplayLink("")
					
					
					var svgImage = this.container.theSVGImage
					var svg = svgImage.svg
					if (svg) {
						svgImage.moveTo(0,0)
						svgImage.sizeTo(svg.width, svg.height)
					}
					
					this.changed()
				</function>
				<function id="displayCurrent">
					this.container.theSVGImage.setURI("")
					var uri = this.history[this.historyIndex]
					this.container.theSVGImage.setURI(uri)	
		//			this.setWindowTitle("SVG Viewer - " + uri)
					this.doReset()
				</function>
				<function id="init">
					this.historyIndex = -1
					this.history = new Array
					this.changed()
				</function>
			</code>
		</model>

		<code>
			<function id="initialized" params="">
				this.theSVGImage = this.svgImage //this.viewGroup.svgImage
				this.model.init()
				this.bubble("doReset")			
			</function>
		</code>
		<!--background skin="whiteBackground" left="0" right="0" top="0" bottom="0"/-->
		<hookSVGMaker id="svgImage" left="0" right="0" top="0" bottom="0" visible="false" active="false" initialize_do="initialize_do">
			<code>
				<function id="initialize_do" params="">
					kbook.drawSVGMaker = this
				</function>
				<function id="hostDocumentLoaded">
					var model = this.container.model
					model.doNoTool()
					model.setVariable("toolToggle", "allOff")
					var canZoom = this.canZoomAndPan()
					model.setVariable("canZoomAndPan", this.canZoomAndPan())
					model.changed()
				</function>
				<function id="hostDisplayLink" params="href">
					//debugger
					//this.container.container.infoPanel.infoLabel.setValue(href)
				</function>
				<function id="hostActivateXLink" params="xLink, mime">
					//debugger
					var href = xLink.getHRef()
					if (href.charAt(0) == "#")		// local object
						return
					if (mime == "image/svg+xml")
						this.container.model.linkToURL(href)
					else
						this.container.model.launchURL(href)
				</function>
				<function id="loadedStream" params="stream">
				</function>
			</code>
		</hookSVGMaker>
		<!--
		<button2icon skin="keyW2" width="72" height="50" bottom="0" left="0" text="open" can="canOpen" do="doOpen" bw="4"/>
		<button2icon skin="keyW2" width="72" height="50" bottom="0" left="80" text="zoom" can="canZoom" do="doZoom" bw="4"/>
		<button2icon skin="keyW2" width="72" height="50" bottom="0" left="160" text="draw" can="canDraw" do="doDraw" bw="4"/>
		<button2icon skin="keyW2" width="72" height="50" bottom="0" left="240" text="noTool" can="canNoTool" do="doNoTool" bw="4"/>
		-->
	</group>

	<view href="sizeOverlay.xml" id="SIZE_OVERLAY_GROUP" top="0" bottom="0" left="0" right="0"/>

	<view href="selectStyleOverlay.xml" id="SELECT_STYLE_OVERLAY_GROUP" top="0" bottom="0" left="0" right="0"/>


	<kbookOverlay id="MARKUP_THUMBNAIL_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_BOUNDS"/>
		</model>
		<code>
			<function id="getThumbnaiImage"><![CDATA[
				return this.MARKUP_THUMBNAIL_IMAGE;
			]]></function>
			<function id="doNext"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doPrevious"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doOption"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSearch"><![CDATA[
				this.bubble("doBlink");
			]]></function>
			<function id="doSize"><![CDATA[
				this.bubble("doBlink");
			]]></function>
		</code>
		<focusBounds skin="background" left ="0" right="0" top="0" bottom="0" variable="VAR_BOUNDS" visible="true"/>
		<image id="MARKUP_THUMBNAIL_IMAGE" width="149" height="149" do="doMarkupThumbnailSelect"/>
		<exButton id="MARKUP_THUMBNAIL_CLOSE" skin="optClose" width="42" height="42" do="doMarkupThumbnailClose"/>
	</kbookOverlay> 

	<kbookOverlay id="OPTION_OVERLAY_PAGE_DIRECTJUMP" left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_UPDATEBTN" value="false"/>
		</model>
		<code>
			<function id="getKeyboardObj"><![CDATA[
				var keyboard = this.DIRECT_JUMP.KEYBOARD;
				return keyboard;
			]]></function>
			<function id="beforeOpenDirectJump"><![CDATA[
				//debugger;
				var model=this.getModel();
				model.setVariable("VAR_KEYBUF","");
				var keyboard = this.getKeyboardObj();
				var str = model.getVariable("VAR_KEYBUF");
				//var field = keyboard.KEYBUF;
				//field.setValue(str);
				keyboard.initBuffer(str,"strExisted",true);
			]]></function>
			<function id="canGoBtn"><![CDATA[
				var keyboard = this.getKeyboardObj();
				//trace(" DIRECTJUMP: canGoBtn="+keyboard.btnState+"\n");
				return keyboard.btnState;
			]]></function>
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					//trace("DIRECT_JUMP:variableChanged:"+id+"="+value+"\n");
					this.show(value);
					this.KEYBOARD_MODE.show(value)
					if(value) {
						var keyboard = this.getKeyboardObj();
						keyboard.KEYBUF.focus(value);
					}
				}
			</function>
		</code>
		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exGroup width="282" height="530" active="true" playing="V">
			<button2icon skin="optClose" right="0" top="0" width="42" height="42" do="doDirectJumpClose"/>
		</exGroup>
		<exGroup width="382" height="430" active="true" playing="H">
			<button2icon skin="optClose" right="0" top="0" width="42" height="42" do="doDirectJumpClose"/>
		</exGroup>
		<exGroup id="DIRECT_JUMP"  width="282" height="430" visible="true" active="true">
			<keyboard id="KEYBOARD" left="0" right="0" top="0" bottom="0">
				<panel skin="jumpDialog" left="0" right="0" top="0" bottom="0" active="true"/>
				<limitedField skin="direct-text" id="KEYBUF" left="24" right="24" top="24" height="48" variable="VAR_KEYBUF" visible="true" active="true"/>
				<button2icon text="fskin:/l/strings/STR_UI_BUTTON_GO" bottom="20" height="58" right="20" left="20" skin="keyG_HBIG" variableUpdate="VAR_UPDATEBTN" can="canGoBtn">
					<code>
						<function id="click">
							var keybuf = this.container.KEYBUF;
							var number = keybuf.getValue();
							this.getModel().execDirectJump(number);
						</function>
					</code>
				</button2icon>
				<keyLayout left="20" right="20" top="92" height="244"  type="NUMBERS" skin="keyW_HBIG" href="numberKeyboardLayout.xml">
					<code>
						<function id="registerKey" params="key, bounds">
							this.container.container.container.KEYBOARD_MODE.register(key, bounds)
						</function>
						<function id="unregisterKey" params="key">
							this.container.container.container.KEYBOARD_MODE.unregister(key)
						</function>
					</code>
				</keyLayout>
			</keyboard>
		</exGroup>
		<eInkPanelKeyboard id="KEYBOARD_MODE" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookOverlay>


	<kbookOverlay id="PASSWORD_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_UPDATEBTN" value="false"/>
			<variable id="VAR_MSG" value="" />
		</model>
		<code>
			<function id="getKeyboardObj"><![CDATA[
				var keyboard = this.PASSWORD.KEYBOARD;
				return keyboard;
			]]></function>
			<function id="beforeOpenPassword"><![CDATA[
				var model=this.getModel();
				model.setVariable("VAR_KEYBUF","");
				var keyboard = this.getKeyboardObj();
				var str = model.getVariable("VAR_KEYBUF");
				keyboard.initBuffer(str,"strExisted",true);
			]]></function>
			<function id="canGoBtn"><![CDATA[
				var keyboard = this.getKeyboardObj();
				return keyboard.btnState;
			]]></function>
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					this.show(value);
					this.KEYBOARD_MODE.show(value)
					if(value) {
						var keyboard = this.getKeyboardObj();
						keyboard.KEYBUF.focus(value);
					}
				}
			</function>
		</code>
		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<exGroup width="282" height="530" active="true" playing="V">
			<button2icon skin="optClose" right="0" top="0" width="42" height="42" do="doPasswordClose"/>
		</exGroup>
		<exGroup width="382" height="430" active="true" playing="H">
			<button2icon skin="optClose" right="0" top="0" width="42" height="42" do="doPasswordClose"/>
		</exGroup>
		<exGroup id="PASSWORD"  width="282" height="430" visible="true" active="true">
			<keyboard id="KEYBOARD" left="0" right="0" top="0" bottom="0">
				<panel skin="jumpDialog" left="0" right="0" top="0" bottom="0" active="true"/>
				<limitedField skin="direct-text" id="KEYBUF" left="24" right="24" top="24" height="48" variable="VAR_KEYBUF" visible="true" active="true"/>
				<label id="MSG" skin="label-Password" left="24" right="24" top="72" height="24" variable="VAR_MSG"/>
				<button2icon text="fskin:/l/strings/STR_UI_BUTTON_GO" bottom="20" height="58" left="20" width="160" skin="keyG_HBIG" variableUpdate="VAR_UPDATEBTN" can="canGoBtn">
					<code>
						<function id="click">
							var keybuf = this.container.KEYBUF;
							var number = keybuf.getValue();
							this.getModel().execPassword(number);
						</function>
					</code>
				</button2icon>
				<button2icon text="quit" bottom="20" height="58" width="78" right="20" skin="keyG_HBIG" variableUpdate="VAR_UPDATEBTN"> // can="canGoBtn">
					<code>
						<function id="click">
							this.getModel().quitPassword();
						</function>
					</code>
				</button2icon>
				<keyLayout left="20" right="20" top="92" height="244"  type="NUMBERS" skin="keyW_HBIG" href="numberKeyboardLayout.xml">
					<code>
						<function id="registerKey" params="key, bounds">
							this.container.container.container.KEYBOARD_MODE.register(key, bounds)
						</function>
						<function id="unregisterKey" params="key">
							this.container.container.container.KEYBOARD_MODE.unregister(key)
						</function>
					</code>
				</keyLayout>
			</keyboard>
		</exGroup>
		<eInkPanelKeyboard id="KEYBOARD_MODE" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookOverlay>

	<kbookOverlay id="LINEINPUT_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://commonLineInputOverlayModel">
		<model>
			<variable id="VAR_CAPTION" value="" />
			<variable id="VAR_KEYBUF" value="" />
			<variable id="VAR_UPDATEBTN" value="false"/>
		</model>
		<code>
			<function id="initializeLineInput" params="caption, text, mask, kbdKind, kbdId, nonBG"><![CDATA[
				var model = this.getModel();
				var words = model.getVariable("VAR_KEYBUF");
				var keyboard = this.KEYBOARD;
				this.container.KEYBOARD_POPUP_GROUP.initPopup(keyboard);
				var settings = this.getVariable("keyboard")
				keyboard.KEYLAYOUT.changeKeyboardType(settings);
				keyboard.KEYLAYOUT.setType(kbdId, kbdKind);
				model.setVariable("VAR_CAPTION", caption);
				keyboard.initBuffer(text, "strExisted", false, mask);
				keyboard.KEYBUF.doScrollRightMax();
				keyboard.CANDIDATE.show(mask?false:true);
				this.BACKGROUND.show((nonBG) ? false : true);
			]]></function>
			<function id="canEnterBtn">
				var keyboard = this.KEYBOARD;
				return keyboard.btnState;
			</function>
			<function id="canRight">
				return this.KEYBOARD.KEYBUF.canRight()
			</function>
			<function id="canLeft">
				return this.KEYBOARD.KEYBUF.canLeft()
			</function>
			<function id="doSelChanged2" params="offset, length">
				var model = this.getModel();
				var keyboard = this.KEYBOARD;
				var keybuf = keyboard.KEYBUF;
				var words = keybuf.getValue();
				keyboard.doSelChanged(offset,length,words,false);
				model.setVariable("VAR_UPDATEBTN", false)
				model.setVariable("VAR_UPDATEBTN", true)
			</function>
			<function id="registerWords"><![CDATA[
				if(this.KEYBOARD.CANDIDATE.isShown()){
					var keyboard = this.KEYBOARD;
					var keybuf = keyboard.KEYBUF;
					var words = keybuf.getValue();
					if (words && words.length > 0)
						keyboard.registerAllWords(words);
				}
			]]></function>
			<function id="doMenu">
				var kbdObj=this.KEYBOARD;
				if(kbdObj.KEYLAYOUT.popup.isShown()){
					kbdObj.KEYLAYOUT.popup.container.deletePopup();
				}else{
					this.registerWords();
					this.getModel().doMenu()
				}
			</function>
			<function id="doRoot">
				this.registerWords();
				this.getModel().doRoot()
			</function>
			<function id="doOption">
				this.registerWords();
				this.getModel().doOption()
			</function>
			<function id="doNext">
				this.bubble("doBlink");
			</function>
			<function id="doPrevious">
				this.bubble("doBlink");
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
			<function id="variableChanged" params="id, value">
				arguments.callee.grammar.call(this, id, value);
				if (id == "SHOW") {
					this.show(value);
					this.KEYBOARD_MODE.show(value)
					if (value)
						this.KEYBOARD.KEYBUF.focus(value);
					else
						this.container.KEYBOARD_POPUP_GROUP.deletePopup()
				}
			</function>
		</code>

		<focusBounds id="BACKGROUND" skin="background" left="0" right="0" top="0" bottom="0"/>
		<keyboard id="KEYBOARD" left="0" right="0" height="419" bottom="0">
			<panel skin="kbarea" left="0" right="0" top="0" height="163" active="true"/>
			<kbookLabel skin="LineInputCaption" left="14" right="64" top="24" height="36" variable="VAR_CAPTION"/>
			<scrollField skin="LineInput" id="KEYBUF" left="14" right="246" top="69" height="40" doSelectionChanged="doSelChanged2" variable="VAR_KEYBUF" visible="true" active="true"/>
			<candidateButton id="CANDIDATE" skin="candidate" top="115" height="32" left="8" right="8"/>
			<button2icon text="fskin:/l/strings/STR_UI_BUTTON_OK" top="64" height="50" right="10" width="116" skin="keyW2" variableUpdate="VAR_UPDATEBTN" bw="4" can="canEnterBtn" beforeClick="onMouseDown" afterClick="onMouseUp">
				<code>
					<function id="click">
						var target = this.container.container;
						target.registerWords();
						var keybuf = this.container.KEYBUF;
						var keyboard = this.container.container.KEYBOARD; //getKeyboardObj();
						var words = keyboard.getFieldString();
						this.getModel().doEnterButton(this, words);
					</function>
				</code>
			</button2icon>
			<button2icon skin="keyClose" top="14" right="14" width="42" height="42">
				<code>
					<function id="click">
						var target = this.container.container;
						target.registerWords();
						this.getModel().doCancelButton(this, false);
					</function>
				</code>
			</button2icon>
			<button2icon id="BTN_LEFT" skin="keyLeft" top="68" right="196" width="42" height="42" variableUpdate="VAR_UPDATEBTN" can="canLeft">
				<code>
					<function id="click">
						this.container.KEYBUF.doLeft();
					</function>
				</code>
			</button2icon>
			<button2icon id="BTN_RIGHT" skin="keyRight" top="68" right="146" width="42" height="42" variableUpdate="VAR_UPDATEBTN" can="canRight">
				<code>
					<function id="click">
						this.container.KEYBUF.doRight();
					</function>
				</code>
			</button2icon>
			<keyLayout id="KEYLAYOUT" left="0" right="0" height="256" bottom="0" ignore="ignore"  skin="keyW_H">
				<code>
					<function id="registerKey" params="key, bounds">
						this.container.container.KEYBOARD_MODE.register(key, bounds)
					</function>
					<function id="unregisterKey" params="key">
						this.container.container.KEYBOARD_MODE.unregister(key)
					</function>
				</code>
			</keyLayout>
		</keyboard>
		<eInkPanelKeyboard id="KEYBOARD_MODE" left="0" right="0" top="0" bottom="0" visible="false"/>
	</kbookOverlay>


	<group id="KEYBOARD_POPUP_GROUP" left="0" right="0" top="0" bottom="30">
		<model>
			<variable id="keyboard" value=""/>
		</model>
		<code>
			<function id="initPopup" params="obj">
				this.keyboard = obj;
				this.keyboard.KEYLAYOUT.setPopupObject(this.popup);
				this.deletePopup()
			</function>
			<function id="deletePopup">
				this.popup.show(false);
				this.popup.enable(false);
			</function>
			<function id="clickPopup" params="popup">
				var text = popup.getText();
				var keyboard = this.keyboard
				var keylayout= keyboard.KEYLAYOUT
				keylayout.clickPopup()
				keyboard.addLetter(null,text,null)
				this.deletePopup()
			</function>
		</code>
		<group id="popup" left="0" right="0" top="0" bottom="0" active="true" visible="false">

			<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>
			<!--panel skin="kbarea" left="0" right="0" top="0" height="113" active="true" visible="true"-->
			<!--/panel-->
			<button id="background" text="" left="0" top="0" width="30" height="72" skin="balloonBackground"/>
			<button id="arrow" text="" left="0" top="0" width="24" height="12" skin="balloonArrow"/>
			<button id="addkey7" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H" do="clickPopup"/>
			<button id="addkey6" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H" do="clickPopup"/>
			<button id="addkey5" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H" do="clickPopup"/>
			<button id="addkey4" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H" do="clickPopup"/>
			<button id="addkey3" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H" do="clickPopup"/>
			<button id="addkey2" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H" do="clickPopup"/>
			<button id="addkey1" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H" do="clickPopup"/>
			<button id="addkey0" text="a" left= "0" top="0" width="58" height="58" skin="keyW_H" do="clickPopup"/>
			<panel id="vertLine" skin="balloonVertLine" left="0" top="0" width="2" height="72" active="true" visible="true"/>

			<button id="popupClose" skin="keyClose" top="0" right="0" width="42" height="42">
				<code>
					<function id="click">
						var obj = this.container.container;
						obj.deletePopup();
					</function>
				</code>
			</button>
		</group>
	</group>

	<kbookOverlay id="OPTION_OVERLAY_PAGE" left="0" right="0" top="0" bottom="30" visible="false">
		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		
		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="18" textresource="STR_UI_MENU_CLOSETHISBOOK"		do="doMenuClose" playing="!dictionary"/>
			<optItemButton u="48" textresource="STR_UI_MENU_ADD_BOOKMARK"		do="doBookMarkRight" playing="!facing,canMark,!isInvalidPage,!dictionary" onoff="VAR_Bookmark,fskin:/l/strings/STR_UI_MENU_REMOVE_BOOKMARK,fskin:/l/strings/STR_UI_MENU_ADD_BOOKMARK"/>
			<optItemButton u="48" text="@Update Markup"		do="doSyncMarkup" playing="syncMarkup,!isInvalidPage,!dictionary" />
			<optItemButton u="48" id="mark" textresource="STR_UI_MENU_BOOKMARK" playing="facing,!dictionary,!isInvalidPage,sub"/>
			<optItemButton u="49" id="goto" textresource="STR_UI_MENU_GO_TO" playing="!dictionary,!isInvalidPage,sub"/>
			<optItemButton u="50" id="notes" textresource="STR_UI_MENU_NOTES" playing="!dictionary,!isInvalidPage,sub"/> <!-- STR_UI_MENU_NOTES -->
			<optItemButton u="14" textresource="STR_UI_MENU_SEARCHAKEYWORD"		do="doSearch" playing="item,!dictionary,!isInvalidPage"/>
			<optItemButton u="53" textresource="STR_UI_MENU_WORD_LOGS_PERIODICAL"		do="doGoToDicHistoryForBook" playing="dicHist,!isInvalidPage,!dictionary,periodical"/>
			<optItemButton u="53" textresource="STR_UI_MENU_DICTIONARY_LOOK_UP_HISTORY"	do="doGoToDicHistoryForBook" playing="dicHist,!isInvalidPage,!dictionary,!periodical"/>
			<optItemButton u="33" textresource="STR_UI_MENU_CHANG_TONE_CURVE"	do="doToneCurve" playing="!dictionary,!isInvalidPage"/> <!-- adjustFont -->
			<optItemButton u="30" id="flag" do="doFlagToggle" playing="!dictionary"/> <!-- PRS+ -->
			<optItemButton u="55" textresource="STR_UI_MENU_ADD_TO_COLLECTION"	do="doAddToCollection" playing="!dictionary"/> <!-- PRS+ -->
			<optItemButton u= "5" textresource="STR_UI_MENU_DELETEBOOK"			do="doDelBook" playing="!dictionary" onoff="VAR_IsPeriodical,fskin:/l/strings/STR_UI_MENU_DELETEISSUE,fskin:/l/strings/STR_UI_MENU_DELETEBOOK"/> <!-- canToolbar -->
			<optItemButton u= "4" textresource="STR_UI_MENU_BOOKINFO"			do="doViewBookInfo" playing="!dictionary"/> <!-- canToolbar -->

			<optItemButton u="57" textresource="STR_UI_MENU_PREVIOUS_VIEW"		do="doHistoryBack" playing="history,dic-detail"/>
			<optItemButton u="52" textresource="STR_UI_MENU_CHANGE_DICTIONARY"	do="doChangeDictionary" playing="dictionary"/>
			<optItemButton u="51" textresource="STR_UI_MENU_VIEW_SEARCH_HISTORY"	do="doGoToDicHistoryForDic" playing="dictionary"/>

			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio,!isInvalidPage"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume,!isInvalidPage"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation" playing="!isInvalidPage"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
			<optSubMenu>
				<optItemButton parentItem="mark" u="62" textresource="STR_UI_MENU_ADD_TO_RIGHT"		do="doBookMarkRight" playing="facing,canMark,!dictionary,!isInvalidPage" onoff="VAR_Bookmark,fskin:/l/strings/STR_UI_MENU_REMOVE_FROM_RIGHT,fskin:/l/strings/STR_UI_MENU_ADD_TO_RIGHT"/>
				<optItemButton parentItem="mark" u="63" textresource="STR_UI_MENU_ADD_TO_LEFT"		do="doBookMarkLeft" playing="facing,canMarkLeft,!dictionary,!isInvalidPage" onoff="VAR_BookmarkLeft,fskin:/l/strings/STR_UI_MENU_REMOVE_FROM_LEFT,fskin:/l/strings/STR_UI_MENU_ADD_TO_LEFT"/>
				<optItemButton parentItem="goto" u="57" textresource="STR_UI_MENU_PREVIOUS_VIEW"	do="doHistoryBack" playing="history,!dictionary,!isInvalidPage"/>
				<optItemButton parentItem="goto" u="19" textresource="STR_UI_MENU_HISTORYJUMP"		do="doHistoricalMode" playing="!dictionary,!isInvalidPage"/>
				<optItemButton parentItem="goto" u="58" textresource="STR_UI_MENU_SELECT_PAGE"		do="doGoToPage" playing="!dictionary,!isInvalidPage"/>
				<optItemButton parentItem="goto" u= "3" textresource="STR_UI_MENU_TABLEOFCONTENTS"	do="doGoToToc" playing="hasTOC,!dictionary,!isInvalidPage"/>
				<optItemButton parentItem="notes" u="32" textresource="STR_UI_MENU_LIST"			do="doMyNote" playing="!isInvalidPage"/>
				<optItemButton parentItem="notes" u= "1" textresource="STR_UI_MENU_CREATE_EDIT"		do="doEditNotes" playing="toolbar,!dictionary,!isInvalidPage"/>
				<optItemButton parentItem="notes" u= "2" textresource="STR_UI_MENU_SHOWNOTES"		do="doShowHideNotes" playing="toolbar,note,!dictionary,!isInvalidPage" onoff="VAR_ShowNotes,fskin:/l/strings/STR_UI_MENU_HIDE,fskin:/l/strings/STR_UI_MENU_SHOW"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_PAGE_JUMPBAR"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_JUMP_SLIDER" value="0" />
			<variable id="VAR_UPDATEBTN" value="false"/>
		</model>
		<group id="JUMPBAR_AREA" left="0" right="0" bottom="0" height="128" visible="true" active="true">
			<code>
				<function id="canLine">
					return false
				</function>
				<function id="canLineAndHold">
					return false
				</function>
			</code>
			<panel skin="kbarea" left="0" right="0" top="0" bottom="0" active="true"/>
			<button2icon skin="fontClose" 	right="24" top="12" width="50" height="50" bw="4" do="doJumpBarClose"/>
			<button2icon id="DirectJumpButtonNormal" skin="keyDirect"	left= "24" top="12" width="222" height="50" text="fskin:/l/strings/STR_UI_BUTTON_ENTERPAGE"  do="doDirectJump" bw="4" visible="false" active="false"/>
			<button2icon id="DirectJumpButtonLarge" skin="keyDirect"	left= "24" top="12" width="340" height="50" text="fskin:/l/strings/STR_UI_BUTTON_ENTERPAGE"  do="doDirectJump" bw="4" visible="false" active="false"/>
			<slider id="jumpSlider"		left= "24" top="72" right="24" variable="VAR_JUMP_SLIDER" skin="jumpBar" axis="x" min="0" max="1000" do="jumpBarDo" track="jumpBarTrack"/>
		</group>
	</kbookOverlay>

	<!-- @note already define model at kbookOverlayModel(x-id://pageOptionHistoricalOverlayModel) -->
	<kbookOverlay id="OPTION_OVERLAY_PAGE_HISTORICAL"  left="0" right="0" bottom="30" top="0" visible="false">
		<model>
			<variable id="VAR_UPDATEBTN" value="false"/>
		</model>

		<code>
			<function id="doNext">
				this.getModel().doNext();
			</function>

			<function id="doPrevious">
				this.getModel().doPrevious();
			</function>

			<function id="canLine">
				return true
			</function>

			<function id="doLine" params="dir">
				var settings = this.getVariable("gestureDirectionFlag")
				dir = settings ? (dir == Gesture.leftDirection ? Gesture.rightDirection : Gesture.leftDirection) : dir 
				if (dir == Gesture.leftDirection)
					this.doPrevious()
				else if (dir == Gesture.rightDirection)
					this.doNext()
			</function>

			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
		</code>

		<button2icon skin="historyBackward" width="92" height="42" left="8" bottom="10" visible="true" active="true" do="doHistoryBack" beforeClick="onMouseDown" afterClick="onMouseUp" variableUpdate="VAR_UPDATEBTN" can="canHistoryBack">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
		<button2icon skin="historyForward" width="92" height="42" right="8" bottom="10" visible="true" active="true" do="doHistoryForw" beforeClick="onMouseDown" afterClick="onMouseUp" variableUpdate="VAR_UPDATEBTN" can="canHistoryForw">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
		<button2icon skin="historyClose" width="42" height="42" right="24" top="8" bw="4" visible="true" active="true" do="doHistoricalClose">
			<code>
				<function id="canLine">
					return false
				</function>
			</code>
		</button2icon>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_HOME" left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="doRoot">
				var state = this.getVariable("STATE");
				if ( state == "MENU_HOME" ) {
					this.getModel().doCloseOptMenu();
				}
				this.container.bubble("doRoot")
			</function>
		</code>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"		do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING" do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"	do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>

	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_HOME_NOSEARCH" left="0" right="0" top="0" bottom="30" visible="false">
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>


		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"		do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING" do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"	do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_NOTEPAD_FREEHAND_LIST" left="0" right="0" top="0" bottom="30" visible="false">
		// multi delete
		<code>
			<function id="showDeleteContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteFreeHands", false, view);
			</function>
			<function id="showDeleteProtectionContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteFreeHands", true, view);
			</function>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, false);
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="45" textresource="STR_UI_MENU_NEW_DRAWING"			do="doAddNotepad" playing="!canMultiSelect"/>
			<optItemButton u= "5" textresource="STR_UI_MENU_DELETE_HANDWRITINGS"	do="showDeleteContents" playing="canDeleteAndOneitem"/>
			<optItemButton u="30" textresource="STR_UI_MENU_SELECT_ALL"				do="checkAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="31" textresource="STR_UI_MENU_UNSELECT_ALL"			do="uncheckAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="28" textresource="STR_UI_MENU_PROTECT_ALL"			do="checkAll" playing="canMultiProtectAndItem"/>
			<optItemButton u="29" textresource="STR_UI_MENU_UNPROTECT_ALL"			do="uncheckAll" playing="canMultiProtectAndItem"/>
			<optItemButton u="20" textresource="STR_UI_MENU_PROTECT_HANDWRITINGS"	do="showDeleteProtectionContents" playing="canDeleteAndOneitem"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"				do="doGoToNowPlaying" playing="audio,!canMultiSelect"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"		do="doResumeSong" playing="resume,!canMultiSelect"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"			do="doOrientation" playing="!canMultiSelect"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_NOTEPAD_TEXT_LIST" left="0" right="0" top="0" bottom="30" visible="false">
		// multi delete
		<code>
			<function id="showDeleteContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteNotepadsText", false, view);
			</function>
			<function id="showDeleteProtectionContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteNotepadsText", true, view);
			</function>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, false);
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="44" textresource="STR_UI_MENU_NEW_MEMO"			do="doAddNotepad" playing="!canMultiSelect"/>
			<optItemButton u= "5" textresource="STR_UI_MENU_DELETE_TEXTMEMOS"	do="showDeleteContents" playing="canDeleteAndOneitem"/>
			<optItemButton u="30" textresource="STR_UI_MENU_SELECT_ALL"			do="checkAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="31" textresource="STR_UI_MENU_UNSELECT_ALL"		do="uncheckAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="20" textresource="STR_UI_MENU_PROTECT_TEXTMEMOS"	do="showDeleteProtectionContents" playing="canDeleteAndOneitem"/>
			<optItemButton u="28" textresource="STR_UI_MENU_PROTECT_ALL"		do="checkAll" playing="canMultiProtectAndItem"/>
			<optItemButton u="29" textresource="STR_UI_MENU_UNPROTECT_ALL"		do="uncheckAll" playing="canMultiProtectAndItem"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio,!canMultiSelect"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume,!canMultiSelect"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation" playing="!canMultiSelect"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_AUDIO"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_Repeat" value="off"/>
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="18" textresource="STR_UI_MENU_CLOSETHISMUSIC" do="doMenuClose"/>
			<optItemButton u="61" textresource="STR_UI_AUDIO_REPEAT" id="repeatOption" onSubItem="VAR_Repeat,+8" playing="sub"/>
			<optItemButton u= "9" textresource="STR_UI_MENU_SHUFFLEON"		do="doShuffleOnOff" onoff="VAR_Shuffle,fskin:/l/strings/STR_UI_MENU_SHUFFLEOFF,fskin:/l/strings/STR_UI_MENU_SHUFFLEON"/>
			<optItemButton u="10" textresource="STR_UI_MENU_CONTINUEREADING" do="doGoToReading" playing="reading"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"	do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
			<optSubMenu>
				<optItemRadio parentItem="repeatOption" textresource="STR_UI_MENU_OFF"      on="off"      variable="VAR_Repeat" do="doRepeatOff"/>
				<optItemRadio parentItem="repeatOption" textresource="STR_UI_MENU_SONG_1"   on="song"     variable="VAR_Repeat" do="doRepeatASong"/>
				<optItemRadio parentItem="repeatOption" textresource="STR_UI_MENU_SONG_ALL" on="allSongs" variable="VAR_Repeat" do="doRepeatAllSongs"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_PICTURE"  left="0" right="0" top="0" bottom="30" visible="false">
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="18" textresource="STR_UI_MENU_CLOSETHISPICTURE"	do="doMenuClose"/>
			<optItemButton u= "8" textresource="STR_UI_MENU_SLIDESHOWOFF"		do="doSlideshowOnOff" 
				onoff="VAR_Slideshow,fskin:/l/strings/STR_UI_MENU_SLIDESHOWOFF,fskin:/l/strings/STR_UI_MENU_SLIDESHOWON"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_BOOKLIST"  left="0" right="0" top="0" bottom="30" visible="false">
		// multi delete
		<code>
			<function id="doCmtPageForw"><![CDATA[
				var content = this.getModel().container.findContent("OPTION_OVERLAY_BOOKLIST");
				content.getModel().closeCurrentOverlay();

				var content = this.getModel().container.findContent("OPTION_OVERLAY_BOOKLIST_2");
				content.setURI("x-id://commonOptionOverlayModel");
				this.getModel().doOption();
			]]></function>

			<function id="showDeleteContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteBooks", false, view);
			</function>
			<function id="showDeleteProtectionContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteBooks", true, view);
			</function>
		</code>

		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="34" textresource="STR_UI_MENU_SORT_SELECTED" id="sortOption" onSubItem="VAR_RADIO_SORT,+8" playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="36" textresource="STR_UI_MENU_VIEW_SELECTED" id="viewStyle" onSubItem="VAR_RADIO_SHOW,+8" playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="14" textresource="STR_UI_MENU_SEARCHTITLE"		do="doSearch" playing="item"/>
			<optItemButton u="55" textresource="STR_UI_MENU_ADD_TO_COLLECTION"	do="doBeginAddContentsToCollectionOnList" playing="item,collectionEditable"/>
			<optItemButton u= "5" textresource="STR_UI_MENU_DELETE_BOOKS"		do="showDeleteContents" playing="canDeleteAndItem"/>
			<optItemButton u="20" textresource="STR_UI_MENU_PROTECT_BOOKS"		do="showDeleteProtectionContents" playing="canDeleteAndItem"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio,!canMultiSelect"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume,!canMultiSelect"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation" playing="!canMultiSelect"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
			<optSubMenu>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYORDER" 		on="order"		variable="VAR_RADIO_SORT" do="doSortOrder" playing="item,!collection,purchased"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYDATE"			on="date"		variable="VAR_RADIO_SORT" do="doSortDate" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYTITLE"		on="title"		variable="VAR_RADIO_SORT" do="doSortTitle" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYAUTHOR"		on="author"		variable="VAR_RADIO_SORT" do="doSortAuthor" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYFILENAME"		on="fileName"	variable="VAR_RADIO_SORT" do="doSortFilePath" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYLATESTREAD"	on="latest"		variable="VAR_RADIO_SORT" do="doSortLatest" playing="item"/>

				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_LIST"			on="details"	variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_TITLEONLYLIST"	on="titleonly"	variable="VAR_RADIO_SHOW" do="doShowTitleOnly" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_THUMBNAIL"		on="thumbnail"	variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_UNREAD_BOOKS"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="34" id="sortOption" onSubItem="VAR_RADIO_SORT,+8" textresource="STR_UI_MENU_SORT_SELECTED"	playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="36" id="viewStyle" onSubItem="VAR_RADIO_SHOW,+8" textresource="STR_UI_MENU_VIEW_SELECTED" playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="14" textresource="STR_UI_MENU_SEARCHTITLE"		do="doSearch" playing="item"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
			<optSubMenu>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYDATE"		on="date"		variable="VAR_RADIO_SORT" do="doSortDate" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYTITLE"	on="title"		variable="VAR_RADIO_SORT" do="doSortTitle" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYAUTHOR"	on="author"		variable="VAR_RADIO_SORT" do="doSortAuthor" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYFILENAME" on="fileName"	variable="VAR_RADIO_SORT" do="doSortFilePath" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_LIST"		on="details"	variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_TITLEONLYLIST" on="titleonly" variable="VAR_RADIO_SHOW" do="doShowTitleOnly" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_THUMBNAIL"	on="thumbnail"	variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_DELETE_BOOKLIST"  left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, false);
			</function>
		</code>

		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="30" textresource="STR_UI_MENU_SELECT_ALL"		do="checkAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="31" textresource="STR_UI_MENU_UNSELECT_ALL"	do="uncheckAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="28" textresource="STR_UI_MENU_PROTECT_ALL"	do="checkAll" playing="canMultiProtectAndItem"/>
			<optItemButton u="29" textresource="STR_UI_MENU_UNPROTECT_ALL"	do="uncheckAll" playing="canMultiProtectAndItem"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>

	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_PERIODICALS"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="34" id="sortOption" onSubItem="VAR_RADIO_SORT,+8" textresource="STR_UI_MENU_SORT_SELECTED"	playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="36" id="viewStyle" onSubItem="VAR_RADIO_SHOW,+8" textresource="STR_UI_MENU_VIEW_SELECTED" playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="14" textresource="STR_UI_MENU_SEARCHTITLE"	do="doSearch" playing="item"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"		do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING" do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"	do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>

			<optSubMenu>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYISSUEDATE" 	on="date"		variable="VAR_RADIO_SORT" do="doSortIssueDate" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYTITLE"		on="title"		variable="VAR_RADIO_SORT" do="doSortTitle" playing="item"/>
				<optItemRadio parentItem="viewStyle"  textresource="STR_UI_MENU_LIST"			on="details"	variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
				<optItemRadio parentItem="viewStyle"  textresource="STR_UI_MENU_TITLEONLYLIST"	on="titleonly"	variable="VAR_RADIO_SHOW" do="doShowTitleOnly" playing="item"/>
				<optItemRadio parentItem="viewStyle"  textresource="STR_UI_MENU_THUMBNAIL"	 	on="thumbnail"	variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_BACKISSUES"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>

		// multi delete
		<code>
			<function id="showDeleteContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteBackIssues", false, view)
			</function>
			<function id="showDeleteProtectionContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteBackIssues", true, view)
			</function>
			<function id="preDoOpenDeletePeriodicallySetting">
				this.getModel().doCloseOptMenu();
				this.bubble("doOpenDeletePeriodicallySetting")
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="34" id="sortOption" onSubItem="VAR_RADIO_SORT,+8" textresource="STR_UI_MENU_SORT_SELECTED"	playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="36" id="viewStyle"  onSubItem="VAR_RADIO_SHOW,+8" textresource="STR_UI_MENU_VIEW_SELECTED"	playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="14" textresource="STR_UI_MENU_SEARCHTITLE"		do="doSearch" playing="item"/>
			<optItemButton u="55" textresource="STR_UI_MENU_ADD_TO_COLLECTION"	do="doBeginAddContentsToCollectionOnList" playing="item,collectionEditable"/>
			<optItemButton u= "5" textresource="STR_UI_MENU_DELETE_ISSUES"		do="showDeleteContents" playing="canDeleteAndItem"/>
			<optItemButton u="20" textresource="STR_UI_MENU_PROTECT_ISSUES"	    do="showDeleteProtectionContents" playing="canDeleteAndItem"/>
			<optItemButton u="21" textresource="STR_UI_MENU_MANAGE_SUBSCRIPTION" do="preDoOpenDeletePeriodicallySetting" playing="canDeletePeriodically"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio,!canMultiSelect"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume,!canMultiSelect"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation" playing="!canMultiSelect"/>
			<optItemButton skin="dicMenuNext" playing="next"/>

			<optSubMenu>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYISSUEDATE"	on="date"		variable="VAR_RADIO_SORT" do="doSortIssueDate" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYLATESTREAD"	on="latest"		variable="VAR_RADIO_SORT" do="doSortLatest" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_LIST"			on="details"	variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_TITLEONLYLIST"	on="titleonly"	variable="VAR_RADIO_SHOW" do="doShowTitleOnly" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_THUMBNAIL"		on="thumbnail"	variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_UNREAD_COLLECTION"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="34" id="sortOption" onSubItem="VAR_RADIO_SORT,+8" textresource="STR_UI_MENU_SORT_SELECTED"	playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="36" id="viewStyle" onSubItem="VAR_RADIO_SHOW,+8"  textresource="STR_UI_MENU_VIEW_SELECTED"	playing="item,sub"/> <!-- noReduce -->

			<optItemButton u="14" textresource="STR_UI_MENU_SEARCHTITLE"	do="doSearch" playing="item"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"		do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING" do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"	do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>

			<optSubMenu>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYISSUEDATE" 	on="date"		variable="VAR_RADIO_SORT" do="doSortIssueDate" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYTITLE"		on="title"		variable="VAR_RADIO_SORT" do="doSortTitle" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_LIST"			on="details"	variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_TITLEONLYLIST"	on="titleonly"	variable="VAR_RADIO_SHOW" do="doShowTitleOnly" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_THUMBNAIL"	 	on="thumbnail"	variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_DELETE_BACKISSUES"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>

		// multi delete
		<code>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, false);
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="30" textresource="STR_UI_MENU_SELECT_ALL"		do="checkAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="31" textresource="STR_UI_MENU_UNSELECT_ALL"	do="uncheckAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="28" textresource="STR_UI_MENU_PROTECT_ALL"	do="checkAll" playing="canMultiProtectAndItem"/>
			<optItemButton u="29" textresource="STR_UI_MENU_UNPROTECT_ALL"	do="uncheckAll" playing="canMultiProtectAndItem"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_COLLECTION_CONTENTS"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="34" id="sortOption" onSubItem="VAR_RADIO_SORT,+8" textresource="STR_UI_MENU_SORT_SELECTED"	playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="36" id="viewStyle"  onSubItem="VAR_RADIO_SHOW,+8" textresource="STR_UI_MENU_VIEW_SELECTED" playing="item,sub"/> <!-- noReduce -->
			<optItemButton u="14" textresource="STR_UI_MENU_SEARCHTITLE"		do="doSearch" playing="item"/>
			<optItemButton u="56" id="add" textresource="STR_UI_MENU_ADD" playing="canEdit,itemReadables,sub"/>
			<optItemButton u="43" textresource="STR_UI_MENU_REMOVECONTENT"		do="doBeginRemoveContentsFromCollection" playing="item,canEdit"/>
			<optItemButton u="39" textresource="STR_UI_MENU_RENAMECOLLECTION"	do="doBeginRenameCollection" playing="canEdit"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>

			<optSubMenu>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYORDER" 		on="order"		variable="VAR_RADIO_SORT" do="doSortOrder" playing="item,!collection,purchased"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYDATE"			on="date"		variable="VAR_RADIO_SORT" do="doSortDate" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYTITLE"		on="title"		variable="VAR_RADIO_SORT" do="doSortTitle" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYAUTHOR"		on="author"		variable="VAR_RADIO_SORT" do="doSortAuthor" playing="item"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYFILENAME" 	on="fileName"	variable="VAR_RADIO_SORT" do="doSortFilePath" playing="item"/>

				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_LIST"			on="details"	variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_TITLEONLYLIST"	on="titleonly"	variable="VAR_RADIO_SHOW" do="doShowTitleOnly" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_THUMBNAIL"		on="thumbnail"	variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
				<optItemButton parentItem="add" u="41" textresource="STR_UI_MENU_ADDBOOKS"			do="doBeginAddBookContentsToCollection" playing="canEdit,itemBooks"/>
				<optItemButton parentItem="add" u="42" textresource="STR_UI_MENU_ADDPERIODICALS"	do="doBeginAddPeriodicalContentsToCollection" playing="canEdit,itemPeriodicals"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_COLLECTION"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="date" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="38" textresource="STR_UI_MENU_NEW_COLLECTION"		do="doBeginCreateCollection"/>
			<optItemButton u="40" textresource="STR_UI_MENU_DELETE_COLLECTIONS"	do="doBeginDeleteCollections" playing="collectionDeletable"/>
			<optItemButton u="14" textresource="STR_UI_MENU_SEARCHAKEYWORD"		do="doSearch" playing="item"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>

	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_PICTURELIST"  left="0" right="0" top="0" bottom="30" visible="false">
		// multi delete
		<code>
			<function id="showDeleteContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeletePictures", false, view)
			</function>
			<function id="showDeleteProtectionContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeletePictures", true, view);
			</function>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, false);
			</function>

			<!-- [FY10] Ticket#661: setup standby picture -->
			<function id="doShowEditStandbyPictures">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showEditStandbyPictures", view)
			</function>
		</code>

		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="details" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="34" id="sortOption" onSubItem="VAR_RADIO_SORT,+8" textresource="STR_UI_MENU_SORT_SELECTED" playing="item,!canMultiSelect,sub"/> <!-- noReduce -->
			<optItemButton u="36" id="viewStyle"  onSubItem="VAR_RADIO_SHOW,+8" textresource="STR_UI_MENU_VIEW_SELECTED" playing="item,!canMultiSelect,sub"/> <!-- noReduce -->
			<optItemButton u="47" textresource="STR_UI_MENU_EDIT_STANDBY_SCREEN" do="doShowEditStandbyPictures" playing="canDeleteAndItem"/>
			<optItemButton u= "5" textresource="STR_UI_MENU_DELETE_PICTURES"	do="showDeleteContents" playing="canDeleteAndItem"/>
			<optItemButton u="30" textresource="STR_UI_MENU_SELECT_ALL"			do="checkAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="31" textresource="STR_UI_MENU_UNSELECT_ALL"		do="uncheckAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="20" textresource="STR_UI_MENU_PROTECT_PICTURES"	do="showDeleteProtectionContents" playing="canDeleteAndItem"/>
			<optItemButton u="28" textresource="STR_UI_MENU_PROTECT_ALL"		do="checkAll" playing="canMultiProtectAndItem"/>
			<optItemButton u="29" textresource="STR_UI_MENU_UNPROTECT_ALL"		do="uncheckAll" playing="canMultiProtectAndItem"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio,!canMultiSelect"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume,!canMultiSelect"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation" playing="!canMultiSelect"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
			<optSubMenu>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYDATE"		on="date" variable="VAR_RADIO_SORT" do="doSortDate" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYTITLE"	on="title"  variable="VAR_RADIO_SORT" do="doSortTitle" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_LIST"		on="details"    variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_THUMBNAIL"	on="thumbnail" variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item,!canMultiSelect"/>
			</optSubMenu>
		</optMenu>

	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_ALBUM"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
			<variable id="VAR_RADIO_SHOW" value="thumbnail" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="34" id="sortOption" onSubItem="VAR_RADIO_SORT,+8" textresource="STR_UI_MENU_SORT_SELECTED"	playing="item,!canMultiSelect,sub"/> <!-- noReduce -->
			<optItemButton u="36" id="viewStyle"  onSubItem="VAR_RADIO_SHOW,+8" textresource="STR_UI_MENU_VIEW_SELECTED" playing="item,!canMultiSelect,sub"/> <!-- noReduce -->
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"		do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING" do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"	do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>

			<optSubMenu>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYTITLE"	on="album"		variable="VAR_RADIO_SORT" do="doSortAlbum" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYARTIST"	on="artist"		variable="VAR_RADIO_SORT" do="doSortArtist" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_LIST"		on="details"	variable="VAR_RADIO_SHOW" do="doShowDetails" playing="item"/>
				<optItemRadio parentItem="viewStyle" textresource="STR_UI_MENU_THUMBNAIL"	on="thumbnail"	variable="VAR_RADIO_SHOW" do="doShowThumbnail" playing="item"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_AUDIOLIST"  left="0" right="0" top="0" bottom="30" visible="false">
		<model>
			<variable id="VAR_RADIO_SORT" value="title" />
		</model>

		<code>
			<function id="showDeleteContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteSongs", false, view)
			</function>
			<function id="showDeleteProtectionContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteSongs", true, view);
			</function>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, false);
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u= "5" textresource="STR_UI_MENU_DELETE_AUDIO"	do="showDeleteContents" playing="canDeleteAndItem,!audio"/>
			<optItemButton u="30" textresource="STR_UI_MENU_SELECT_ALL"		do="checkAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="31" textresource="STR_UI_MENU_UNSELECT_ALL"	do="uncheckAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="20" textresource="STR_UI_MENU_PROTECT_AUDIO"	do="showDeleteProtectionContents" playing="canDeleteAndItem,!audio"/>
			<optItemButton u="28" textresource="STR_UI_MENU_PROTECT_ALL"	do="checkAll" playing="canMultiProtectAndItem"/>
			<optItemButton u="29" textresource="STR_UI_MENU_UNPROTECT_ALL"	do="uncheckAll" playing="canMultiProtectAndItem"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"		do="doGoToNowPlaying" playing="audio,!canMultiSelect"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING" do="doResumeSong" playing="resume,!canMultiSelect"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"	do="doOrientation" playing="!canMultiSelect"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_MYNOTES"  left="0" right="0" top="0" bottom="30" visible="false">
		// multi delete
		<code>
			<function id="showDeleteContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteNotes", view)
			</function>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, false);
			</function>
		</code>

		<model>
			<variable id="VAR_RADIO_SORT" value="date" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="34" id="sortOption" onSubItem="VAR_RADIO_SORT,+8" textresource="STR_UI_MENU_SORT_SELECTED"	playing="item,!canMultiSelect,sub"/> <!-- noReduce -->
			<optItemButton u="14" textresource="STR_UI_MENU_SEARCHTITLE"	do="doSearch" playing="item,!canMultiSelect"/>
			<optItemButton u= "5" textresource="STR_UI_MENU_DELETENOTES"	do="showDeleteContents" playing="canDeleteAndItem"/>
			<optItemButton u="30" textresource="STR_UI_MENU_SELECT_ALL"	 	do="checkAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="31" textresource="STR_UI_MENU_UNSELECT_ALL"	do="uncheckAll" playing="canMultiSelectAndItem"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"	 	do="doGoToNowPlaying" playing="audio,!canMultiSelect"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING" do="doResumeSong" playing="resume,!canMultiSelect"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"	do="doOrientation" playing="!canMultiSelect"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
			<optSubMenu>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYPAGE"		on="page" variable="VAR_RADIO_SORT" do="doSortPage" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYTYPE"		on="type" variable="VAR_RADIO_SORT" do="doSortType" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYCOMMENT"	on="text" variable="VAR_RADIO_SORT" do="doSortText" playing="item,!canMultiSelect"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_DICHISTORIES"  left="0" right="0" top="0" bottom="30" visible="false">
		// multi delete
		<code>
			<function id="showDeleteContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteDicHistories", view)
			</function>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, false);
			</function>
		</code>

		<model>
			<variable id="VAR_RADIO_SORT" value="date" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u= "5" textresource="STR_UI_MENU_DELETE_HISTORIES"	do="showDeleteContents" playing="canDeleteAndItem"/>
			<optItemButton u="30" textresource="STR_UI_MENU_SELECT_ALL"	 		do="checkAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="31" textresource="STR_UI_MENU_UNSELECT_ALL"		do="uncheckAll" playing="canMultiSelectAndItem"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"	 		do="doGoToNowPlaying" playing="audio,!canMultiSelect"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume,!canMultiSelect"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation" playing="!canMultiSelect"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_ALLMYNOTES"  left="0" right="0" top="0" bottom="30" visible="false">
		// multi delete
		<code>
			<function id="showDeleteContents">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("showDeleteAllNotes", view)
			</function>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAllItem", view, false);
			</function>
		</code>

		<model>
			<variable id="VAR_RADIO_SORT" value="date" />
		</model>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="34" id="sortOption" onSubItem="VAR_RADIO_SORT,+8" textresource="STR_UI_MENU_SORT_SELECTED"		playing="item,!canMultiSelect,sub"/> <!-- noReduce -->
			<optItemButton u="14" textresource="STR_UI_MENU_SEARCHTITLE"	do="doSearch" playing="item,!canMultiSelect"/>
			<optItemButton u= "5" textresource="STR_UI_MENU_DELETENOTES"	do="showDeleteContents" playing="canDeleteAndItem"/>
			<optItemButton u="30" textresource="STR_UI_MENU_SELECT_ALL"	 	do="checkAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="31" textresource="STR_UI_MENU_UNSELECT_ALL"	do="uncheckAll" playing="canMultiSelectAndItem"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"	 	do="doGoToNowPlaying" playing="audio,!canMultiSelect"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING" do="doResumeSong" playing="resume,!canMultiSelect"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"	do="doOrientation" playing="!canMultiSelect"/>
			<optItemButton skin="dicMenuNext" playing="next"/>

			<optSubMenu>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYDATE"		on="date"		variable="VAR_RADIO_SORT" do="doSortDate" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYTITLE"	on="title"		variable="VAR_RADIO_SORT" do="doSortTitle" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYTYPE"		on="type"		variable="VAR_RADIO_SORT" do="doSortType" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYCOMMENT"	on="text"		variable="VAR_RADIO_SORT" do="doSortText" playing="item,!canMultiSelect"/>
				<optItemRadio parentItem="sortOption" textresource="STR_UI_MENU_BYFILENAME" on="fileName"	variable="VAR_RADIO_SORT" do="doSortFilePath" playing="item"/>
			</optSubMenu>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_NOTEPAD_FREEHAND" left="0" right="0" top="0" bottom="30" visible="false">
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="12" textresource="STR_UI_MENU_DELETENOTEPAD_FREEHAND"	do="doDelNotepad"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"				do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"		do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"			do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>
	</kbookOverlay>
	<kbookOverlay id="OPTION_OVERLAY_NOTEPAD_TEXT" left="0" right="0" top="0" bottom="30" visible="false">
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="12" textresource="STR_UI_MENU_DELETENOTEPAD_TEXT"	do="doDelNotepad"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_DIC_APP" left="0" right="0" top="0" bottom="30" visible="false">
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton skin="dicMenuPrev" playing="prev"/>
			<optItemButton u="57" textresource="STR_UI_MENU_PREVIOUS_VIEW"		do="doHistoryBack" playing="history,dic-detail"/>
			<optItemButton u="52" textresource="STR_UI_MENU_CHANGE_DICTIONARY"	do="doChangeDictionary" playing=""/>
			<optItemButton u="51" textresource="STR_UI_MENU_VIEW_SEARCH_HISTORY" do="doGoToDicHistoryForDic" playing="!dicAppOnly"/>
			<optItemButton u= "6" textresource="STR_UI_MENU_NOWPLAYING"			do="doGoToNowPlaying" playing="audio"/>
			<optItemButton u="54" textresource="STR_UI_MENU_RESUMELISTENING"	do="doResumeSong" playing="resume"/>
			<optItemButton u="11" textresource="STR_UI_MENU_ORIENTATION"		do="doOrientation"/>
			<optItemButton skin="dicMenuNext" playing="next"/>
		</optMenu>
	</kbookOverlay>

	<!-- [FY10] Ticket#661: setup standby picture -->
	<kbookOverlay id="OPTION_OVERLAY_EDIT_STANDBY_PICTURE"  left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAll_standbyPicture", view, true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				var view = this.container.MENU_DETAILS_GROUP.MENU.detailsView;
				this.bubble("checkAll_standbyPicture", view, false);
			</function>
		</code>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton u="30" text="fskin:/l/strings/STR_UI_MENU_SELECT_ALL"	do="checkAll" playing="canMultiSelectAndItem"/>
			<optItemButton u="31" text="fskin:/l/strings/STR_UI_MENU_UNSELECT_ALL"	do="uncheckAll" playing="canMultiSelectAndItem"/>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="OPTION_OVERLAY_MULTIPLE_SELECT"  left="0" right="0" top="0" bottom="30" visible="false">
		<code>
			<function id="checkAll">
				this.getModel().doCloseOptMenu();
				this.bubble("doMultiSelectionCheckAll", true);
			</function>
			<function id="uncheckAll">
				this.getModel().doCloseOptMenu();
				this.bubble("doMultiSelectionCheckAll", false);
			</function>
		</code>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<optCloseBtn do="doCloseOptMenu"/>
		<optMenu>
			<optItemButton u="30" text="fskin:/l/strings/STR_UI_MENU_SELECT_ALL"	do="checkAll"/>
			<optItemButton u="31" text="fskin:/l/strings/STR_UI_MENU_UNSELECT_ALL"	do="uncheckAll"/>
		</optMenu>
	</kbookOverlay>

	<kbookOverlay id="FORMAT_ERROR_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://FormatErrorOverlayModel">
		<code>
			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
			<function id="textAreaSizeBy" params="w, h">
				this.MESSAGE_AREA.moveBy(-w/2, -h/2);
				this.MESSAGE_AREA.sizeBy(w, h);
			</function>
		</code>

		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<exGroup id="MESSAGE_AREA" top="0" width="446" height="186" visible="true" active="true">
			<exPanel  skin="opt_frame"								left="0" right="0" top= "0" bottom="0" playing="match"/>
			<kbookOverlayText skin="text-dialog" active="false" left="0" right="0" top="0" bottom="0" expandWidth="100" variable="FORMAT_ERROR_MSG"/>
			<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="13" right="13" width="130" height="42" do="doCloseFormatError" />
		</exGroup>

	</kbookOverlay>

	<kbookOverlay id="FORMAT_WHILE_DOWNLOADING_ERROR_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://FormatWhileDownloadingErrorOverlayModel">
		<code>
			<function id="doGestureFail">
				this.bubble("doBlink")
			</function>
		</code>

		<focusBounds skin="background"	left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<exGroup id="MESSAGE_AREA" width="498" height="212" visible="true" active="true">
			<exPanel  skin="opt_frame"								left="0" right="0" top= "0" bottom="0" playing="match"/>
			<kbookText skin="dialogTextFormatDL" active="false" left="20" right="20" top="20" bottom="52" variable="FORMAT_ERROR_MSG"/>
			<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="13" right="13" width="130" height="42" do="doCloseFormatWhileDownloadingError" />
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="DELETE_BOOKMARKS_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://pageDeleteBookmarksOverlayModel">
		<model>
			<variable id="VAR_DELETEBOOKMARK_MSG_1" value="" />
			<variable id="VAR_DELETEBOOKMARK_MSG_2" value="" />
		</model>
		<code>
			<function id="doOption">
				this.bubble("doBlink")
			</function>
			<function id="doSearch">
				this.bubble("doBlink")
			</function>
			<function id="doSize">
				this.bubble("doBlink")
			</function>
		</code>

		<focusBounds skin="background" left ="0" right="0" top="0" bottom="0" variable="" visible="true"/>

		<exGroup id="MESSAGE_AREA" width="446" height="256" top="0" visible="true" active="true">
			<exPanel  skin="opt_frame" left="0" right="0" top= "0" bottom="0" playing="match"/>
			<kbookText skin="dialogTextCenter" active="false" left="15" right="15" top="30" height="60" variable="VAR_DELETEBOOKMARK_MSG_1"/>
			<kbookText skin="dialogText" active="false" left="15" right="15" top="100" height="86" variable="VAR_DELETEBOOKMARK_MSG_2"/>
			<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" bottom="13" right="158" width="130" height="42" do="doYes" />
			<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" bottom="13" right="13" width="130" height="42" do="doNo" />
		</exGroup>
	</kbookOverlay>

	<kbookOverlay id="DELETE_PERIODICALLY_SETTING_DIALOG" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://DeletePeriodicallySettingOverlayModel">
		<model>
			<variable id="VAR_RADIO_KEEP_ISSUES" value="" />
			<variable id="VAR_CHECK_DELETE_NOW" value="" />
		</model>
		<code>
			<function id="preDoSave">
				this.bubble("doSave")
			</function>
			<function id="preDoCancel">
				this.bubble("doCancel")
			</function>
		</code>

		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<group width="550" height="525">
			<kbookText skin="text-dialog" active="false" left="15" right="15" top="0" height="525" value="fskin:/l/strings/STR_UI_MESSAGE_DELETE_PERIODICALLY_MAIN" />
			<kbookText skin="dialogTextNote" active="false" left="15" right="15" top="100" height="200" value="fskin:/l/strings/STR_UI_MESSAGE_DELETE_PERIODICALLY_NOTE" />

			<exRadio id="RADIO_5_ISSUES"  skin="optRadioInDialog" text=""  left="40" right="310" top="210" height="58" on="5" variable="VAR_RADIO_KEEP_ISSUES" do="do5" playing="item"/>
			<exRadio id="RADIO_10_ISSUES" skin="optRadioInDialog" text=""  left="40" right="310" top="270" height="58" on="10" variable="VAR_RADIO_KEEP_ISSUES" do="do10" playing="item"/>
			<exRadio id="RADIO_30_ISSUES" skin="optRadioInDialog" text=""  left="40" right="310" top="330" height="58" on="30" variable="VAR_RADIO_KEEP_ISSUES" do="do30" playing="item"/>
			<exRadio id="RADIO_90_ISSUES" skin="optRadioInDialog" text=""  left="260" right="35" top="210" height="58" on="90" variable="VAR_RADIO_KEEP_ISSUES" do="do90" playing="item"/>
			<exRadio id="RADIO_ALL_ISSUES" skin="optRadioInDialog" textresource="STR_COUNTER_ISSUE_ALL" left="260" right="35" top="270" height="58" on="all" variable="VAR_RADIO_KEEP_ISSUES" do="doAll" playing="item"/>
			<checkboxWithArea id="CHECK_DELETE" skin="checkboxInDialog" text="fskin:/l/strings/STR_UI_MESSAGE_DELETE_PERIODICALLY_CHECK" left="36" right="35" top="400" height="44" variable="VAR_CHECK_DELETE_NOW" on="1" off="0" do="doNow"/>
			<button2icon id="SAVE"   skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_SAVE"   top="462" right="240" width="190" height="42" do="preDoSave"/>
			<button2icon id="CANCEL" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_CANCEL" top="462" right="35"  width="190" height="42" do="preDoCancel"/>

			<exLine skin="check_box_underline" left="40" top="268" height="2" right="310"/>
			<exLine skin="check_box_underline" left="40" top="328" height="2" right="310"/>
			<exLine skin="check_box_underline" left="260" top="268" height="2" right="35"/>
			<exLine skin="check_box_underline" left="260" top="328" height="2" right="35"/>

		</group>
	</kbookOverlay>

	<kbookOverlay id="SELECT_STORAGE_DIALOG" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://commonStorageSelectOverlayModel">
		<model>
			<variable id="VAR_CAPTION" value=""/>
			<variable id="VAR_RADIO" value="0"/>
			<variable id="VAR_MSENABLE" value="false"/>
			<variable id="VAR_SDENABLE" value="false"/>
		</model>
		<code>
			<function id="initializeStorageSelect" params="caption, value">
				var model = this.getModel();
				model.setVariable("VAR_CAPTION", caption)
				model.setVariable("VAR_RADIO", value ? value : 0)
			</function>
			<function id="canMS">
				return this.getModel().getVariable("VAR_MSENABLE")
			</function>
			<function id="canSD">
				return this.getModel().getVariable("VAR_SDENABLE")
			</function>
			<function id="modelChanged">
				if (this.isShown())
					this.getModel().updateCardStatus()
				arguments.callee.grammar.call(this)
			</function>
		</code>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<group id="GROUP" width="448" height="343">
			<kbookText id="CAPTION" skin="text-dialog" active="false" left="0" right="0" top="0" bottom="0" variable="VAR_CAPTION"/>
			<exRadio id="INTERNAL" skin="optRadioInDialogBig" textresource="STR_UI_RADIOBUTTON_COLLECTIONS_DEVICE" left="36" right="36" top="85" height="58" on="0" variable="VAR_RADIO"/>
			<exLine skin="check_box_underline" left="36" top="143" height="2" right="36"/>
			<exRadio id="MS" skin="optRadioInDialogBig" textresource="STR_UI_RADIOBUTTON_COLLECTIONS_MS" left="36" right="36" top="145" height="58" on="1" can="canMS" variable="VAR_RADIO"/>
			<exLine skin="check_box_underline" left="36" top="203" height="2" right="36"/>
			<exRadio id="SD" skin="optRadioInDialogBig" textresource="STR_UI_RADIOBUTTON_COLLECTIONS_SD" left="36" right="36" top="205" height="58" on="2" can="canSD" variable="VAR_RADIO"/>
			<button2icon skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK"   bottom="13" right="188" width="160" height="42" do="doEnterButton"/>
			<button2icon skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_CANCEL" bottom="13" right="13"  width="160" height="42" do="doCancelButton"/>
		</group>
	</kbookOverlay>

	<kbookOverlay id="SORTSELECT_OVERLAY" left="0" right="0" top="0" bottom="30" visible="false" href="x-id://sortSelectOverlayModel">
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" visible="true"/>
		<optCloseBtn do="doCloseOptMenu"/>
		<optMenuSortSelect right="74" width="300" top="60" height="200" fixBottoms="" lineSkin="optSpaceSmall">
			<optItemRadio textresource="STR_UI_MENU_BYORDER"		on="order"		variable="VAR_RADIO_SORT" do="doSortOrder" playing="item,!collection,purchased"/>
			<optItemRadio textresource="STR_UI_MENU_BYDATE"			on="date"		variable="VAR_RADIO_SORT" do="doSortDate" playing="item"/>
			<optItemRadio textresource="STR_UI_MENU_BYISSUEDATE"	on="date"		variable="VAR_RADIO_SORT" do="doSortIssueDate" playing="item"/>
			<optItemRadio textresource="STR_UI_MENU_BYTITLE"		on="title"		variable="VAR_RADIO_SORT" do="doSortTitle" playing="item"/>
			<optItemRadio textresource="STR_UI_MENU_BYAUTHOR"		on="author"		variable="VAR_RADIO_SORT" do="doSortAuthor" playing="item"/>
			<optItemRadio textresource="STR_UI_MENU_BYTYPE"			on="type"		variable="VAR_RADIO_SORT" do="doSortType" playing="item"/>
			<optItemRadio textresource="STR_UI_MENU_BYCOMMENT"		on="text"		variable="VAR_RADIO_SORT" do="doSortText" playing="item"/>
			<optItemRadio textresource="STR_UI_MENU_BYFILENAME"		on="fileName"	variable="VAR_RADIO_SORT" do="doSortFilePath" playing="item"/>
			<optItemRadio textresource="STR_UI_MENU_BYLATESTREAD"	on="latest"		variable="VAR_RADIO_SORT" do="doSortLatest" playing="item"/>
			<optItemRadio textresource="STR_UI_MENU_BYTITLE"		on="album"		variable="VAR_RADIO_SORT" do="doSortAlbum" playing="item"/>
			<optItemRadio textresource="STR_UI_MENU_BYARTIST"		on="artist"		variable="VAR_RADIO_SORT" do="doSortArtist" playing="item"/>
			<optItemRadio textresource="STR_UI_MENU_BYPAGE"			on="page"		variable="VAR_RADIO_SORT" do="doSortPage" playing="item"/>
			<!--optItemRadio text="STR_UI_MENU_BYSTATE"				on="state"		variable="VAR_RADIO_SORT" do="doSortState" playing="item"/-->
		</optMenuSortSelect>
	</kbookOverlay>

	<kbookMultiPageDialog id="MULTIPAGE_DIALOG" ok="OK" cancel="NO" left="0" right="0" top="0" bottom="30" visible="false" >
		<code>
			<function id="getPageTextObj"><![CDATA[
				var pageText = this.MULTIPAGE_DIALOG_AREA.CMT_VIEWER.KEYBUF;
				return pageText;
			]]></function>
			<function id="textAreaSizeBy" params="w, h">
				this.MULTIPAGE_DIALOG_AREA.CMT_VIEWER.moveBy(0, h);
				this.MULTIPAGE_DIALOG_AREA.CMT_VIEWER.sizeBy(0, -h);
				this.MULTIPAGE_DIALOG_AREA.CAPTION.sizeBy(0, h);
			</function>
		</code>
		<focusBounds skin="background" left="0" right="0" top="0" bottom="0" variable="" visible="true"/>
		<group id="MULTIPAGE_DIALOG_AREA" width="560" height="545">
			<code>
				<function id="initialized">
					this.container.styles.push(this.ACCEPT_DENY);
					this.container.styles.push(this.EDIT_FINISH_CONNECT);
					this.container.styles.push(this.INFORMATION);
					this.container.styles.push(this.FINISH_CONNECT);
					this.container.styles.push(this.DOWNLOAD_LATER);
					this.container.styles.push(this.OK_BUTTON);
				</function>
			</code>
			<kbookText id="FRAME" skin="multipage-dialog" active="false" left="0" right="0" top="0" bottom="0"/>
			<kbookMultiDialogText id="CAPTION" skin="multipage-caption" active="false" left="0" right="0" top="0" height="54" variable="VAR_CAPTION"/>
			<exGroup id="CMT_VIEWER" left="0" right="0" height="436" bottom="55">
				<!--exButton skin="optClose" width="42" height="42" top="0" right="0" do="doAnnotationViewerClose"/-->
				<pageText  skin="multipage-text-dialog" id="KEYBUF" active="false" left="11" right="11" top= "0" bottom="55" variable="MSG"/>
				<buttonPageUpDown skin="cmtPagePrev" right="71" bottom="0" width="65" height="50" id="cmtPageBack" variableUpdate="VAR_UPDATE" do="doCmtPageBack" can="canCmtPageBack"/>
				<buttonPageUpDown skin="cmtPageNext" right="8" bottom="0" width="65" height="50" id="cmtPageForw" variableUpdate="VAR_UPDATE" do="doCmtPageForw" can="canCmtPageForw"/>
				<!--button2icon skin="keyW2" left="6" bottom="7" width="120" height="50" text=text="@Accept" do="doAnnotationEdit" can="canAnnotationEdit"/>
				<button2icon skin="keyW2" left="124" bottom="7" width="130" height="50" text="@Deny" do="doAnnotationDelete" can="canAnnotationDelete"/-->
				<label skin="label-black" bottom="13" right="140" width="200" height="26" align="right" variable="VAR_PAGENUM"/>
			</exGroup>
			<group id="ACCEPT_DENY" left="0" right="0" bottom="0" height="60">
				<button2icon id="OK" skin="keyWs" text="fskin:/l/strings/STR_UI_BUTTON_ACCEPT" bottom="13" right="211" width="200" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" />
				<button2icon id="NO" skin="keyWs" text="fskin:/l/strings/STR_UI_BUTTON_DENY" bottom="13" right="8" width="200" height="42" do="doNO" />
			</group>
			<group id="EDIT_FINISH_CONNECT" left="0" right="0" bottom="0" height="60">
				<button2icon id="EDIT" skin="keyWs" text="fskin:/l/strings/STR_UI_BUTTON_EDIT_NAME" bottom="13" right="320" width="150" height="42" do="doSomething"/>
				<button2icon id="FINISH" skin="keyWs" text="fskin:/l/strings/STR_UI_BUTTON_FINISH" bottom="13" right="161" width="150" height="42" do="doNO"/>
				<button2icon id="CONNECT" skin="keyWs" text="fskin:/l/strings/STR_UI_BUTTON_CONNECT" bottom="13" right="8" width="150" height="42" do="doOK"/>
			</group>
			<group id="INFORMATION" left="0" right="0" bottom="0" height="60">
				<button2icon id="OK" skin="keyWs" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="13" right="8" width="200" height="42" do="doOK" />
			</group>
			<group id="FINISH_CONNECT" left="0" right="0" bottom="0" height="60">
				<button2icon id="FINISH" skin="keyWs" text="fskin:/l/strings/STR_UI_BUTTON_FINISH" bottom="13" right="161" width="150" height="42" do="doNO"/>
				<button2icon id="CONNECT" skin="keyWs" text="fskin:/l/strings/STR_UI_BUTTON_CONNECT" bottom="13" right="8" width="150" height="42" do="doOK"/>
			</group>
			<group id="DOWNLOAD_LATER" left="0" right="0" bottom="0" height="60">
				<button2icon id="DOWNLOAD" skin="keyWs" text="fskin:/l/strings/STR_UI_BUTTON_DOWNLOAD_NOW" bottom="13" right="161" width="180" height="42" do="doOK"/>
				<button2icon id="LATER" skin="keyWs" text="fskin:/l/strings/STR_UI_BUTTON_LATER" bottom="13" right="8" width="150" height="42" do="doNO"/>
			</group>
			<group id="OK_BUTTON" left="0" right="0" top="0" bottom="0">
				<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="13" right="13" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" />
			</group>
		</group>
	</kbookMultiPageDialog>

	<kbookDialog id="CONFIRMATION_DIALOG" ok="OK" cancel="NO" left="0" right="0" top="0" bottom="30" visible="false" >
		<code>
			<function id="textAreaSizeBy" params="w, h">
				this.CONFIRMATION_DIALOG_AREA.moveBy(-w/2, -h/2);
				this.CONFIRMATION_DIALOG_AREA.sizeBy(w, h);
			</function>
			<function id="doMenu">
				if ( kbook.model.checkUsingDeletingDialog() ) {
					this.bubble("doBlink");
				} else {
					this.getModel().doMenu()
				}
			</function>
		</code>
		<group id="CONFIRMATION_DIALOG_AREA" width="446" height="186">
			<code>
				<function id="initialized">
					this.container.styles.push(this.YESNO_BUTTON);
					this.container.styles.push(this.OK_BUTTON);
					this.container.styles.push(this.NO_BUTTON);
					this.container.styles.push(this.STOP_BUTTON);
					this.container.styles.push(this.CANCEL_BUTTON);
					this.container.styles.push(this.SETTING_OK_BUTTON);
					this.container.styles.push(this.RETRY_SETTING_BUTTON);
					this.container.styles.push(this.SETTING_CANCEL_BUTTON);
					this.container.styles.push(this.RETRY_CANCEL_BUTTON);
					this.container.styles.push(this.BOOKMARK_OK_BUTTON);
				</function>
			</code>
			<kbookDialogText id="DIALOG" skin="text-dialog" active="false" variable="MSG" left="0" right="0" top="0" bottom="0" expandWidth="100" />
			<group id="YESNO_BUTTON" left="0" right="0" top="0" bottom="0">
				<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" bottom="13" right="158" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" />
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" bottom="13" right="13" width="130" height="42" do="doNO" />
			</group>
			<group id="OK_BUTTON" left="0" right="0" top="0" bottom="0">
				<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="13" right="13" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" />
			</group>
			<group id="NO_BUTTON" left="0" right="0" top="0" bottom="0"/>
			<group id="STOP_BUTTON" left="0" right="0" top="0" bottom="0">
				<kbookText id="SUB_DIALOG" skin="text-dialog-W" active="false" bottom="30" height="100" width="200" left="0" variable="DLG_CANCEL_MSG"/>
				<!--button2icon id="CANCEL" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_STOP" bottom="13" right="13" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" /-->
			</group>
			<group id="CANCEL_BUTTON" left="0" right="0" top="0" bottom="0">
				<button2icon id="CANCEL" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_CANCEL" bottom="13" right="13" width="130" height="42" do="doNO"  beforeClick="onMouseDown" afterClick="onMouseUp" />
			</group>
			<group id="SETTING_OK_BUTTON" left="0" right="0" top="0" bottom="0">
				<button2icon id="SETTING" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_SETTING" bottom="13" right="158" width="130" height="42" do="doSomething" />
				<button2icon id="CANCEL" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="13" right="13" width="130" height="42" do="doNO" />
			</group>
			<group id="RETRY_SETTING_BUTTON" left="0" right="0" top="0" bottom="0">
				<button2icon id="RETRY" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_RETRY" bottom="13" right="303" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" />
				<button2icon id="SETTING" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_SETTING" bottom="13" right="158" width="130" height="42" do="doSomething" />
				<button2icon id="CANCEL" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_CANCEL" bottom="13" right="13" width="130" height="42" do="doNO" />
			</group>
			<group id="SETTING_CANCEL_BUTTON" left="0" right="0" top="0" bottom="0">
				<button2icon id="SETTING" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_SETTING" bottom="13" right="158" width="130" height="42" do="doSomething" />
				<button2icon id="CANCEL" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_CANCEL" bottom="13" right="13" width="130" height="42" do="doNO" />
			</group>
			<group id="RETRY_CANCEL_BUTTON" left="0" right="0" top="0" bottom="0">
				<button2icon id="RETRY" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_RETRY" bottom="13" right="303" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" />
				<button2icon id="CANCEL" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_CANCEL" bottom="13" right="13" width="130" height="42" do="doNO" />
			</group>
			<group id="BOOKMARK_OK_BUTTON" left="0" right="0" top="0" bottom="0">
				<button2icon id="BOOKMARK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_BOOKMARKS" bottom="13" right="158" width="180" height="42" do="doSomething"  beforeClick="onMouseDown" afterClick="onMouseUp" />
				<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="13" right="13" width="130" height="42" do="doOK" />
			</group>
		</group>
	</kbookDialog>

	<kbookErrorDialog id="ERROR_DIALOG" ok="OK" cancel="NO" left="0" right="0" top="0" bottom="30" visible="false" >
		<code>
			<function id="textAreaSizeBy" params="w, h">
				this.ERROR_DIALOG_AREA.moveBy(-w/2, -h/2);
				this.ERROR_DIALOG_AREA.sizeBy(w, h);
			</function>
		</code>
		<group id="ERROR_DIALOG_AREA" width="446" height="186">
			<kbookDialogText id="DIALOG" skin="text-dialog" active="false" variable="MSG" left="0" right="0" top="0" bottom="0" expandWidth="100" />
			<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="13" right="13" width="130" height="42" do="doOK"  beforeClick="onMouseDown" afterClick="onMouseUp" />
		</group>
	</kbookErrorDialog>

	<kbookSimplePanel id="LOW_BATTERY_GROUP" skin="kbookDialog" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doMenu">
				this.doOK();
			</function>
			<function id="doRoot">
				this.doOK();
				this.container.bubble("doRoot");
			</function>
			<function id="doOK">
				this.setVariable("LOW_BATTERY", 0);
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
			<function id="doNext">
				this.bubble("doBlink");
			</function>
			<function id="doPrevious">
				this.bubble("doBlink");
			</function>
		</code>
		<group width="446" height="216">
			<group width="446" height="186" top="0">
			<kbookText skin="kbookAlertDialog" active="false" value="fskin:/l/strings/STR_UI_MESSAGE_LOWBATTERY" width="446" height="186" />
			<button2icon id="OK" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_OK" bottom="13" right="13" width="130" height="42" do="doOK" />
			<!--button skin="kbookDialogOKButton" bottom="13" right="13" width="130" height="42" do="doOK" /-->
			<sprite skin="diskSprite" left="5" top="5" width="140" height="140" u="5" active="false"/>
			</group>
		</group>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_LOWBATTERY"/>
	</kbookSimplePanel>

	<group id="DEVICE_SHUTDOWN_MODAL_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMenu">
				var value = this.getVariable("DEVICE_SHUTDOWN_MODAL")
				if (value)
					this.setVariable("DEVICE_SHUTDOWN_MODAL", 0)
				else 
					this.bubble("doMenuClose", this);
			</function>
			<function id="doRoot">
				var value = this.getVariable("DEVICE_SHUTDOWN_MODAL")
				if (value)
					this.setVariable("DEVICE_SHUTDOWN_MODAL", 0)
				this.container.bubble("doRoot")
			</function>
			<function id="doOption">
				this.bubble("doBlink")
			</function>
			<function id="doSearch">
				this.bubble("doBlink")
			</function>
			<function id="doSize">
				this.bubble("doBlink")
			</function>
			<function id="doSearch">
				this.bubble("doBlink")
			</function>
			<function id="doNext">
				this.bubble("doBlink")
			</function>
			<function id="doPrevious">
				this.bubble("doBlink")
			</function>
		</code>
		<panel skin="kbookDeviceShutdown" left="0" right="0" top="0" bottom="0" active="true">
			<code>
				<function id="canTap">
					return false;
				</function>
				<function id="canDoubleTap">
					return false;
				</function>
				<function id="canLine">
					return false;
				</function>
				<function id="canLineAndHold">
					return false;
				</function>
				<function id="doGestureFail">
					this.bubble("doBlink")
				</function>
			</code>
		</panel>
		<sprite skin="device-shutdown" left="0" width="70" top="0" height="70" active="false"/>
		<!--kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" text="Device Shutdown"/-->
		<kbookLabel skin="title" left="70" right="0" top="0" height="70" align="left" textresource="STR_NODE_TITLE_DEVICESHUTDOWN"/>
		<!--group id="DEVICE_SHUTDOWN" width="480" height="143"-->
		<group id="DEVICE_SHUTDOWN" left="0" right="0" height="143">
			<!--
			<kbookLabel skin="settingsMessage" left="0" right="0" top="0" height="44" align="center" textresource="STR_UI_MESSAGE_DEVICE_SHUTDOWN_1"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="44" height="44" align="center" textresource="STR_UI_MESSAGE_DEVICE_SHUTDOWN_2"/>
			-->
			<kbookText skin="settingText" active="false" left="15" right="15" top="0" height="160" value="fskin:/l/strings/STR_UI_MESSAGE_DEVICE_SHUTDOWN"/>

			<group top="158" width="296" height="42">
				<button2icon id="YES" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_YES" top="0" left="0" width="142" height="42">
					<code>
						<function id="click">
							var value = this.getVariable("DEVICE_SHUTDOWN_MODAL")
							if (value)
								this.setVariable("DEVICE_SHUTDOWN_MODAL", 0)
							this.bubble("doDeviceShutdown", this);
						</function>
					</code>
				</button2icon>
				<button2icon id="NO" skin="keyW2" text="fskin:/l/strings/STR_UI_BUTTON_NO" top="0" right="0" width="142" height="42">
					<code>
						<function id="click">
							var value = this.getVariable("DEVICE_SHUTDOWN_MODAL")
							if (value)
								this.setVariable("DEVICE_SHUTDOWN_MODAL", 0)
							else 
								this.bubble("doMenuClose", this);
						</function>
					</code>
				</button2icon>
			</group>
		</group>
		<!-- Back button -->
		<button2 skin="button_back" left="5" top="5" width="61" height="61" do="doMenu"/>
	</group>
		
	<group id="DISK_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doMenu">
				this.bubble("doBlink");
			</function>
			<function id="doRoot">
				this.bubble("doBlink");
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
		</code>
		<background skin="diskBackground" left="0" right="0" top="0" bottom="0"/>
		<sprite id="WAIT" skin="diskSprite" width="144" height="140" active="false"> <!-- temporary fix of #8 -->
			<kbookAnimation id="WAIT" duration="4" loop="true">
				<frames>
					<frame>
						<setU u="0"/>
					</frame>
					<frame>
						<setU u="1"/>
					</frame>
					<frame>
						<setU u="2"/>
					</frame>
					<frame>
						<setU u="3"/>
					</frame>
				</frames>
			</kbookAnimation>
		</sprite>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_LOADING"/>
	</group>

	<group id="SHUTDOWN_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<background skin="diskBackground" left="0" right="0" top="0" bottom="0"/>
		<sprite skin="diskSprite" width="140" height="140" u="6" active="false"/>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="109" right="109" height="30" bottom="0" align="center" variable="SHUTDOWN_MSG"/>
	</group>

	<group id="BATTERY_SHUTDOWN_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<kbookFill color="#FFFFFFFF" left="0" right="0" top="0" bottom="30"/>
		<sprite skin="diskSprite" width="140" height="140" u="6" active="false"/>
		<group width="584" height="400">
			<panel skin="text-dialog" left="0" right="0" top="0" bottom="0"/>
			<text skin="text-dialog-W" active="false" variable="BATTERY_SHUTDOWN_MSG" left="145" right="0" top="0" bottom="0"/>
			<sprite skin="diskSprite" left="5" width="140" height="140" u="6" active="false"/>
		</group>
		<kbookFill left="109" right="109" height= "30" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="109" right="109" height="30" bottom="0" align="center" variable="BATTERY_SHUTDOWN_STATUS_MSG"/>
	</group>

	<group id="SHUTDOWN_EXTERNAL_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="initialized"><![CDATA[
				var orientation = (kbook.model.container.getVariable("ORIENTATION")?"H" : "V");

				if (orientation == "V") {
					this.VIEW_SHUTDOWN_WARNING_V.show(true)
					this.VIEW_SHUTDOWN_WARNING_H.show(false)
				}
				else {
					this.VIEW_SHUTDOWN_WARNING_V.show(false)
					this.VIEW_SHUTDOWN_WARNING_H.show(true)
				}
			]]></function>
		</code>
		<background skin="diskBackground" left="0" right="0" top="0" bottom="0"/>
		<exGroup id="VIEW_SHUTDOWN_WARNING_V"  width="410" height="200" top="291" visible="true" active="true">
			<exPanel  skin="opt_frame"								left="0" right="0" top= "0" bottom="0" playing="match"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="8" height="44" align="center" variable="FORMAT_WARNING_MSG1"/>
			<kbookText skin="settingText" active="false" left="15" right="15" top="76" height="185" variable="FORMAT_WARNING_MSG2"/>
		</exGroup>
		<exGroup id="VIEW_SHUTDOWN_WARNING_H"  width="410" height="200" top="191" visible="true" active="true">
			<exPanel  skin="opt_frame"								left="0" right="0" top= "0" bottom="0" playing="match"/>
			<kbookLabel skin="settingsMessage" left="0" right="0" top="8" height="44" align="center" variable="FORMAT_WARNING_MSG1"/>
			<kbookText skin="settingText" active="false" left="15" right="15" top="76" height="125" variable="FORMAT_WARNING_MSG2"/>
		</exGroup>

		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="109" right="109" height="30" bottom="0" align="center" variable="SHUTDOWN_MSG"/>
	</group>

	<group id="FORMAT_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<background skin="diskBackground" left="0" right="0" top="0" bottom="0"/>
		<sprite id="FORMAT" skin="diskSprite" width="144" height="140" active="false"> 
		</sprite>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="109" right="109" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_FORMATTING"/>
	</group>
	
	<!-- This group is identical to FORMAT_GROUP in all but name, and they can eventually be collapsed into
		one.  However, for now I'm keeping them separate in case we want to change the text of the label
		in this group later. -->
	<group id="PROGRESS_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<background skin="diskBackground" left="0" right="0" top="0" bottom="0"/>
		<sprite id="PROGRESS" skin="diskSprite" width="144" height="140" active="false"> 
		</sprite>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="109" right="109" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_FORMATTING"/>
	</group>
	
	<kbookSimplePanel id="INVALID_FORMAT_GROUP" skin="kbookDialog" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMarkMenu">
				this.bubble("doBlink");
			</function>
			<function id="doMenu">
				this.bubble("doBlink");
			</function>
			<function id="doRoot">
				this.bubble("doBlink");
			</function>
			<function id="doOK">
				this.setVariable("INVALID_FORMAT", 0);
				this.bubble("doGotoFormatDevice");
			</function>
			<function id="doSearch">
				this.bubble("doBlink");
			</function>
			<function id="doOption">
				this.bubble("doBlink");
			</function>
			<function id="doSize">
				this.bubble("doBlink");
			</function>
			<function id="doNext">
				this.bubble("doBlink");
			</function>
			<function id="doPrevious">
				this.bubble("doBlink");
			</function>
		</code>
		<group width="590" height="200">
			<kbookText skin="kbookAlertDialog" active="false" value="fskin:/l/strings/STR_UI_CONFIRM_INVALIDFORMAT" width="590" height="200"/>
			<button skin="kbookDialogOKButton" bottom="15" right="15" width="130" height="42" do="doOK" />
			<sprite skin="diskSprite" left="5" top="5" width="140" height="140" u="5" active="false"/>
		</group>
		<kbookStatus left="0" right="0" height="33" bottom="0"/>
		<kbookLabel skin="label-statusBar" clock="true" left="157" right="157" height="30" bottom="0" align="center" textresource="STR_UI_MESSAGE_INVALIDFORMAT"/>
	</kbookSimplePanel>

	<view href="statusGroup.xml" id="STATUS_GROUP" left="0" right="0" top="0" bottom="0"/>
	<kbookFill id="clockTimeBackground" left="0" right="0" height= "30" bottom="0" active="false" visible="false"/>
	<kbookLabel id="clockTimeLabel" skin="label-statusBar" left="0" right="0" height="30" bottom="0" align="center" active="false" visible="false"/>
	<kbookFill id="wifiEventBackground" left="0" right="0" height= "30" bottom="0" active="false" visible="false"/>
	<kbookLabel id="wifiEventLabel" skin="label-statusBar" left="0" right="0" height="30" bottom="0" align="center" active="false" visible="false"/>

	<!-- PRS+ stuff -->
	<panel id="POPUP_MENU"  skin="popup" left="50" bottom="50" width="0" height="0"  visible="false">
		<exButton id="CLOSE_BOX" skin="optClose" right="0" top="-62" width="42" height="42" do="doMenu"/>
		<group id="innerGroup" left="6" right="6" top="6" bottom = "6">
			<group id="panel10" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="0" />
				<button id="0" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel9" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="9" />
				<button id="9" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>				
			</group>
			<group id="panel8" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="8" />
				<button id="8" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel7" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="7" />
				<button id="7" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel6" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="6" />
				<button id="6" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel5" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="5" />
				<button id="5" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel4" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="4" />
				<button id="4" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel3" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="3" />
				<button id="3" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="false" do="doPopupButton"/>
			</group>
			<group id="panel2" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="2" />
				<button id="2" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="true" do="doPopupButton"/>				
			</group>
			<group id="panel1" left="0" right="0" height="1" bottom="1" >
				<text id="menu" skin="popupText" left="0" right="35" top="0" bottom="0" />
				<text id="indicator" skin="popupIndicator" right="0" top="0" bottom="0" width="35" value="1" />
				<button id="1" skin="prspButton" left="0" right="0" top="0" bottom="0" visible="true" do="doPopupButton"/>
			</group>
		</group>
	</panel>
	<!-- End of PRS+ stuff -->

	
	<group id="CALIBRATION_GROUP" left="0" right="0" top="0" bottom="0" visible="false">
		<code>
			<function id="doMenu">
				if (this.getVariable("STATE") == "DISPLAY_CALIBRATION")
					this.CALIBRATION.cancel()
			</function>
			<function id="doRoot">
				if (this.getVariable("STATE") == "DISPLAY_CALIBRATION") {
					this.CALIBRATION.cancel()
					this.container.bubble("doRoot")
				}
			</function>
		</code>
		<calibration id="CALIBRATION" doFinish="doFinishCalibration" doCancel="doCancelCalibration" doNext="doNextCalibration" doFail="doFailCalibration" left="0" right="0" top="0" bottom="0">
			<point left="1" top="1" centerX="50" centerY="50" href="calibrationTop.png"/>
			<point right="1" bottom="1" centerX="150" centerY="150" href="calibrationBottom.png"/>
			<point right="35" top="35" href="confirmation30.png"/>
			<point width="30" height="30" href="confirmation30.png"/>
		</calibration>
		<group id="GUIDE" width="600" height="350" bottom="150">
			<image width="240" right="19" height="240" bottom="16" href="calibrationDeviceImage.png"/>
			<kbookText id="START" skin="settingTextLeft" active="false" left="40" width="320" height="180" bottom="0" value="fskin:/l/strings/STR_UI_MESSAGE_CALIBRATION_START"/>
			<kbookText id="FAIL" skin="settingTextLeft" active="false" left="40" width="320" height="180" bottom="0" value="fskin:/l/strings/STR_UI_MESSAGE_CALIBRATION_ERR"/>
		</group>
	</group>

	<monochrome id="MONO_BTN_FILTER" left="0" right="0" top="0" bottom="0" visible="false"/>

	<rotateSensor left="0" right="0" top="0" bottom="0" active="false">
		<code>
			<function id="rotated">
				var model = this.container.getModel()
				if (model.annotationFromList)
					this.container.PAGE_GROUP.PAGE_SUBGROUP.PAGE.autoPageTapping()
				if (model.duringRotateFlag)
					model.duringRotateFlag = false;

				if ("SCROLL_SETTING" == this.getVariable("STATE"))
					model.setLayoutAtScrollSetting(model.currentNode);
				if (model.STATE == "PAGE")
					this.container.PAGE_GROUP.PAGE_SUBGROUP.PAGE.doneZoomAdjust()
				if (model.STATE == "SOFT_RESET")
					model.coldBootWizardModelInitialize();
			</function>
		</code>
	</rotateSensor>

	<gesture id="GESTURE" left="0" right="0" top="0" bottom="0" doFail="doGestureFail">
		<drag/>
		<line error="15"/>
		<lineAndHold error="15"/>
		<doubleTap/>
		<tap/>
		<code>
			<function id="onStart">
				var device = this.getDevice()
				device.doProcessing(200)
			</function>
			<function id="onEnd">
				var device = this.getDevice()
				device.doProcessed(200)
			</function>
			<function id="onFail">
				// Vancouver UI spec defines that invalid icon must be displayed if gesture is not handled.
				this.bubble("doBlink")
			</function>
		</code>
	</gesture>

</document>
